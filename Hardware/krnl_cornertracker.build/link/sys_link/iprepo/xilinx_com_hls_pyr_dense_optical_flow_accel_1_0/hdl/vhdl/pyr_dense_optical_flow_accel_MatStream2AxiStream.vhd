-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_MatStream2AxiStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    streamFlowout_mat_437_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    streamFlowout_mat_437_empty_n : IN STD_LOGIC;
    streamFlowout_mat_437_read : OUT STD_LOGIC;
    ldata1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ldata1_full_n : IN STD_LOGIC;
    ldata1_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of pyr_dense_optical_flow_accel_MatStream2AxiStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal streamFlowout_mat_437_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1241_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln1241_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln882_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln878_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_109 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_120 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_131 : STD_LOGIC_VECTOR (5 downto 0);
    signal rows_1_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_bound_per_npc_1_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_blk_width_read_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_i_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1231_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1231_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1241_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op68_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1241_fu_183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln1353_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1353_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln882_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln216_fu_328_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln216_reg_407 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_340_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_135_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln216_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143 : STD_LOGIC_VECTOR (5 downto 0);
    signal xf_bits_per_clock_fu_215_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_04_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln791_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal mul_ln1231_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1231_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1246_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1246_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1238_fu_198_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1239_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bLast_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln550_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln785_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1253_fu_223_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln785_fu_231_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1258_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln791_fu_265_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln550_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln785_1_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln455_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_269_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln785_1_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln803_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1246_fu_334_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1231_fu_172_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1231_fu_172_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component pyr_dense_optical_flow_accel_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32ns_32ns_64_1_1_U536 : component pyr_dense_optical_flow_accel_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1231_fu_172_p0,
        din1 => mul_ln1231_fu_172_p1,
        dout => mul_ln1231_fu_172_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1241_reg_389_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_reg_131 <= add_ln216_reg_407;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                empty_reg_131 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1241_fu_178_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_109 <= add_ln1241_fu_183_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_109 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_120 <= j_1_fu_340_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_120 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_04_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln882_fu_253_p2 = ap_const_lv1_1))) then 
                p_04_fu_74 <= or_ln1353_fu_241_p2;
            elsif (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln882_fu_253_p2 = ap_const_lv1_0))) then 
                p_04_fu_74 <= select_ln791_fu_303_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_04_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln216_reg_407 <= add_ln216_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_bound_per_npc_1_reg_367 <= cols_bound_per_npc_dout;
                rows_1_reg_362 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1241_reg_389 <= icmp_ln1241_fu_178_p2;
                icmp_ln1241_reg_389_pp0_iter1_reg <= icmp_ln1241_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln882_reg_403 <= icmp_ln882_fu_253_p2;
                or_ln1353_reg_398 <= or_ln1353_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                last_blk_width_read_reg_374 <= last_blk_width;
                mul_ln1231_reg_384 <= mul_ln1231_fu_172_p2;
                sub_i_reg_379 <= sub_i_fu_161_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ldata1_full_n, rows_empty_n, cols_bound_per_npc_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, icmp_ln878_fu_348_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1241_fu_183_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_109) + unsigned(ap_const_lv64_1));
    add_ln1246_fu_334_p2 <= std_logic_vector(unsigned(j_reg_120) + unsigned(ap_const_lv31_1));
    add_ln216_fu_328_p2 <= std_logic_vector(unsigned(ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4) + unsigned(ap_phi_mux_empty_phi_fu_135_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(streamFlowout_mat_437_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, icmp_ln1241_reg_389, ap_enable_reg_pp0_iter2, ap_predicate_op68_write_state5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op68_write_state5 = ap_const_boolean_1)) or ((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (streamFlowout_mat_437_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(streamFlowout_mat_437_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, icmp_ln1241_reg_389, ap_enable_reg_pp0_iter2, ap_predicate_op68_write_state5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op68_write_state5 = ap_const_boolean_1)) or ((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (streamFlowout_mat_437_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(streamFlowout_mat_437_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, icmp_ln1241_reg_389, ap_enable_reg_pp0_iter2, ap_predicate_op68_write_state5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op68_write_state5 = ap_const_boolean_1)) or ((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (streamFlowout_mat_437_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(streamFlowout_mat_437_empty_n, icmp_ln1241_reg_389)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln1241_reg_389 = ap_const_lv1_0) and (streamFlowout_mat_437_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(ldata1_full_n, ap_predicate_op68_write_state5)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((ldata1_full_n = ap_const_logic_0) and (ap_predicate_op68_write_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_assign_proc : process(ldata1_full_n, icmp_ln878_fu_348_p2)
    begin
                ap_block_state6 <= ((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1241_fu_178_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1241_fu_178_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ldata1_full_n, ap_CS_fsm_state6, icmp_ln878_fu_348_p2)
    begin
        if ((not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4_assign_proc : process(icmp_ln1241_reg_389, icmp_ln882_fu_253_p2, xor_ln216_fu_311_p2, ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143, xf_bits_per_clock_fu_215_p3)
    begin
        if ((icmp_ln1241_reg_389 = ap_const_lv1_0)) then
            if ((icmp_ln882_fu_253_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 <= xf_bits_per_clock_fu_215_p3;
            elsif ((icmp_ln882_fu_253_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 <= xor_ln216_fu_311_p2;
            else 
                ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 <= ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143;
            end if;
        else 
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 <= ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_135_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1241_reg_389_pp0_iter1_reg, empty_reg_131, add_ln216_reg_407)
    begin
        if (((icmp_ln1241_reg_389_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_empty_phi_fu_135_p4 <= add_ln216_reg_407;
        else 
            ap_phi_mux_empty_phi_fu_135_p4 <= empty_reg_131;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143 <= "XXXXXX";

    ap_predicate_op68_write_state5_assign_proc : process(icmp_ln1241_reg_389_pp0_iter1_reg, icmp_ln882_reg_403)
    begin
                ap_predicate_op68_write_state5 <= ((icmp_ln882_reg_403 = ap_const_lv1_0) and (icmp_ln1241_reg_389_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ldata1_full_n, ap_CS_fsm_state6, icmp_ln878_fu_348_p2)
    begin
        if ((not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_210_p2 <= "1" when (zext_ln1239_fu_206_p1 = sub_i_reg_379) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1241_fu_178_p2 <= "1" when (indvar_flatten_reg_109 = mul_ln1231_reg_384) else "0";
    icmp_ln1246_fu_193_p2 <= "1" when (signed(zext_ln1246_fu_189_p1) < signed(cols_bound_per_npc_1_reg_367)) else "0";
    icmp_ln878_fu_348_p2 <= "1" when (empty_reg_131 = ap_const_lv6_0) else "0";
    icmp_ln882_fu_253_p2 <= "1" when (signed(zext_ln785_fu_231_p1) < signed(sub_ln1258_fu_247_p2)) else "0";
    j_1_fu_340_p3 <= 
        add_ln1246_fu_334_p2 when (icmp_ln1246_fu_193_p2(0) = '1') else 
        ap_const_lv31_1;

    ldata1_blk_n_assign_proc : process(ldata1_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1241_reg_389_pp0_iter1_reg, icmp_ln882_reg_403, ap_CS_fsm_state6, icmp_ln878_fu_348_p2)
    begin
        if ((((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln882_reg_403 = ap_const_lv1_0) and (icmp_ln1241_reg_389_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            ldata1_blk_n <= ldata1_full_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_din_assign_proc : process(ldata1_full_n, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, icmp_ln878_fu_348_p2, ap_predicate_op68_write_state5, or_ln1353_reg_398, p_04_fu_74, ap_block_pp0_stage0_01001)
    begin
        if ((not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ldata1_din <= p_04_fu_74;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op68_write_state5 = ap_const_boolean_1))) then 
            ldata1_din <= or_ln1353_reg_398;
        else 
            ldata1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ldata1_write_assign_proc : process(ldata1_full_n, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, icmp_ln878_fu_348_p2, ap_predicate_op68_write_state5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op68_write_state5 = ap_const_boolean_1)) or (not(((icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (icmp_ln878_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ldata1_write <= ap_const_logic_1;
        else 
            ldata1_write <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln803_fu_297_p2 <= std_logic_vector(shift_right(unsigned(streamFlowout_mat_437_dout),to_integer(unsigned('0' & sext_ln455_fu_277_p1(31-1 downto 0)))));
    mul_ln1231_fu_172_p0 <= mul_ln1231_fu_172_p00(32 - 1 downto 0);
    mul_ln1231_fu_172_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_1_reg_367),64));
    mul_ln1231_fu_172_p1 <= mul_ln1231_fu_172_p10(32 - 1 downto 0);
    mul_ln1231_fu_172_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_1_reg_362),64));
    or_ln1353_fu_241_p2 <= (shl_ln785_fu_235_p2 or p_04_fu_74);
    p_Result_s_fu_269_p3 <= p_Val2_s_fu_259_p2(6 downto 6);
    p_Val2_s_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv7_20) - unsigned(zext_ln785_fu_231_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1238_fu_198_p3 <= 
        j_reg_120 when (icmp_ln1246_fu_193_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln791_fu_303_p3 <= 
        shl_ln785_1_fu_291_p2 when (p_Result_s_fu_269_p3(0) = '1') else 
        lshr_ln803_fu_297_p2;
        sext_ln455_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_259_p2),32));

    shl_ln785_1_fu_291_p2 <= std_logic_vector(shift_left(unsigned(streamFlowout_mat_437_dout),to_integer(unsigned('0' & zext_ln785_1_fu_287_p1(31-1 downto 0)))));
    shl_ln785_fu_235_p2 <= std_logic_vector(shift_left(unsigned(streamFlowout_mat_437_dout),to_integer(unsigned('0' & zext_ln550_fu_227_p1(31-1 downto 0)))));

    streamFlowout_mat_437_blk_n_assign_proc : process(streamFlowout_mat_437_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1241_reg_389)
    begin
        if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            streamFlowout_mat_437_blk_n <= streamFlowout_mat_437_empty_n;
        else 
            streamFlowout_mat_437_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    streamFlowout_mat_437_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1241_reg_389, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1241_reg_389 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            streamFlowout_mat_437_read <= ap_const_logic_1;
        else 
            streamFlowout_mat_437_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_fu_161_p2 <= std_logic_vector(unsigned(cols_bound_per_npc_1_reg_367) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln1258_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv7_20) - unsigned(zext_ln1253_fu_223_p1));
    sub_ln550_fu_281_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(trunc_ln791_fu_265_p1));
    trunc_ln791_fu_265_p1 <= p_Val2_s_fu_259_p2(5 - 1 downto 0);
    xf_bits_per_clock_fu_215_p3 <= 
        last_blk_width_read_reg_374 when (bLast_fu_210_p2(0) = '1') else 
        ap_const_lv6_20;
    xor_ln216_fu_311_p2 <= (xf_bits_per_clock_fu_215_p3 xor ap_const_lv6_20);
    zext_ln1239_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1238_fu_198_p3),32));
    zext_ln1246_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_120),32));
    zext_ln1253_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_215_p3),7));
    zext_ln550_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_empty_phi_fu_135_p4),32));
    zext_ln785_1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln550_fu_281_p2),32));
    zext_ln785_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_empty_phi_fu_135_p4),7));
end behav;
