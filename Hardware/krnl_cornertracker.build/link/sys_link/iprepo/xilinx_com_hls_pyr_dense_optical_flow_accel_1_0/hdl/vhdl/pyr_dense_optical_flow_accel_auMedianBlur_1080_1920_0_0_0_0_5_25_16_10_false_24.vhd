-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_auMedianBlur_1080_1920_0_0_0_0_5_25_16_10_false_24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    strmFlowU_fil_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    strmFlowU_fil_empty_n : IN STD_LOGIC;
    strmFlowU_fil_read : OUT STD_LOGIC;
    strmFlowU_fil_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    strmFlowU_fil_out_full_n : IN STD_LOGIC;
    strmFlowU_fil_out_write : OUT STD_LOGIC;
    flagU_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    flagU_empty_n : IN STD_LOGIC;
    flagU_read : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rows_out_full_n : IN STD_LOGIC;
    rows_out_write : OUT STD_LOGIC;
    cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cols_out_full_n : IN STD_LOGIC;
    cols_out_write : OUT STD_LOGIC );
end;


architecture behav of pyr_dense_optical_flow_accel_auMedianBlur_1080_1920_0_0_0_0_5_25_16_10_false_24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal cols_blk_n : STD_LOGIC;
    signal rows_out_blk_n : STD_LOGIC;
    signal cols_out_blk_n : STD_LOGIC;
    signal trunc_ln360_fu_78_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln360_reg_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln360_2_fu_83_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln360_2_reg_93 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_idle : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_ready : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil9_read : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_write : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_flagU19_read : STD_LOGIC;
    signal grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call16 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component pyr_dense_optical_flow_accel_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        strmFlowU_fil9_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        strmFlowU_fil9_empty_n : IN STD_LOGIC;
        strmFlowU_fil9_read : OUT STD_LOGIC;
        strmFlowU_fil_out11_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        strmFlowU_fil_out11_full_n : IN STD_LOGIC;
        strmFlowU_fil_out11_write : OUT STD_LOGIC;
        flagU19_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        flagU19_empty_n : IN STD_LOGIC;
        flagU19_read : OUT STD_LOGIC;
        img_height : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66 : component pyr_dense_optical_flow_accel_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start,
        ap_done => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done,
        ap_idle => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_idle,
        ap_ready => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_ready,
        strmFlowU_fil9_dout => strmFlowU_fil_dout,
        strmFlowU_fil9_empty_n => strmFlowU_fil_empty_n,
        strmFlowU_fil9_read => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil9_read,
        strmFlowU_fil_out11_din => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_din,
        strmFlowU_fil_out11_full_n => strmFlowU_fil_out_full_n,
        strmFlowU_fil_out11_write => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_write,
        flagU19_dout => flagU_dout,
        flagU19_empty_n => flagU_empty_n,
        flagU19_read => grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_flagU19_read,
        img_height => trunc_ln360_reg_88,
        img_width => trunc_ln360_2_reg_93);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln360_2_reg_93 <= trunc_ln360_2_fu_83_p1;
                trunc_ln360_reg_88 <= trunc_ln360_fu_78_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n, grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call16_assign_proc : process(real_start, ap_done_reg, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
                ap_block_state1_ignore_call16 <= ((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    cols_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cols_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_blk_n <= cols_empty_n;
        else 
            cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_out_blk_n <= cols_out_full_n;
        else 
            cols_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_out_din <= cols_dout;

    cols_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_out_write <= ap_const_logic_1;
        else 
            cols_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cols_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;


    flagU_read_assign_proc : process(grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_flagU19_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            flagU_read <= grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_flagU19_read;
        else 
            flagU_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start <= grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    rows_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_blk_n <= rows_out_full_n;
        else 
            rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rows_out_din <= rows_dout;

    rows_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_write <= ap_const_logic_1;
        else 
            rows_out_write <= ap_const_logic_0;
        end if; 
    end process;


    rows_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, rows_out_full_n, cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    strmFlowU_fil_out_din <= grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_din;

    strmFlowU_fil_out_write_assign_proc : process(grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            strmFlowU_fil_out_write <= grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil_out11_write;
        else 
            strmFlowU_fil_out_write <= ap_const_logic_0;
        end if; 
    end process;


    strmFlowU_fil_read_assign_proc : process(grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil9_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            strmFlowU_fil_read <= grp_auMedian3x3_1080_1920_0_0_0_1922_5_25_16_10_false_s_fu_66_strmFlowU_fil9_read;
        else 
            strmFlowU_fil_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln360_2_fu_83_p1 <= cols_dout(16 - 1 downto 0);
    trunc_ln360_fu_78_p1 <= rows_dout(16 - 1 downto 0);
end behav;
