// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_MatStream2AxiStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        streamFlowout_mat_437_dout,
        streamFlowout_mat_437_empty_n,
        streamFlowout_mat_437_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] streamFlowout_mat_437_dout;
input   streamFlowout_mat_437_empty_n;
output   streamFlowout_mat_437_read;
output  [31:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [5:0] last_blk_width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg streamFlowout_mat_437_read;
reg[31:0] ldata1_din;
reg ldata1_write;
reg rows_read;
reg cols_bound_per_npc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    streamFlowout_mat_437_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1241_reg_389;
reg    ldata1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1241_reg_389_pp0_iter1_reg;
reg   [0:0] icmp_ln882_reg_403;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln878_fu_348_p2;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg   [63:0] indvar_flatten_reg_109;
reg   [30:0] j_reg_120;
reg   [5:0] empty_reg_131;
reg   [31:0] rows_1_reg_362;
reg    ap_block_state1;
reg   [31:0] cols_bound_per_npc_1_reg_367;
reg   [5:0] last_blk_width_read_reg_374;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_i_fu_161_p2;
reg   [31:0] sub_i_reg_379;
wire   [63:0] mul_ln1231_fu_172_p2;
reg   [63:0] mul_ln1231_reg_384;
wire   [0:0] icmp_ln1241_fu_178_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op68_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln1241_fu_183_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] or_ln1353_fu_241_p2;
reg   [31:0] or_ln1353_reg_398;
wire   [0:0] icmp_ln882_fu_253_p2;
wire   [5:0] add_ln216_fu_328_p2;
reg   [5:0] add_ln216_reg_407;
wire   [30:0] j_1_fu_340_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [5:0] ap_phi_mux_empty_phi_fu_135_p4;
reg   [5:0] ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4;
wire   [5:0] xor_ln216_fu_311_p2;
wire   [5:0] ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143;
wire   [5:0] xf_bits_per_clock_fu_215_p3;
reg   [31:0] p_04_fu_74;
wire   [31:0] select_ln791_fu_303_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state6;
wire   [31:0] mul_ln1231_fu_172_p0;
wire   [31:0] mul_ln1231_fu_172_p1;
wire   [31:0] zext_ln1246_fu_189_p1;
wire   [0:0] icmp_ln1246_fu_193_p2;
wire   [30:0] select_ln1238_fu_198_p3;
wire   [31:0] zext_ln1239_fu_206_p1;
wire   [0:0] bLast_fu_210_p2;
wire   [31:0] zext_ln550_fu_227_p1;
wire   [31:0] shl_ln785_fu_235_p2;
wire   [6:0] zext_ln1253_fu_223_p1;
wire   [6:0] zext_ln785_fu_231_p1;
wire   [6:0] sub_ln1258_fu_247_p2;
wire  signed [6:0] p_Val2_s_fu_259_p2;
wire   [4:0] trunc_ln791_fu_265_p1;
wire   [4:0] sub_ln550_fu_281_p2;
wire   [31:0] zext_ln785_1_fu_287_p1;
wire  signed [31:0] sext_ln455_fu_277_p1;
wire   [0:0] p_Result_s_fu_269_p3;
wire   [31:0] shl_ln785_1_fu_291_p2;
wire   [31:0] lshr_ln803_fu_297_p2;
wire   [30:0] add_ln1246_fu_334_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] mul_ln1231_fu_172_p00;
wire   [63:0] mul_ln1231_fu_172_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pyr_dense_optical_flow_accel_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U536(
    .din0(mul_ln1231_fu_172_p0),
    .din1(mul_ln1231_fu_172_p1),
    .dout(mul_ln1231_fu_172_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_389_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_131 <= add_ln216_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_131 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_178_p2 == 1'd0))) begin
        indvar_flatten_reg_109 <= add_ln1241_fu_183_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_109 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_120 <= j_1_fu_340_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_120 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_fu_253_p2 == 1'd1))) begin
        p_04_fu_74 <= or_ln1353_fu_241_p2;
    end else if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_fu_253_p2 == 1'd0))) begin
        p_04_fu_74 <= select_ln791_fu_303_p3;
    end else if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_04_fu_74 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln216_reg_407 <= add_ln216_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_1_reg_367 <= cols_bound_per_npc_dout;
        rows_1_reg_362 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1241_reg_389 <= icmp_ln1241_fu_178_p2;
        icmp_ln1241_reg_389_pp0_iter1_reg <= icmp_ln1241_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln882_reg_403 <= icmp_ln882_fu_253_p2;
        or_ln1353_reg_398 <= or_ln1353_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        last_blk_width_read_reg_374 <= last_blk_width;
        mul_ln1231_reg_384 <= mul_ln1231_fu_172_p2;
        sub_i_reg_379 <= sub_i_fu_161_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1241_fu_178_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1241_reg_389 == 1'd0)) begin
        if ((icmp_ln882_fu_253_p2 == 1'd1)) begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 = xf_bits_per_clock_fu_215_p3;
        end else if ((icmp_ln882_fu_253_p2 == 1'd0)) begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 = xor_ln216_fu_311_p2;
        end else begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 = ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143;
        end
    end else begin
        ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 = ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_389_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_empty_phi_fu_135_p4 = add_ln216_reg_407;
    end else begin
        ap_phi_mux_empty_phi_fu_135_p4 = empty_reg_131;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln878_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln882_reg_403 == 1'd0) & (icmp_ln1241_reg_389_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln878_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ldata1_din = p_04_fu_74;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_predicate_op68_write_state5 == 1'b1))) begin
        ldata1_din = or_ln1353_reg_398;
    end else begin
        ldata1_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op68_write_state5 == 1'b1)) | (~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln878_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamFlowout_mat_437_blk_n = streamFlowout_mat_437_empty_n;
    end else begin
        streamFlowout_mat_437_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_389 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamFlowout_mat_437_read = 1'b1;
    end else begin
        streamFlowout_mat_437_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1241_fu_183_p2 = (indvar_flatten_reg_109 + 64'd1);

assign add_ln1246_fu_334_p2 = (j_reg_120 + 31'd1);

assign add_ln216_fu_328_p2 = (ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_146_p4 + ap_phi_mux_empty_phi_fu_135_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op68_write_state5 == 1'b1)) | ((icmp_ln1241_reg_389 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (streamFlowout_mat_437_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op68_write_state5 == 1'b1)) | ((icmp_ln1241_reg_389 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (streamFlowout_mat_437_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op68_write_state5 == 1'b1)) | ((icmp_ln1241_reg_389 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (streamFlowout_mat_437_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln1241_reg_389 == 1'd0) & (streamFlowout_mat_437_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((ldata1_full_n == 1'b0) & (ap_predicate_op68_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln878_fu_348_p2 == 1'd0) & (ldata1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_conv_i9_i_i4_pn_i_reg_143 = 'bx;

always @ (*) begin
    ap_predicate_op68_write_state5 = ((icmp_ln882_reg_403 == 1'd0) & (icmp_ln1241_reg_389_pp0_iter1_reg == 1'd0));
end

assign bLast_fu_210_p2 = ((zext_ln1239_fu_206_p1 == sub_i_reg_379) ? 1'b1 : 1'b0);

assign icmp_ln1241_fu_178_p2 = ((indvar_flatten_reg_109 == mul_ln1231_reg_384) ? 1'b1 : 1'b0);

assign icmp_ln1246_fu_193_p2 = (($signed(zext_ln1246_fu_189_p1) < $signed(cols_bound_per_npc_1_reg_367)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_348_p2 = ((empty_reg_131 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_253_p2 = (($signed(zext_ln785_fu_231_p1) < $signed(sub_ln1258_fu_247_p2)) ? 1'b1 : 1'b0);

assign j_1_fu_340_p3 = ((icmp_ln1246_fu_193_p2[0:0] === 1'b1) ? add_ln1246_fu_334_p2 : 31'd1);

assign lshr_ln803_fu_297_p2 = streamFlowout_mat_437_dout >> sext_ln455_fu_277_p1;

assign mul_ln1231_fu_172_p0 = mul_ln1231_fu_172_p00;

assign mul_ln1231_fu_172_p00 = cols_bound_per_npc_1_reg_367;

assign mul_ln1231_fu_172_p1 = mul_ln1231_fu_172_p10;

assign mul_ln1231_fu_172_p10 = rows_1_reg_362;

assign or_ln1353_fu_241_p2 = (shl_ln785_fu_235_p2 | p_04_fu_74);

assign p_Result_s_fu_269_p3 = p_Val2_s_fu_259_p2[32'd6];

assign p_Val2_s_fu_259_p2 = (7'd32 - zext_ln785_fu_231_p1);

assign select_ln1238_fu_198_p3 = ((icmp_ln1246_fu_193_p2[0:0] === 1'b1) ? j_reg_120 : 31'd0);

assign select_ln791_fu_303_p3 = ((p_Result_s_fu_269_p3[0:0] === 1'b1) ? shl_ln785_1_fu_291_p2 : lshr_ln803_fu_297_p2);

assign sext_ln455_fu_277_p1 = p_Val2_s_fu_259_p2;

assign shl_ln785_1_fu_291_p2 = streamFlowout_mat_437_dout << zext_ln785_1_fu_287_p1;

assign shl_ln785_fu_235_p2 = streamFlowout_mat_437_dout << zext_ln550_fu_227_p1;

assign sub_i_fu_161_p2 = ($signed(cols_bound_per_npc_1_reg_367) + $signed(32'd4294967295));

assign sub_ln1258_fu_247_p2 = (7'd32 - zext_ln1253_fu_223_p1);

assign sub_ln550_fu_281_p2 = (5'd0 - trunc_ln791_fu_265_p1);

assign trunc_ln791_fu_265_p1 = p_Val2_s_fu_259_p2[4:0];

assign xf_bits_per_clock_fu_215_p3 = ((bLast_fu_210_p2[0:0] === 1'b1) ? last_blk_width_read_reg_374 : 6'd32);

assign xor_ln216_fu_311_p2 = (xf_bits_per_clock_fu_215_p3 ^ 6'd32);

assign zext_ln1239_fu_206_p1 = select_ln1238_fu_198_p3;

assign zext_ln1246_fu_189_p1 = j_reg_120;

assign zext_ln1253_fu_223_p1 = xf_bits_per_clock_fu_215_p3;

assign zext_ln550_fu_227_p1 = ap_phi_mux_empty_phi_fu_135_p4;

assign zext_ln785_1_fu_287_p1 = sub_ln550_fu_281_p2;

assign zext_ln785_fu_231_p1 = ap_phi_mux_empty_phi_fu_135_p4;

endmodule //pyr_dense_optical_flow_accel_MatStream2AxiStream
