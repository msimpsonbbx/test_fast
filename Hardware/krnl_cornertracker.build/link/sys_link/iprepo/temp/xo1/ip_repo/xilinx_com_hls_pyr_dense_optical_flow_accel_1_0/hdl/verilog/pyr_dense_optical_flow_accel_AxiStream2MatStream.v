// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_AxiStream2MatStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        streamFlowin_mat_436_din,
        streamFlowin_mat_436_full_n,
        streamFlowin_mat_436_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [31:0] streamFlowin_mat_436_din;
input   streamFlowin_mat_436_full_n;
output   streamFlowin_mat_436_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [5:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg streamFlowin_mat_436_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1038_reg_761;
reg   [0:0] icmp_ln1049_reg_791;
reg    streamFlowin_mat_436_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1038_reg_761_pp0_iter1_reg;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg   [31:0] j_reg_125;
reg   [30:0] i_reg_136;
reg  signed [31:0] rows_3_reg_724;
reg    ap_block_state1;
reg  signed [31:0] cols_bound_per_npc_3_reg_729;
reg   [5:0] last_blk_width_2_reg_735;
wire   [31:0] bound_fu_175_p2;
reg   [31:0] bound_reg_741;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_i_fu_179_p2;
reg   [31:0] sub_i_reg_746;
wire   [6:0] sub2_i_fu_184_p2;
reg   [6:0] sub2_i_reg_751;
wire   [6:0] add_ln1057_fu_190_p2;
reg   [6:0] add_ln1057_reg_756;
wire   [0:0] icmp_ln1038_fu_200_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op85_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln1038_fu_205_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] rem_load_reg_770;
wire   [0:0] bLast_fu_214_p2;
reg   [0:0] bLast_reg_781;
wire   [5:0] xf_bits_per_clock_fu_219_p3;
reg   [5:0] xf_bits_per_clock_reg_786;
wire   [0:0] icmp_ln1049_fu_241_p2;
reg   [0:0] icmp_ln1049_reg_791_pp0_iter1_reg;
wire   [31:0] j_3_fu_275_p3;
wire   [5:0] sub_ln674_14_fu_370_p2;
reg   [5:0] sub_ln674_14_reg_800;
wire   [31:0] lshr_ln674_7_fu_380_p2;
reg   [31:0] lshr_ln674_7_reg_805;
wire   [0:0] icmp_ln1050_fu_386_p2;
reg   [0:0] icmp_ln1050_reg_810;
wire   [5:0] trunc_ln1051_fu_391_p1;
reg   [5:0] trunc_ln1051_reg_815;
wire   [5:0] sub_ln674_9_fu_466_p2;
reg   [5:0] sub_ln674_9_reg_820;
wire   [31:0] lshr_ln674_fu_476_p2;
reg   [31:0] lshr_ln674_reg_825;
wire   [0:0] icmp_ln414_fu_527_p2;
reg   [0:0] icmp_ln414_reg_830;
wire   [5:0] trunc_ln414_fu_532_p1;
reg   [5:0] trunc_ln414_reg_836;
wire   [5:0] trunc_ln414_2_fu_535_p1;
reg   [5:0] trunc_ln414_2_reg_841;
wire   [5:0] sub_ln414_4_fu_561_p2;
reg   [5:0] sub_ln414_4_reg_846;
wire   [31:0] shl_ln414_fu_571_p2;
reg   [31:0] shl_ln414_reg_851;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] ap_phi_mux_empty_phi_fu_150_p4;
wire   [31:0] p_Result_27_fu_702_p2;
wire   [31:0] ap_phi_reg_pp0_iter2_empty_reg_147;
wire   [31:0] p_Result_28_fu_591_p2;
reg   [31:0] rem_fu_86;
wire   [31:0] rem_4_fu_247_p2;
wire   [31:0] rem_3_fu_258_p2;
reg   [31:0] p_Val2_s_fu_90;
reg    ap_block_pp0_stage0_01001;
wire   [6:0] last_blk_width_cast_i_fu_172_p1;
wire   [31:0] zext_ln1027_fu_196_p1;
wire   [6:0] ptr_width_minus_fu_230_p3;
wire   [31:0] zext_ln1044_fu_226_p1;
wire  signed [31:0] sext_ln1045_fu_237_p1;
wire   [31:0] add_ln1061_fu_269_p2;
wire   [6:0] select_ln1057_fu_289_p3;
wire   [31:0] zext_ln1057_fu_295_p1;
wire   [31:0] grp_fu_157_p2;
wire   [31:0] sub_ln1057_fu_299_p2;
wire   [5:0] trunc_ln674_3_fu_310_p1;
wire   [5:0] trunc_ln674_4_fu_314_p1;
wire   [0:0] icmp_ln674_2_fu_304_p2;
wire   [5:0] sub_ln674_11_fu_328_p2;
wire   [5:0] sub_ln674_13_fu_340_p2;
reg   [31:0] tmp_26_fu_318_p4;
wire   [5:0] sub_ln674_12_fu_334_p2;
wire   [5:0] select_ln674_8_fu_346_p3;
wire   [5:0] select_ln674_10_fu_362_p3;
wire   [31:0] select_ln674_9_fu_354_p3;
wire   [31:0] zext_ln674_7_fu_376_p1;
wire   [26:0] tmp_fu_394_p4;
wire   [5:0] trunc_ln674_fu_410_p1;
wire   [0:0] icmp_ln674_fu_404_p2;
wire   [5:0] add_ln674_fu_424_p2;
wire   [5:0] sub_ln674_8_fu_436_p2;
reg   [31:0] tmp_24_fu_414_p4;
wire   [5:0] sub_ln674_fu_430_p2;
wire   [5:0] select_ln674_fu_442_p3;
wire   [5:0] select_ln674_7_fu_458_p3;
wire   [31:0] select_ln674_6_fu_450_p3;
wire   [31:0] zext_ln674_fu_472_p1;
wire   [6:0] zext_ln1044_1_fu_283_p1;
wire  signed [6:0] add_ln1054_fu_482_p2;
wire   [5:0] trunc_ln1054_1_fu_496_p1;
wire   [5:0] trunc_ln1054_fu_492_p1;
wire   [5:0] sub_ln674_10_fu_499_p2;
wire   [5:0] add_ln674_2_fu_505_p2;
wire   [31:0] zext_ln674_6_fu_511_p1;
wire   [31:0] lshr_ln674_6_fu_515_p2;
wire  signed [31:0] sext_ln1054_fu_488_p1;
wire   [5:0] sub_ln414_3_fu_539_p2;
wire   [5:0] select_ln414_fu_545_p3;
wire   [5:0] select_ln414_5_fu_553_p3;
wire   [31:0] p_Result_30_fu_521_p2;
wire   [31:0] zext_ln414_4_fu_567_p1;
wire   [31:0] zext_ln674_8_fu_582_p1;
wire   [31:0] lshr_ln674_8_fu_585_p2;
wire   [31:0] zext_ln674_5_fu_597_p1;
wire   [31:0] lshr_ln674_5_fu_600_p2;
wire   [5:0] sub_ln414_fu_611_p2;
wire   [31:0] zext_ln414_fu_616_p1;
wire   [31:0] p_Result_29_fu_606_p2;
wire   [31:0] lshr_ln414_fu_620_p2;
wire   [31:0] p_Result_s_fu_626_p2;
wire   [5:0] select_ln414_4_fu_639_p3;
reg   [31:0] tmp_25_fu_651_p4;
wire   [31:0] zext_ln414_5_fu_644_p1;
wire   [31:0] zext_ln414_6_fu_648_p1;
wire   [31:0] shl_ln414_2_fu_666_p2;
wire   [31:0] lshr_ln414_2_fu_672_p2;
wire   [31:0] and_ln414_fu_678_p2;
wire   [31:0] p_Val2_10_fu_632_p3;
wire   [31:0] xor_ln414_fu_684_p2;
wire   [31:0] select_ln414_6_fu_660_p3;
wire   [31:0] and_ln414_3_fu_690_p2;
wire   [31:0] and_ln414_4_fu_696_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U121(
    .din0(cols_bound_per_npc_3_reg_729),
    .din1(rows_3_reg_724),
    .dout(bound_fu_175_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd1))) begin
        i_reg_136 <= add_ln1038_fu_205_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_136 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd1))) begin
        j_reg_125 <= j_3_fu_275_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_791 == 1'd1) & (icmp_ln1038_reg_761 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_fu_90 <= ldata1_dout;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_241_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd1))) begin
        rem_fu_86 <= rem_3_fu_258_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd1))) begin
        rem_fu_86 <= rem_4_fu_247_p2;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_86 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1057_reg_756 <= add_ln1057_fu_190_p2;
        bound_reg_741 <= bound_fu_175_p2;
        sub2_i_reg_751 <= sub2_i_fu_184_p2;
        sub_i_reg_746 <= sub_i_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1038_fu_200_p2 == 1'd1))) begin
        bLast_reg_781 <= bLast_fu_214_p2;
        icmp_ln1049_reg_791 <= icmp_ln1049_fu_241_p2;
        rem_load_reg_770 <= rem_fu_86;
        xf_bits_per_clock_reg_786 <= xf_bits_per_clock_fu_219_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_3_reg_729 <= cols_bound_per_npc_dout;
        last_blk_width_2_reg_735 <= last_blk_width_dout;
        rows_3_reg_724 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1038_reg_761 <= icmp_ln1038_fu_200_p2;
        icmp_ln1038_reg_761_pp0_iter1_reg <= icmp_ln1038_reg_761;
        icmp_ln1049_reg_791_pp0_iter1_reg <= icmp_ln1049_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_791 == 1'd1) & (icmp_ln1038_reg_761 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1050_reg_810 <= icmp_ln1050_fu_386_p2;
        icmp_ln414_reg_830 <= icmp_ln414_fu_527_p2;
        lshr_ln674_reg_825 <= lshr_ln674_fu_476_p2;
        shl_ln414_reg_851 <= shl_ln414_fu_571_p2;
        sub_ln414_4_reg_846 <= sub_ln414_4_fu_561_p2;
        sub_ln674_9_reg_820 <= sub_ln674_9_fu_466_p2;
        trunc_ln1051_reg_815 <= trunc_ln1051_fu_391_p1;
        trunc_ln414_2_reg_841 <= trunc_ln414_2_fu_535_p1;
        trunc_ln414_reg_836 <= trunc_ln414_fu_532_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_791 == 1'd0) & (icmp_ln1038_reg_761 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln674_7_reg_805 <= lshr_ln674_7_fu_380_p2;
        sub_ln674_14_reg_800 <= sub_ln674_14_fu_370_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1038_fu_200_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1)) begin
        if ((icmp_ln1049_reg_791_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_150_p4 = p_Result_28_fu_591_p2;
        end else if ((icmp_ln1049_reg_791_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_150_p4 = p_Result_27_fu_702_p2;
        end else begin
            ap_phi_mux_empty_phi_fu_150_p4 = ap_phi_reg_pp0_iter2_empty_reg_147;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_150_p4 = ap_phi_reg_pp0_iter2_empty_reg_147;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_reg_791 == 1'd1) & (icmp_ln1038_reg_761 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op85_read_state4 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        streamFlowin_mat_436_blk_n = streamFlowin_mat_436_full_n;
    end else begin
        streamFlowin_mat_436_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        streamFlowin_mat_436_write = 1'b1;
    end else begin
        streamFlowin_mat_436_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_200_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1038_fu_205_p2 = (i_reg_136 + 31'd1);

assign add_ln1054_fu_482_p2 = ($signed(7'd127) + $signed(zext_ln1044_1_fu_283_p1));

assign add_ln1057_fu_190_p2 = (last_blk_width_cast_i_fu_172_p1 + 7'd31);

assign add_ln1061_fu_269_p2 = (j_reg_125 + 32'd1);

assign add_ln674_2_fu_505_p2 = (6'd31 + sub_ln674_10_fu_499_p2);

assign add_ln674_fu_424_p2 = ($signed(6'd33) + $signed(trunc_ln674_fu_410_p1));

assign and_ln414_3_fu_690_p2 = (xor_ln414_fu_684_p2 & p_Val2_10_fu_632_p3);

assign and_ln414_4_fu_696_p2 = (select_ln414_6_fu_660_p3 & and_ln414_fu_678_p2);

assign and_ln414_fu_678_p2 = (shl_ln414_2_fu_666_p2 & lshr_ln414_2_fu_672_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (streamFlowin_mat_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (streamFlowin_mat_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (streamFlowin_mat_436_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln1038_reg_761_pp0_iter1_reg == 1'd1) & (streamFlowin_mat_436_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_reg_147 = 'bx;

always @ (*) begin
    ap_predicate_op85_read_state4 = ((icmp_ln1049_reg_791 == 1'd1) & (icmp_ln1038_reg_761 == 1'd1));
end

assign bLast_fu_214_p2 = ((j_reg_125 == sub_i_reg_746) ? 1'b1 : 1'b0);

assign grp_fu_157_p2 = (32'd32 - rem_load_reg_770);

assign icmp_ln1038_fu_200_p2 = (($signed(zext_ln1027_fu_196_p1) < $signed(bound_reg_741)) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_241_p2 = (($signed(rem_fu_86) < $signed(zext_ln1044_fu_226_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1050_fu_386_p2 = ((rem_load_reg_770 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_527_p2 = ((rem_load_reg_770 > sext_ln1054_fu_488_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_2_fu_304_p2 = ((grp_fu_157_p2 > sub_ln1057_fu_299_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_404_p2 = ((tmp_fu_394_p4 != 27'd0) ? 1'b1 : 1'b0);

assign j_3_fu_275_p3 = ((bLast_fu_214_p2[0:0] === 1'b1) ? 32'd0 : add_ln1061_fu_269_p2);

assign last_blk_width_cast_i_fu_172_p1 = last_blk_width_2_reg_735;

assign lshr_ln414_2_fu_672_p2 = 32'd4294967295 >> zext_ln414_6_fu_648_p1;

assign lshr_ln414_fu_620_p2 = 32'd4294967295 >> zext_ln414_fu_616_p1;

assign lshr_ln674_5_fu_600_p2 = 32'd4294967295 >> zext_ln674_5_fu_597_p1;

assign lshr_ln674_6_fu_515_p2 = 32'd4294967295 >> zext_ln674_6_fu_511_p1;

assign lshr_ln674_7_fu_380_p2 = select_ln674_9_fu_354_p3 >> zext_ln674_7_fu_376_p1;

assign lshr_ln674_8_fu_585_p2 = 32'd4294967295 >> zext_ln674_8_fu_582_p1;

assign lshr_ln674_fu_476_p2 = select_ln674_6_fu_450_p3 >> zext_ln674_fu_472_p1;

assign p_Result_27_fu_702_p2 = (and_ln414_4_fu_696_p2 | and_ln414_3_fu_690_p2);

assign p_Result_28_fu_591_p2 = (lshr_ln674_8_fu_585_p2 & lshr_ln674_7_reg_805);

assign p_Result_29_fu_606_p2 = (lshr_ln674_reg_825 & lshr_ln674_5_fu_600_p2);

assign p_Result_30_fu_521_p2 = (lshr_ln674_6_fu_515_p2 & ldata1_dout);

assign p_Result_s_fu_626_p2 = (p_Result_29_fu_606_p2 & lshr_ln414_fu_620_p2);

assign p_Val2_10_fu_632_p3 = ((icmp_ln1050_reg_810[0:0] === 1'b1) ? 32'd0 : p_Result_s_fu_626_p2);

assign ptr_width_minus_fu_230_p3 = ((bLast_fu_214_p2[0:0] === 1'b1) ? sub2_i_reg_751 : 7'd0);

assign rem_3_fu_258_p2 = ($signed(sext_ln1045_fu_237_p1) + $signed(rem_fu_86));

assign rem_4_fu_247_p2 = (rem_fu_86 - zext_ln1044_fu_226_p1);

assign select_ln1057_fu_289_p3 = ((bLast_reg_781[0:0] === 1'b1) ? add_ln1057_reg_756 : 7'd63);

assign select_ln414_4_fu_639_p3 = ((icmp_ln414_reg_830[0:0] === 1'b1) ? trunc_ln414_2_reg_841 : trunc_ln414_reg_836);

assign select_ln414_5_fu_553_p3 = ((icmp_ln414_fu_527_p2[0:0] === 1'b1) ? sub_ln414_3_fu_539_p2 : trunc_ln414_fu_532_p1);

assign select_ln414_6_fu_660_p3 = ((icmp_ln414_reg_830[0:0] === 1'b1) ? tmp_25_fu_651_p4 : shl_ln414_reg_851);

assign select_ln414_fu_545_p3 = ((icmp_ln414_fu_527_p2[0:0] === 1'b1) ? trunc_ln414_fu_532_p1 : trunc_ln414_2_fu_535_p1);

assign select_ln674_10_fu_362_p3 = ((icmp_ln674_2_fu_304_p2[0:0] === 1'b1) ? sub_ln674_12_fu_334_p2 : trunc_ln674_3_fu_310_p1);

assign select_ln674_6_fu_450_p3 = ((icmp_ln674_fu_404_p2[0:0] === 1'b1) ? tmp_24_fu_414_p4 : p_Val2_s_fu_90);

assign select_ln674_7_fu_458_p3 = ((icmp_ln674_fu_404_p2[0:0] === 1'b1) ? sub_ln674_fu_430_p2 : trunc_ln674_fu_410_p1);

assign select_ln674_8_fu_346_p3 = ((icmp_ln674_2_fu_304_p2[0:0] === 1'b1) ? sub_ln674_11_fu_328_p2 : sub_ln674_13_fu_340_p2);

assign select_ln674_9_fu_354_p3 = ((icmp_ln674_2_fu_304_p2[0:0] === 1'b1) ? tmp_26_fu_318_p4 : p_Val2_s_fu_90);

assign select_ln674_fu_442_p3 = ((icmp_ln674_fu_404_p2[0:0] === 1'b1) ? add_ln674_fu_424_p2 : sub_ln674_8_fu_436_p2);

assign sext_ln1045_fu_237_p1 = $signed(ptr_width_minus_fu_230_p3);

assign sext_ln1054_fu_488_p1 = add_ln1054_fu_482_p2;

assign shl_ln414_2_fu_666_p2 = 32'd4294967295 << zext_ln414_5_fu_644_p1;

assign shl_ln414_fu_571_p2 = p_Result_30_fu_521_p2 << zext_ln414_4_fu_567_p1;

assign streamFlowin_mat_436_din = ap_phi_mux_empty_phi_fu_150_p4;

assign sub2_i_fu_184_p2 = (7'd32 - last_blk_width_cast_i_fu_172_p1);

assign sub_i_fu_179_p2 = ($signed(cols_bound_per_npc_3_reg_729) + $signed(32'd4294967295));

assign sub_ln1057_fu_299_p2 = (zext_ln1057_fu_295_p1 - rem_load_reg_770);

assign sub_ln414_3_fu_539_p2 = (6'd31 - trunc_ln414_fu_532_p1);

assign sub_ln414_4_fu_561_p2 = (6'd31 - select_ln414_fu_545_p3);

assign sub_ln414_fu_611_p2 = ($signed(6'd32) - $signed(trunc_ln1051_reg_815));

assign sub_ln674_10_fu_499_p2 = (trunc_ln1054_1_fu_496_p1 - trunc_ln1054_fu_492_p1);

assign sub_ln674_11_fu_328_p2 = (trunc_ln674_3_fu_310_p1 - trunc_ln674_4_fu_314_p1);

assign sub_ln674_12_fu_334_p2 = (6'd31 - trunc_ln674_3_fu_310_p1);

assign sub_ln674_13_fu_340_p2 = (trunc_ln674_4_fu_314_p1 - trunc_ln674_3_fu_310_p1);

assign sub_ln674_14_fu_370_p2 = (6'd31 - select_ln674_8_fu_346_p3);

assign sub_ln674_8_fu_436_p2 = (6'd31 - trunc_ln674_fu_410_p1);

assign sub_ln674_9_fu_466_p2 = (6'd31 - select_ln674_fu_442_p3);

assign sub_ln674_fu_430_p2 = (6'd31 - trunc_ln674_fu_410_p1);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_90) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_24_fu_414_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_24_fu_414_p4[ap_tvar_int_0] = p_Val2_s_fu_90[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_reg_851) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_25_fu_651_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_25_fu_651_p4[ap_tvar_int_1] = shl_ln414_reg_851[31 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_90) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_26_fu_318_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_26_fu_318_p4[ap_tvar_int_2] = p_Val2_s_fu_90[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_394_p4 = {{grp_fu_157_p2[31:5]}};

assign trunc_ln1051_fu_391_p1 = rem_load_reg_770[5:0];

assign trunc_ln1054_1_fu_496_p1 = rem_load_reg_770[5:0];

assign trunc_ln1054_fu_492_p1 = add_ln1054_fu_482_p2[5:0];

assign trunc_ln414_2_fu_535_p1 = add_ln1054_fu_482_p2[5:0];

assign trunc_ln414_fu_532_p1 = rem_load_reg_770[5:0];

assign trunc_ln674_3_fu_310_p1 = grp_fu_157_p2[5:0];

assign trunc_ln674_4_fu_314_p1 = sub_ln1057_fu_299_p2[5:0];

assign trunc_ln674_fu_410_p1 = grp_fu_157_p2[5:0];

assign xf_bits_per_clock_fu_219_p3 = ((bLast_fu_214_p2[0:0] === 1'b1) ? last_blk_width_2_reg_735 : 6'd32);

assign xor_ln414_fu_684_p2 = (32'd4294967295 ^ and_ln414_fu_678_p2);

assign zext_ln1027_fu_196_p1 = i_reg_136;

assign zext_ln1044_1_fu_283_p1 = xf_bits_per_clock_reg_786;

assign zext_ln1044_fu_226_p1 = xf_bits_per_clock_fu_219_p3;

assign zext_ln1057_fu_295_p1 = select_ln1057_fu_289_p3;

assign zext_ln414_4_fu_567_p1 = select_ln414_5_fu_553_p3;

assign zext_ln414_5_fu_644_p1 = select_ln414_4_fu_639_p3;

assign zext_ln414_6_fu_648_p1 = sub_ln414_4_reg_846;

assign zext_ln414_fu_616_p1 = sub_ln414_fu_611_p2;

assign zext_ln674_5_fu_597_p1 = sub_ln674_9_reg_820;

assign zext_ln674_6_fu_511_p1 = add_ln674_2_fu_505_p2;

assign zext_ln674_7_fu_376_p1 = select_ln674_10_fu_362_p3;

assign zext_ln674_8_fu_582_p1 = sub_ln674_14_reg_800;

assign zext_ln674_fu_472_p1 = select_ln674_7_fu_458_p3;

endmodule //pyr_dense_optical_flow_accel_AxiStream2MatStream
