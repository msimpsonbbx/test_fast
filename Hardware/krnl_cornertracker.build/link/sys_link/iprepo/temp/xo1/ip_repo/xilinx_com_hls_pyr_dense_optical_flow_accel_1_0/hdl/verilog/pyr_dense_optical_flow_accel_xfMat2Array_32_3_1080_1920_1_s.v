// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_xfMat2Array_32_3_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        streamFlowout_mat_437_dout,
        streamFlowout_mat_437_empty_n,
        streamFlowout_mat_437_read,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        srcMat_1_dout,
        srcMat_1_empty_n,
        srcMat_1_read,
        srcMat_2_dout,
        srcMat_2_empty_n,
        srcMat_2_read,
        dstPtr_dout,
        dstPtr_empty_n,
        dstPtr_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] streamFlowout_mat_437_dout;
input   streamFlowout_mat_437_empty_n;
output   streamFlowout_mat_437_read;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [31:0] m_axi_gmem4_WDATA;
output  [3:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [31:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
input  [31:0] srcMat_1_dout;
input   srcMat_1_empty_n;
output   srcMat_1_read;
input  [31:0] srcMat_2_dout;
input   srcMat_2_empty_n;
output   srcMat_2_read;
input  [63:0] dstPtr_dout;
input   dstPtr_empty_n;
output   dstPtr_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg streamFlowout_mat_437_read;
reg m_axi_gmem4_AWVALID;
reg m_axi_gmem4_WVALID;
reg m_axi_gmem4_BREADY;
reg srcMat_1_read;
reg srcMat_2_read;
reg dstPtr_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcMat_1_blk_n;
reg    srcMat_2_blk_n;
reg    dstPtr_blk_n;
reg   [63:0] dstPtr_read_reg_70;
reg    ap_block_state1;
reg   [31:0] srcMat_1_read_reg_75;
reg   [31:0] srcMat_2_read_reg_80;
wire    grp_Mat2Axi_fu_56_streamFlowout_mat_437_read;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_AWVALID;
wire   [63:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWADDR;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWID;
wire   [31:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWLEN;
wire   [2:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWSIZE;
wire   [1:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWBURST;
wire   [1:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWLOCK;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWCACHE;
wire   [2:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWPROT;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWQOS;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWREGION;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_AWUSER;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_WVALID;
wire   [31:0] grp_Mat2Axi_fu_56_m_axi_gmem4_WDATA;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_WSTRB;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_WLAST;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_WID;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_WUSER;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_ARVALID;
wire   [63:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARADDR;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARID;
wire   [31:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARLEN;
wire   [2:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARSIZE;
wire   [1:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARBURST;
wire   [1:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARLOCK;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARCACHE;
wire   [2:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARPROT;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARQOS;
wire   [3:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARREGION;
wire   [0:0] grp_Mat2Axi_fu_56_m_axi_gmem4_ARUSER;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_RREADY;
wire    grp_Mat2Axi_fu_56_m_axi_gmem4_BREADY;
wire    grp_Mat2Axi_fu_56_ap_start;
wire    grp_Mat2Axi_fu_56_ap_done;
wire    grp_Mat2Axi_fu_56_ap_ready;
wire    grp_Mat2Axi_fu_56_ap_idle;
reg    grp_Mat2Axi_fu_56_ap_continue;
reg    grp_Mat2Axi_fu_56_ap_start_reg;
reg    ap_block_state1_ignore_call10;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_Mat2Axi_fu_56_ap_ready;
wire    ap_sync_grp_Mat2Axi_fu_56_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready;
reg    ap_sync_reg_grp_Mat2Axi_fu_56_ap_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_Mat2Axi_fu_56_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready = 1'b0;
#0 ap_sync_reg_grp_Mat2Axi_fu_56_ap_done = 1'b0;
end

pyr_dense_optical_flow_accel_Mat2Axi grp_Mat2Axi_fu_56(
    .streamFlowout_mat_437_dout(streamFlowout_mat_437_dout),
    .streamFlowout_mat_437_empty_n(streamFlowout_mat_437_empty_n),
    .streamFlowout_mat_437_read(grp_Mat2Axi_fu_56_streamFlowout_mat_437_read),
    .m_axi_gmem4_AWVALID(grp_Mat2Axi_fu_56_m_axi_gmem4_AWVALID),
    .m_axi_gmem4_AWREADY(m_axi_gmem4_AWREADY),
    .m_axi_gmem4_AWADDR(grp_Mat2Axi_fu_56_m_axi_gmem4_AWADDR),
    .m_axi_gmem4_AWID(grp_Mat2Axi_fu_56_m_axi_gmem4_AWID),
    .m_axi_gmem4_AWLEN(grp_Mat2Axi_fu_56_m_axi_gmem4_AWLEN),
    .m_axi_gmem4_AWSIZE(grp_Mat2Axi_fu_56_m_axi_gmem4_AWSIZE),
    .m_axi_gmem4_AWBURST(grp_Mat2Axi_fu_56_m_axi_gmem4_AWBURST),
    .m_axi_gmem4_AWLOCK(grp_Mat2Axi_fu_56_m_axi_gmem4_AWLOCK),
    .m_axi_gmem4_AWCACHE(grp_Mat2Axi_fu_56_m_axi_gmem4_AWCACHE),
    .m_axi_gmem4_AWPROT(grp_Mat2Axi_fu_56_m_axi_gmem4_AWPROT),
    .m_axi_gmem4_AWQOS(grp_Mat2Axi_fu_56_m_axi_gmem4_AWQOS),
    .m_axi_gmem4_AWREGION(grp_Mat2Axi_fu_56_m_axi_gmem4_AWREGION),
    .m_axi_gmem4_AWUSER(grp_Mat2Axi_fu_56_m_axi_gmem4_AWUSER),
    .m_axi_gmem4_WVALID(grp_Mat2Axi_fu_56_m_axi_gmem4_WVALID),
    .m_axi_gmem4_WREADY(m_axi_gmem4_WREADY),
    .m_axi_gmem4_WDATA(grp_Mat2Axi_fu_56_m_axi_gmem4_WDATA),
    .m_axi_gmem4_WSTRB(grp_Mat2Axi_fu_56_m_axi_gmem4_WSTRB),
    .m_axi_gmem4_WLAST(grp_Mat2Axi_fu_56_m_axi_gmem4_WLAST),
    .m_axi_gmem4_WID(grp_Mat2Axi_fu_56_m_axi_gmem4_WID),
    .m_axi_gmem4_WUSER(grp_Mat2Axi_fu_56_m_axi_gmem4_WUSER),
    .m_axi_gmem4_ARVALID(grp_Mat2Axi_fu_56_m_axi_gmem4_ARVALID),
    .m_axi_gmem4_ARREADY(1'b0),
    .m_axi_gmem4_ARADDR(grp_Mat2Axi_fu_56_m_axi_gmem4_ARADDR),
    .m_axi_gmem4_ARID(grp_Mat2Axi_fu_56_m_axi_gmem4_ARID),
    .m_axi_gmem4_ARLEN(grp_Mat2Axi_fu_56_m_axi_gmem4_ARLEN),
    .m_axi_gmem4_ARSIZE(grp_Mat2Axi_fu_56_m_axi_gmem4_ARSIZE),
    .m_axi_gmem4_ARBURST(grp_Mat2Axi_fu_56_m_axi_gmem4_ARBURST),
    .m_axi_gmem4_ARLOCK(grp_Mat2Axi_fu_56_m_axi_gmem4_ARLOCK),
    .m_axi_gmem4_ARCACHE(grp_Mat2Axi_fu_56_m_axi_gmem4_ARCACHE),
    .m_axi_gmem4_ARPROT(grp_Mat2Axi_fu_56_m_axi_gmem4_ARPROT),
    .m_axi_gmem4_ARQOS(grp_Mat2Axi_fu_56_m_axi_gmem4_ARQOS),
    .m_axi_gmem4_ARREGION(grp_Mat2Axi_fu_56_m_axi_gmem4_ARREGION),
    .m_axi_gmem4_ARUSER(grp_Mat2Axi_fu_56_m_axi_gmem4_ARUSER),
    .m_axi_gmem4_RVALID(1'b0),
    .m_axi_gmem4_RREADY(grp_Mat2Axi_fu_56_m_axi_gmem4_RREADY),
    .m_axi_gmem4_RDATA(32'd0),
    .m_axi_gmem4_RLAST(1'b0),
    .m_axi_gmem4_RID(1'd0),
    .m_axi_gmem4_RUSER(1'd0),
    .m_axi_gmem4_RRESP(2'd0),
    .m_axi_gmem4_BVALID(m_axi_gmem4_BVALID),
    .m_axi_gmem4_BREADY(grp_Mat2Axi_fu_56_m_axi_gmem4_BREADY),
    .m_axi_gmem4_BRESP(m_axi_gmem4_BRESP),
    .m_axi_gmem4_BID(m_axi_gmem4_BID),
    .m_axi_gmem4_BUSER(m_axi_gmem4_BUSER),
    .dout(dstPtr_read_reg_70),
    .rows(srcMat_1_read_reg_75),
    .cols(srcMat_2_read_reg_80),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .dout_ap_vld(1'b1),
    .rows_ap_vld(1'b1),
    .cols_ap_vld(1'b1),
    .ap_start(grp_Mat2Axi_fu_56_ap_start),
    .ap_done(grp_Mat2Axi_fu_56_ap_done),
    .ap_ready(grp_Mat2Axi_fu_56_ap_ready),
    .ap_idle(grp_Mat2Axi_fu_56_ap_idle),
    .ap_continue(grp_Mat2Axi_fu_56_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_Mat2Axi_fu_56_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_Mat2Axi_fu_56_ap_done <= 1'b0;
        end else if ((grp_Mat2Axi_fu_56_ap_done == 1'b1)) begin
            ap_sync_reg_grp_Mat2Axi_fu_56_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready <= 1'b0;
        end else if ((grp_Mat2Axi_fu_56_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Mat2Axi_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (ap_sync_grp_Mat2Axi_fu_56_ap_ready == 1'b0)) | (~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_Mat2Axi_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2Axi_fu_56_ap_ready == 1'b1)) begin
            grp_Mat2Axi_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstPtr_read_reg_70 <= dstPtr_dout;
        srcMat_1_read_reg_75 <= srcMat_1_dout;
        srcMat_2_read_reg_80 <= srcMat_2_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstPtr_blk_n = dstPtr_empty_n;
    end else begin
        dstPtr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstPtr_read = 1'b1;
    end else begin
        dstPtr_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        grp_Mat2Axi_fu_56_ap_continue = 1'b1;
    end else begin
        grp_Mat2Axi_fu_56_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem4_AWVALID = grp_Mat2Axi_fu_56_m_axi_gmem4_AWVALID;
    end else begin
        m_axi_gmem4_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem4_BREADY = grp_Mat2Axi_fu_56_m_axi_gmem4_BREADY;
    end else begin
        m_axi_gmem4_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem4_WVALID = grp_Mat2Axi_fu_56_m_axi_gmem4_WVALID;
    end else begin
        m_axi_gmem4_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_1_blk_n = srcMat_1_empty_n;
    end else begin
        srcMat_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_1_read = 1'b1;
    end else begin
        srcMat_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_2_blk_n = srcMat_2_empty_n;
    end else begin
        srcMat_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_2_read = 1'b1;
    end else begin
        srcMat_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        streamFlowout_mat_437_read = grp_Mat2Axi_fu_56_streamFlowout_mat_437_read;
    end else begin
        streamFlowout_mat_437_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call10 = ((dstPtr_empty_n == 1'b0) | (srcMat_2_empty_n == 1'b0) | (srcMat_1_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_Mat2Axi_fu_56_ap_ready & ap_sync_grp_Mat2Axi_fu_56_ap_done) == 1'b0);
end

assign ap_sync_grp_Mat2Axi_fu_56_ap_done = (grp_Mat2Axi_fu_56_ap_done | ap_sync_reg_grp_Mat2Axi_fu_56_ap_done);

assign ap_sync_grp_Mat2Axi_fu_56_ap_ready = (grp_Mat2Axi_fu_56_ap_ready | ap_sync_reg_grp_Mat2Axi_fu_56_ap_ready);

assign grp_Mat2Axi_fu_56_ap_start = grp_Mat2Axi_fu_56_ap_start_reg;

assign m_axi_gmem4_ARADDR = 64'd0;

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLEN = 32'd0;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_ARVALID = 1'b0;

assign m_axi_gmem4_AWADDR = grp_Mat2Axi_fu_56_m_axi_gmem4_AWADDR;

assign m_axi_gmem4_AWBURST = grp_Mat2Axi_fu_56_m_axi_gmem4_AWBURST;

assign m_axi_gmem4_AWCACHE = grp_Mat2Axi_fu_56_m_axi_gmem4_AWCACHE;

assign m_axi_gmem4_AWID = grp_Mat2Axi_fu_56_m_axi_gmem4_AWID;

assign m_axi_gmem4_AWLEN = grp_Mat2Axi_fu_56_m_axi_gmem4_AWLEN;

assign m_axi_gmem4_AWLOCK = grp_Mat2Axi_fu_56_m_axi_gmem4_AWLOCK;

assign m_axi_gmem4_AWPROT = grp_Mat2Axi_fu_56_m_axi_gmem4_AWPROT;

assign m_axi_gmem4_AWQOS = grp_Mat2Axi_fu_56_m_axi_gmem4_AWQOS;

assign m_axi_gmem4_AWREGION = grp_Mat2Axi_fu_56_m_axi_gmem4_AWREGION;

assign m_axi_gmem4_AWSIZE = grp_Mat2Axi_fu_56_m_axi_gmem4_AWSIZE;

assign m_axi_gmem4_AWUSER = grp_Mat2Axi_fu_56_m_axi_gmem4_AWUSER;

assign m_axi_gmem4_RREADY = 1'b0;

assign m_axi_gmem4_WDATA = grp_Mat2Axi_fu_56_m_axi_gmem4_WDATA;

assign m_axi_gmem4_WID = grp_Mat2Axi_fu_56_m_axi_gmem4_WID;

assign m_axi_gmem4_WLAST = grp_Mat2Axi_fu_56_m_axi_gmem4_WLAST;

assign m_axi_gmem4_WSTRB = grp_Mat2Axi_fu_56_m_axi_gmem4_WSTRB;

assign m_axi_gmem4_WUSER = grp_Mat2Axi_fu_56_m_axi_gmem4_WUSER;

endmodule //pyr_dense_optical_flow_accel_xfMat2Array_32_3_1080_1920_1_s
