// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_load_data_1920_16_10_45_22_17_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strmFlowU_split15_dout,
        strmFlowU_split15_empty_n,
        strmFlowU_split15_read,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        rows,
        cols,
        inCurrRow,
        scaleI,
        prevIceil_read_5,
        prevIceil_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] strmFlowU_split15_dout;
input   strmFlowU_split15_empty_n;
output   strmFlowU_split15_read;
output  [10:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [15:0] buf_r_d0;
input  [15:0] rows;
input  [15:0] cols;
input  [15:0] inCurrRow;
input  [16:0] scaleI;
input  [31:0] prevIceil_read_5;
input  [31:0] prevIceil_read;
output  [0:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strmFlowU_split15_read;
reg buf_r_ce0;
reg buf_r_we0;
reg[0:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strmFlowU_split15_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln44_reg_321;
reg   [15:0] i_reg_132;
wire   [0:0] icmp_ln41_1_fu_182_p2;
reg   [0:0] icmp_ln41_1_reg_292;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln41_fu_211_p1;
reg   [31:0] zext_ln41_reg_307;
wire   [0:0] and_ln41_fu_242_p2;
reg   [0:0] and_ln41_reg_312;
wire   [63:0] zext_ln44_fu_248_p1;
reg   [63:0] zext_ln44_reg_316;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln44_fu_252_p2;
wire   [15:0] add_ln44_fu_257_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [0:0] ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4;
reg   [0:0] flagLoaded_write_assign_reg_143;
wire    ap_CS_fsm_state7;
reg   [31:0] ap_phi_mux_phi_ln58_phi_fu_158_p4;
reg   [31:0] phi_ln58_reg_155;
wire   [14:0] tmp_fu_172_p4;
wire   [32:0] grp_fu_275_p2;
wire   [16:0] iSmallFloor_fu_192_p4;
wire   [17:0] zext_ln36_fu_201_p1;
wire   [17:0] add_ln41_fu_205_p2;
wire   [0:0] icmp_ln41_fu_215_p2;
wire   [16:0] rows_cast3_fu_188_p1;
wire   [16:0] add_ln41_1_fu_226_p2;
wire  signed [17:0] sext_ln41_fu_232_p1;
wire   [0:0] or_ln41_fu_221_p2;
wire   [0:0] icmp_ln41_2_fu_236_p2;
wire   [16:0] grp_fu_275_p0;
wire   [15:0] grp_fu_275_p1;
reg   [0:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [32:0] grp_fu_275_p00;
wire   [32:0] grp_fu_275_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 32'd0;
end

pyr_dense_optical_flow_accel_mul_mul_17ns_16ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
mul_mul_17ns_16ns_33_4_1_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_275_p0),
    .din1(grp_fu_275_p1),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln41_fu_242_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln41_fu_242_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_0_preg <= ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_1_preg <= ap_phi_mux_phi_ln58_phi_fu_158_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln41_reg_312))) begin
        flagLoaded_write_assign_reg_143 <= 1'd1;
    end else if (((1'd0 == and_ln41_fu_242_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        flagLoaded_write_assign_reg_143 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln41_fu_242_p2))) begin
        i_reg_132 <= 16'd0;
    end else if (((icmp_ln44_fu_252_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_132 <= add_ln44_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln41_reg_312))) begin
        phi_ln58_reg_155 <= zext_ln41_reg_307;
    end else if (((1'd0 == and_ln41_fu_242_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln58_reg_155 <= prevIceil_read_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln41_reg_312 <= and_ln41_fu_242_p2;
        zext_ln41_reg_307[17 : 0] <= zext_ln41_fu_211_p1[17 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln41_1_reg_292 <= icmp_ln41_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln44_reg_321 <= icmp_ln44_fu_252_p2;
        zext_ln44_reg_316[15 : 0] <= zext_ln44_fu_248_p1[15 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln44_fu_252_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln41_reg_312))) begin
        ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4 = 1'd1;
    end else begin
        ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4 = flagLoaded_write_assign_reg_143;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == and_ln41_reg_312))) begin
        ap_phi_mux_phi_ln58_phi_fu_158_p4 = zext_ln41_reg_307;
    end else begin
        ap_phi_mux_phi_ln58_phi_fu_158_p4 = phi_ln58_reg_155;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_0 = ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_1 = ap_phi_mux_phi_ln58_phi_fu_158_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmFlowU_split15_blk_n = strmFlowU_split15_empty_n;
    end else begin
        strmFlowU_split15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln44_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmFlowU_split15_read = 1'b1;
    end else begin
        strmFlowU_split15_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln41_fu_242_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln44_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln44_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_1_fu_226_p2 = ($signed(rows_cast3_fu_188_p1) + $signed(17'd131071));

assign add_ln41_fu_205_p2 = (zext_ln36_fu_201_p1 + 18'd1);

assign add_ln44_fu_257_p2 = (i_reg_132 + 16'd1);

assign and_ln41_fu_242_p2 = (or_ln41_fu_221_p2 & icmp_ln41_2_fu_236_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln44_reg_321 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (strmFlowU_split15_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln44_reg_321 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (strmFlowU_split15_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln44_reg_321 == 1'd0) & (strmFlowU_split15_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_r_address0 = zext_ln44_reg_316;

assign buf_r_d0 = strmFlowU_split15_dout;

assign grp_fu_275_p0 = grp_fu_275_p00;

assign grp_fu_275_p00 = scaleI;

assign grp_fu_275_p1 = grp_fu_275_p10;

assign grp_fu_275_p10 = inCurrRow;

assign iSmallFloor_fu_192_p4 = {{grp_fu_275_p2[32:16]}};

assign icmp_ln41_1_fu_182_p2 = ((tmp_fu_172_p4 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_236_p2 = (($signed(zext_ln36_fu_201_p1) < $signed(sext_ln41_fu_232_p1)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_215_p2 = (($signed(zext_ln41_fu_211_p1) > $signed(prevIceil_read)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_252_p2 = ((i_reg_132 == cols) ? 1'b1 : 1'b0);

assign or_ln41_fu_221_p2 = (icmp_ln41_fu_215_p2 | icmp_ln41_1_reg_292);

assign rows_cast3_fu_188_p1 = rows;

assign sext_ln41_fu_232_p1 = $signed(add_ln41_1_fu_226_p2);

assign tmp_fu_172_p4 = {{inCurrRow[15:1]}};

assign zext_ln36_fu_201_p1 = iSmallFloor_fu_192_p4;

assign zext_ln41_fu_211_p1 = add_ln41_fu_205_p2;

assign zext_ln44_fu_248_p1 = i_reg_132;

always @ (posedge ap_clk) begin
    zext_ln41_reg_307[31:18] <= 14'b00000000000000;
    zext_ln44_reg_316[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //pyr_dense_optical_flow_accel_load_data_1920_16_10_45_22_17_1_s
