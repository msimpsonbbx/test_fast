// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_down_accel_xFPyrDownGaussianBlur_1080_1920_0_1_1_0_5_25_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_filter_in1_dout,
        p_filter_in1_empty_n,
        p_filter_in1_read,
        p_filter_out2_din,
        p_filter_out2_full_n,
        p_filter_out2_write,
        imgheight_dout,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_empty_n,
        imgwidth_read,
        imgheight_out_din,
        imgheight_out_full_n,
        imgheight_out_write,
        imgwidth_out_din,
        imgwidth_out_full_n,
        imgwidth_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] p_filter_in1_dout;
input   p_filter_in1_empty_n;
output   p_filter_in1_read;
output  [7:0] p_filter_out2_din;
input   p_filter_out2_full_n;
output   p_filter_out2_write;
input  [15:0] imgheight_dout;
input   imgheight_empty_n;
output   imgheight_read;
input  [15:0] imgwidth_dout;
input   imgwidth_empty_n;
output   imgwidth_read;
output  [15:0] imgheight_out_din;
input   imgheight_out_full_n;
output   imgheight_out_write;
output  [15:0] imgwidth_out_din;
input   imgwidth_out_full_n;
output   imgwidth_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_filter_in1_read;
reg p_filter_out2_write;
reg imgheight_read;
reg imgwidth_read;
reg imgheight_out_write;
reg imgwidth_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg    imgheight_out_blk_n;
reg    imgwidth_out_blk_n;
reg   [15:0] imgheight_read_reg_76;
reg    ap_block_state1;
reg   [15:0] imgwidth_read_reg_81;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_idle;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_ready;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_in1_read;
wire   [7:0] grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_din;
wire    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_write;
reg    grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg;
reg    ap_block_state1_ignore_call12;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg = 1'b0;
end

pyr_down_accel_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start),
    .ap_done(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done),
    .ap_idle(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_idle),
    .ap_ready(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_ready),
    .p_filter_in1_dout(p_filter_in1_dout),
    .p_filter_in1_empty_n(p_filter_in1_empty_n),
    .p_filter_in1_read(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_in1_read),
    .p_filter_out2_din(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_din),
    .p_filter_out2_full_n(p_filter_out2_full_n),
    .p_filter_out2_write(grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_write),
    .img_height(imgheight_read_reg_76),
    .img_width(imgwidth_read_reg_81)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_ready == 1'b1)) begin
            grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read_reg_76 <= imgheight_dout;
        imgwidth_read_reg_81 <= imgwidth_dout;
    end
end

always @ (*) begin
    if (((grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_out_blk_n = imgheight_out_full_n;
    end else begin
        imgheight_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_out_write = 1'b1;
    end else begin
        imgheight_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_out_blk_n = imgwidth_out_full_n;
    end else begin
        imgwidth_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_out_write = 1'b1;
    end else begin
        imgwidth_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_filter_in1_read = grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_in1_read;
    end else begin
        p_filter_in1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_filter_out2_write = grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_write;
    end else begin
        p_filter_out2_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start = grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_ap_start_reg;

assign imgheight_out_din = imgheight_dout;

assign imgwidth_out_din = imgwidth_dout;

assign p_filter_out2_din = grp_xf_pyrdown_gaussian_nxn_1080_1920_0_1_1_1922_5_25_1_s_fu_64_p_filter_out2_din;

assign start_out = real_start;

endmodule //pyr_down_accel_xFPyrDownGaussianBlur_1080_1920_0_1_1_0_5_25_1_s
