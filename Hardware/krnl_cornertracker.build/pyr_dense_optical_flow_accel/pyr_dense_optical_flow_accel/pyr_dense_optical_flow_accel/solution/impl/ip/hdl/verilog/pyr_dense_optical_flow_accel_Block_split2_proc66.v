// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_Block_split2_proc66 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cur_img_rows,
        cur_img_cols,
        next_img_rows,
        next_img_cols,
        flow_rows,
        flow_cols,
        flow_iter_rows,
        flow_iter_cols,
        p_current_img,
        p_next_image,
        p_streamFlowin,
        p_streamFlowout,
        level,
        scale_up_flag,
        scale_in,
        init_flag,
        current_img_mat_rows_out_din,
        current_img_mat_rows_out_full_n,
        current_img_mat_rows_out_write,
        current_img_mat_cols_out_din,
        current_img_mat_cols_out_full_n,
        current_img_mat_cols_out_write,
        streamFlowin_mat_rows_out_din,
        streamFlowin_mat_rows_out_full_n,
        streamFlowin_mat_rows_out_write,
        streamFlowin_mat_rows_out1_din,
        streamFlowin_mat_rows_out1_full_n,
        streamFlowin_mat_rows_out1_write,
        streamFlowin_mat_cols_out_din,
        streamFlowin_mat_cols_out_full_n,
        streamFlowin_mat_cols_out_write,
        streamFlowin_mat_cols_out2_din,
        streamFlowin_mat_cols_out2_full_n,
        streamFlowin_mat_cols_out2_write,
        streamFlowout_mat_rows_out_din,
        streamFlowout_mat_rows_out_full_n,
        streamFlowout_mat_rows_out_write,
        streamFlowout_mat_cols_out_din,
        streamFlowout_mat_cols_out_full_n,
        streamFlowout_mat_cols_out_write,
        p_current_img_out_din,
        p_current_img_out_full_n,
        p_current_img_out_write,
        p_next_image_out_din,
        p_next_image_out_full_n,
        p_next_image_out_write,
        p_streamFlowin_out_din,
        p_streamFlowin_out_full_n,
        p_streamFlowin_out_write,
        p_streamFlowout_out_din,
        p_streamFlowout_out_full_n,
        p_streamFlowout_out_write,
        level_out_din,
        level_out_full_n,
        level_out_write,
        scale_up_flag_out_din,
        scale_up_flag_out_full_n,
        scale_up_flag_out_write,
        scale_in_out_din,
        scale_in_out_full_n,
        scale_in_out_write,
        init_flag_out_din,
        init_flag_out_full_n,
        init_flag_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cur_img_rows;
input  [31:0] cur_img_cols;
input  [31:0] next_img_rows;
input  [31:0] next_img_cols;
input  [31:0] flow_rows;
input  [31:0] flow_cols;
input  [31:0] flow_iter_rows;
input  [31:0] flow_iter_cols;
input  [63:0] p_current_img;
input  [63:0] p_next_image;
input  [63:0] p_streamFlowin;
input  [63:0] p_streamFlowout;
input  [31:0] level;
input  [31:0] scale_up_flag;
input  [31:0] scale_in;
input  [31:0] init_flag;
output  [31:0] current_img_mat_rows_out_din;
input   current_img_mat_rows_out_full_n;
output   current_img_mat_rows_out_write;
output  [31:0] current_img_mat_cols_out_din;
input   current_img_mat_cols_out_full_n;
output   current_img_mat_cols_out_write;
output  [31:0] streamFlowin_mat_rows_out_din;
input   streamFlowin_mat_rows_out_full_n;
output   streamFlowin_mat_rows_out_write;
output  [31:0] streamFlowin_mat_rows_out1_din;
input   streamFlowin_mat_rows_out1_full_n;
output   streamFlowin_mat_rows_out1_write;
output  [31:0] streamFlowin_mat_cols_out_din;
input   streamFlowin_mat_cols_out_full_n;
output   streamFlowin_mat_cols_out_write;
output  [31:0] streamFlowin_mat_cols_out2_din;
input   streamFlowin_mat_cols_out2_full_n;
output   streamFlowin_mat_cols_out2_write;
output  [31:0] streamFlowout_mat_rows_out_din;
input   streamFlowout_mat_rows_out_full_n;
output   streamFlowout_mat_rows_out_write;
output  [31:0] streamFlowout_mat_cols_out_din;
input   streamFlowout_mat_cols_out_full_n;
output   streamFlowout_mat_cols_out_write;
output  [63:0] p_current_img_out_din;
input   p_current_img_out_full_n;
output   p_current_img_out_write;
output  [63:0] p_next_image_out_din;
input   p_next_image_out_full_n;
output   p_next_image_out_write;
output  [63:0] p_streamFlowin_out_din;
input   p_streamFlowin_out_full_n;
output   p_streamFlowin_out_write;
output  [63:0] p_streamFlowout_out_din;
input   p_streamFlowout_out_full_n;
output   p_streamFlowout_out_write;
output  [31:0] level_out_din;
input   level_out_full_n;
output   level_out_write;
output  [31:0] scale_up_flag_out_din;
input   scale_up_flag_out_full_n;
output   scale_up_flag_out_write;
output  [31:0] scale_in_out_din;
input   scale_in_out_full_n;
output   scale_in_out_write;
output  [31:0] init_flag_out_din;
input   init_flag_out_full_n;
output   init_flag_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg start_write;
reg current_img_mat_rows_out_write;
reg current_img_mat_cols_out_write;
reg streamFlowin_mat_rows_out_write;
reg streamFlowin_mat_rows_out1_write;
reg streamFlowin_mat_cols_out_write;
reg streamFlowin_mat_cols_out2_write;
reg streamFlowout_mat_rows_out_write;
reg streamFlowout_mat_cols_out_write;
reg p_current_img_out_write;
reg p_next_image_out_write;
reg p_streamFlowin_out_write;
reg p_streamFlowout_out_write;
reg level_out_write;
reg scale_up_flag_out_write;
reg scale_in_out_write;
reg init_flag_out_write;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    current_img_mat_rows_out_blk_n;
reg    current_img_mat_cols_out_blk_n;
reg    streamFlowin_mat_rows_out_blk_n;
reg    streamFlowin_mat_rows_out1_blk_n;
reg    streamFlowin_mat_cols_out_blk_n;
reg    streamFlowin_mat_cols_out2_blk_n;
reg    streamFlowout_mat_rows_out_blk_n;
reg    streamFlowout_mat_cols_out_blk_n;
reg    p_current_img_out_blk_n;
reg    p_next_image_out_blk_n;
reg    p_streamFlowin_out_blk_n;
reg    p_streamFlowout_out_blk_n;
reg    level_out_blk_n;
reg    scale_up_flag_out_blk_n;
reg    scale_in_out_blk_n;
reg    init_flag_out_blk_n;
reg    ap_block_state1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= next_img_rows;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= next_img_cols;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = next_img_rows;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = next_img_cols;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        current_img_mat_cols_out_blk_n = current_img_mat_cols_out_full_n;
    end else begin
        current_img_mat_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        current_img_mat_cols_out_write = 1'b1;
    end else begin
        current_img_mat_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        current_img_mat_rows_out_blk_n = current_img_mat_rows_out_full_n;
    end else begin
        current_img_mat_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        current_img_mat_rows_out_write = 1'b1;
    end else begin
        current_img_mat_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        init_flag_out_blk_n = init_flag_out_full_n;
    end else begin
        init_flag_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        init_flag_out_write = 1'b1;
    end else begin
        init_flag_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        level_out_blk_n = level_out_full_n;
    end else begin
        level_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        level_out_write = 1'b1;
    end else begin
        level_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_current_img_out_blk_n = p_current_img_out_full_n;
    end else begin
        p_current_img_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_current_img_out_write = 1'b1;
    end else begin
        p_current_img_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_next_image_out_blk_n = p_next_image_out_full_n;
    end else begin
        p_next_image_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_next_image_out_write = 1'b1;
    end else begin
        p_next_image_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_streamFlowin_out_blk_n = p_streamFlowin_out_full_n;
    end else begin
        p_streamFlowin_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_streamFlowin_out_write = 1'b1;
    end else begin
        p_streamFlowin_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_streamFlowout_out_blk_n = p_streamFlowout_out_full_n;
    end else begin
        p_streamFlowout_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_streamFlowout_out_write = 1'b1;
    end else begin
        p_streamFlowout_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out_blk_n = scale_in_out_full_n;
    end else begin
        scale_in_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out_write = 1'b1;
    end else begin
        scale_in_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out_blk_n = scale_up_flag_out_full_n;
    end else begin
        scale_up_flag_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out_write = 1'b1;
    end else begin
        scale_up_flag_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_cols_out2_blk_n = streamFlowin_mat_cols_out2_full_n;
    end else begin
        streamFlowin_mat_cols_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_cols_out2_write = 1'b1;
    end else begin
        streamFlowin_mat_cols_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_cols_out_blk_n = streamFlowin_mat_cols_out_full_n;
    end else begin
        streamFlowin_mat_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_cols_out_write = 1'b1;
    end else begin
        streamFlowin_mat_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_rows_out1_blk_n = streamFlowin_mat_rows_out1_full_n;
    end else begin
        streamFlowin_mat_rows_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_rows_out1_write = 1'b1;
    end else begin
        streamFlowin_mat_rows_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_rows_out_blk_n = streamFlowin_mat_rows_out_full_n;
    end else begin
        streamFlowin_mat_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowin_mat_rows_out_write = 1'b1;
    end else begin
        streamFlowin_mat_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowout_mat_cols_out_blk_n = streamFlowout_mat_cols_out_full_n;
    end else begin
        streamFlowout_mat_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowout_mat_cols_out_write = 1'b1;
    end else begin
        streamFlowout_mat_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowout_mat_rows_out_blk_n = streamFlowout_mat_rows_out_full_n;
    end else begin
        streamFlowout_mat_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        streamFlowout_mat_rows_out_write = 1'b1;
    end else begin
        streamFlowout_mat_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((p_streamFlowout_out_full_n == 1'b0) | (p_streamFlowin_out_full_n == 1'b0) | (p_next_image_out_full_n == 1'b0) | (p_current_img_out_full_n == 1'b0) | (streamFlowout_mat_cols_out_full_n == 1'b0) | (real_start == 1'b0) | (streamFlowout_mat_rows_out_full_n == 1'b0) | (streamFlowin_mat_cols_out2_full_n == 1'b0) | (streamFlowin_mat_cols_out_full_n == 1'b0) | (streamFlowin_mat_rows_out1_full_n == 1'b0) | (streamFlowin_mat_rows_out_full_n == 1'b0) | (current_img_mat_cols_out_full_n == 1'b0) | (current_img_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign current_img_mat_cols_out_din = cur_img_cols;

assign current_img_mat_rows_out_din = cur_img_rows;

assign init_flag_out_din = init_flag;

assign level_out_din = level;

assign p_current_img_out_din = p_current_img;

assign p_next_image_out_din = p_next_image;

assign p_streamFlowin_out_din = p_streamFlowin;

assign p_streamFlowout_out_din = p_streamFlowout;

assign scale_in_out_din = scale_in;

assign scale_up_flag_out_din = scale_up_flag;

assign start_out = real_start;

assign streamFlowin_mat_cols_out2_din = flow_cols;

assign streamFlowin_mat_cols_out_din = flow_cols;

assign streamFlowin_mat_rows_out1_din = flow_rows;

assign streamFlowin_mat_rows_out_din = flow_rows;

assign streamFlowout_mat_cols_out_din = flow_iter_cols;

assign streamFlowout_mat_rows_out_din = flow_iter_rows;

endmodule //pyr_dense_optical_flow_accel_Block_split2_proc66
