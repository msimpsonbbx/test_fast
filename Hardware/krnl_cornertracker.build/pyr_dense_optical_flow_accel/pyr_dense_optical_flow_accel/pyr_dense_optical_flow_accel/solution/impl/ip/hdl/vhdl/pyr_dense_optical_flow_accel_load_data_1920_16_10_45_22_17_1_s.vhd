-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_load_data_1920_16_10_45_22_17_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strmFlowU_split15_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    strmFlowU_split15_empty_n : IN STD_LOGIC;
    strmFlowU_split15_read : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    rows : IN STD_LOGIC_VECTOR (15 downto 0);
    cols : IN STD_LOGIC_VECTOR (15 downto 0);
    inCurrRow : IN STD_LOGIC_VECTOR (15 downto 0);
    scaleI : IN STD_LOGIC_VECTOR (16 downto 0);
    prevIceil_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    prevIceil_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pyr_dense_optical_flow_accel_load_data_1920_16_10_45_22_17_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strmFlowU_split15_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln44_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln41_1_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln41_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln41_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_316 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln44_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal flagLoaded_write_assign_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_phi_ln58_phi_fu_158_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln58_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_172_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal iSmallFloor_fu_192_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln36_fu_201_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln41_fu_205_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln41_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_cast3_fu_188_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_1_fu_226_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln41_fu_232_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln41_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_2_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_275_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_275_p10 : STD_LOGIC_VECTOR (32 downto 0);

    component pyr_dense_optical_flow_accel_mul_mul_17ns_16ns_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    mul_mul_17ns_16ns_33_4_1_U177 : component pyr_dense_optical_flow_accel_mul_mul_17ns_16ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln41_fu_242_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln41_fu_242_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= ap_phi_mux_phi_ln58_phi_fu_158_p4;
                end if; 
            end if;
        end if;
    end process;


    flagLoaded_write_assign_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln41_reg_312))) then 
                flagLoaded_write_assign_reg_143 <= ap_const_lv1_1;
            elsif (((ap_const_lv1_0 = and_ln41_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                flagLoaded_write_assign_reg_143 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln41_fu_242_p2))) then 
                i_reg_132 <= ap_const_lv16_0;
            elsif (((icmp_ln44_fu_252_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_132 <= add_ln44_fu_257_p2;
            end if; 
        end if;
    end process;

    phi_ln58_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln41_reg_312))) then 
                phi_ln58_reg_155 <= zext_ln41_reg_307;
            elsif (((ap_const_lv1_0 = and_ln41_fu_242_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln58_reg_155 <= prevIceil_read_5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln41_reg_312 <= and_ln41_fu_242_p2;
                    zext_ln41_reg_307(17 downto 0) <= zext_ln41_fu_211_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln41_1_reg_292 <= icmp_ln41_1_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln44_reg_321 <= icmp_ln44_fu_252_p2;
                    zext_ln44_reg_316(15 downto 0) <= zext_ln44_fu_248_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln41_reg_307(31 downto 18) <= "00000000000000";
    zext_ln44_reg_316(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, and_ln41_fu_242_p2, icmp_ln44_fu_252_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln41_fu_242_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln44_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln44_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln41_1_fu_226_p2 <= std_logic_vector(unsigned(rows_cast3_fu_188_p1) + unsigned(ap_const_lv17_1FFFF));
    add_ln41_fu_205_p2 <= std_logic_vector(unsigned(zext_ln36_fu_201_p1) + unsigned(ap_const_lv18_1));
    add_ln44_fu_257_p2 <= std_logic_vector(unsigned(i_reg_132) + unsigned(ap_const_lv16_1));
    and_ln41_fu_242_p2 <= (or_ln41_fu_221_p2 and icmp_ln41_2_fu_236_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(strmFlowU_split15_empty_n, ap_enable_reg_pp0_iter1, icmp_ln44_reg_321)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln44_reg_321 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (strmFlowU_split15_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(strmFlowU_split15_empty_n, ap_enable_reg_pp0_iter1, icmp_ln44_reg_321)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln44_reg_321 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (strmFlowU_split15_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(strmFlowU_split15_empty_n, icmp_ln44_reg_321)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln44_reg_321 = ap_const_lv1_0) and (strmFlowU_split15_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln44_fu_252_p2)
    begin
        if ((icmp_ln44_fu_252_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4_assign_proc : process(and_ln41_reg_312, flagLoaded_write_assign_reg_143, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln41_reg_312))) then 
            ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4 <= flagLoaded_write_assign_reg_143;
        end if; 
    end process;


    ap_phi_mux_phi_ln58_phi_fu_158_p4_assign_proc : process(zext_ln41_reg_307, and_ln41_reg_312, ap_CS_fsm_state7, phi_ln58_reg_155)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln41_reg_312))) then 
            ap_phi_mux_phi_ln58_phi_fu_158_p4 <= zext_ln41_reg_307;
        else 
            ap_phi_mux_phi_ln58_phi_fu_158_p4 <= phi_ln58_reg_155;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4, ap_CS_fsm_state7, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= ap_phi_mux_flagLoaded_write_assign_phi_fu_147_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, ap_phi_mux_phi_ln58_phi_fu_158_p4, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= ap_phi_mux_phi_ln58_phi_fu_158_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    buf_r_address0 <= zext_ln44_reg_316(11 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= strmFlowU_split15_dout;

    buf_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln44_reg_321, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_reg_321 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_we0 <= ap_const_logic_1;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p0 <= grp_fu_275_p00(17 - 1 downto 0);
    grp_fu_275_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scaleI),33));
    grp_fu_275_p1 <= grp_fu_275_p10(16 - 1 downto 0);
    grp_fu_275_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inCurrRow),33));
    iSmallFloor_fu_192_p4 <= grp_fu_275_p2(32 downto 16);
    icmp_ln41_1_fu_182_p2 <= "1" when (tmp_fu_172_p4 = ap_const_lv15_0) else "0";
    icmp_ln41_2_fu_236_p2 <= "1" when (signed(zext_ln36_fu_201_p1) < signed(sext_ln41_fu_232_p1)) else "0";
    icmp_ln41_fu_215_p2 <= "1" when (signed(zext_ln41_fu_211_p1) > signed(prevIceil_read)) else "0";
    icmp_ln44_fu_252_p2 <= "1" when (i_reg_132 = cols) else "0";
    or_ln41_fu_221_p2 <= (icmp_ln41_fu_215_p2 or icmp_ln41_1_reg_292);
    rows_cast3_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows),17));
        sext_ln41_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_1_fu_226_p2),18));


    strmFlowU_split15_blk_n_assign_proc : process(strmFlowU_split15_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln44_reg_321)
    begin
        if (((icmp_ln44_reg_321 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strmFlowU_split15_blk_n <= strmFlowU_split15_empty_n;
        else 
            strmFlowU_split15_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strmFlowU_split15_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln44_reg_321, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_reg_321 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strmFlowU_split15_read <= ap_const_logic_1;
        else 
            strmFlowU_split15_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_172_p4 <= inCurrRow(15 downto 1);
    zext_ln36_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iSmallFloor_fu_192_p4),18));
    zext_ln41_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_205_p2),32));
    zext_ln44_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_132),64));
end behav;
