-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_compute_result_16_10_45_22_48_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    fracI : IN STD_LOGIC_VECTOR (23 downto 0);
    fracJ : IN STD_LOGIC_VECTOR (23 downto 0);
    i0 : IN STD_LOGIC_VECTOR (15 downto 0);
    i1 : IN STD_LOGIC_VECTOR (15 downto 0);
    i2 : IN STD_LOGIC_VECTOR (15 downto 0);
    i3 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of pyr_dense_optical_flow_accel_compute_result_16_10_45_22_48_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_20000 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal i3_read_reg_282 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i3_read_reg_282_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal i2_read_reg_287 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_read_reg_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal i0_read_reg_297 : STD_LOGIC_VECTOR (15 downto 0);
    signal i0_read_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p3_V_reg_302 : STD_LOGIC_VECTOR (17 downto 0);
    signal p3_V_reg_302_pp0_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p2_V_reg_308 : STD_LOGIC_VECTOR (17 downto 0);
    signal p2_V_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p1_V_reg_314 : STD_LOGIC_VECTOR (17 downto 0);
    signal p1_V_reg_314_pp0_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_84_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_102_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_94_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_8_fu_112_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_128_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal fij_V_fu_134_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal ret_V_fu_154_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ret_V_5_fu_170_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1193_2_fu_204_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_fu_207_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1193_fu_213_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1193_fu_198_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1193_4_fu_217_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_6_fu_236_p2 : signal is "no";
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal grp_fu_262_ce : STD_LOGIC;
    signal grp_fu_273_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal fracI_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal fracJ_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal i0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal i2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal i3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (14 downto 0);

    component pyr_dense_optical_flow_accel_mul_36s_36s_71_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (70 downto 0) );
    end component;


    component pyr_dense_optical_flow_accel_mul_mul_18s_16s_32_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pyr_dense_optical_flow_accel_ama_submuladd_20s_18s_16s_32s_32_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pyr_dense_optical_flow_accel_mac_muladd_18s_16s_32s_32_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_36s_36s_71_1_0_U187 : component pyr_dense_optical_flow_accel_mul_36s_36s_71_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 36,
        dout_WIDTH => 71)
    port map (
        din0 => shl_ln_fu_94_p3,
        din1 => shl_ln728_8_fu_112_p3,
        dout => r_V_fu_128_p2);

    mul_mul_18s_16s_32_4_0_U188 : component pyr_dense_optical_flow_accel_mul_mul_18s_16s_32_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p1_V_reg_314,
        din1 => i1_read_reg_292,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);

    mul_mul_18s_16s_32_4_0_U189 : component pyr_dense_optical_flow_accel_mul_mul_18s_16s_32_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p2_V_reg_308,
        din1 => i2_read_reg_287,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    ama_submuladd_20s_18s_16s_32s_32_4_0_U190 : component pyr_dense_optical_flow_accel_ama_submuladd_20s_18s_16s_32s_32_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 18,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln1193_4_fu_217_p2,
        din1 => p2_V_reg_308_pp0_iter1_reg,
        din2 => i0_read_reg_297_pp0_iter1_reg,
        din3 => grp_fu_250_p2,
        ce => grp_fu_262_ce,
        dout => grp_fu_262_p4);

    mac_muladd_18s_16s_32s_32_4_0_U191 : component pyr_dense_optical_flow_accel_mac_muladd_18s_16s_32s_32_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p3_V_reg_302_pp0_iter1_reg,
        din1 => i3_read_reg_282_pp0_iter1_reg,
        din2 => grp_fu_256_p2,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= ret_V_6_fu_236_p2(31 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                fracI_int_reg <= fracI;
                fracJ_int_reg <= fracJ;
                i0_int_reg <= i0;
                i1_int_reg <= i1;
                i2_int_reg <= i2;
                i3_int_reg <= i3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                i0_read_reg_297 <= i0_int_reg;
                i0_read_reg_297_pp0_iter1_reg <= i0_read_reg_297;
                i1_read_reg_292 <= i1_int_reg;
                i2_read_reg_287 <= i2_int_reg;
                i3_read_reg_282 <= i3_int_reg;
                i3_read_reg_282_pp0_iter1_reg <= i3_read_reg_282;
                p1_V_reg_314 <= ret_V_5_fu_170_p2(35 downto 18);
                p1_V_reg_314_pp0_iter1_reg <= p1_V_reg_314;
                p2_V_reg_308 <= ret_V_fu_154_p2(35 downto 18);
                p2_V_reg_308_pp0_iter1_reg <= p2_V_reg_308;
                p3_V_reg_302 <= r_V_fu_128_p2(70 downto 53);
                p3_V_reg_302_pp0_iter1_reg <= p3_V_reg_302;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(ret_V_6_fu_236_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= ret_V_6_fu_236_p2(31 downto 17);
        end if; 
    end process;

    fij_V_fu_134_p4 <= r_V_fu_128_p2(70 downto 35);

    grp_fu_250_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_256_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_262_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_262_ce <= ap_const_logic_1;
        else 
            grp_fu_262_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_273_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_5_fu_170_p2 <= std_logic_vector(signed(shl_ln728_8_fu_112_p3) - signed(fij_V_fu_134_p4));
    ret_V_6_fu_236_p2 <= std_logic_vector(signed(grp_fu_273_p3) + signed(grp_fu_262_p4));
    ret_V_fu_154_p2 <= std_logic_vector(signed(shl_ln_fu_94_p3) - signed(fij_V_fu_134_p4));
        sext_ln1193_2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p3_V_reg_302_pp0_iter1_reg),19));

        sext_ln1193_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p1_V_reg_314_pp0_iter1_reg),20));

    shl_ln728_8_fu_112_p3 <= (tmp_s_fu_102_p4 & ap_const_lv18_0);
    shl_ln_fu_94_p3 <= (tmp_fu_84_p4 & ap_const_lv18_0);
    sub_ln1193_4_fu_217_p2 <= std_logic_vector(unsigned(zext_ln1193_fu_213_p1) - unsigned(sext_ln1193_fu_198_p1));
    sub_ln1193_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(sext_ln1193_2_fu_204_p1));
    tmp_fu_84_p4 <= fracI_int_reg(23 downto 6);
    tmp_s_fu_102_p4 <= fracJ_int_reg(23 downto 6);
    zext_ln1193_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1193_fu_207_p2),20));
end behav;
