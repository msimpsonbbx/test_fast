// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_split_stream_int_fixed_unsigned_short_1080_unsigned_short_1920_16_10_48 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        streamFlowin_mat_436_dout,
        streamFlowin_mat_436_empty_n,
        streamFlowin_mat_436_read,
        strmFlowU_split15_din,
        strmFlowU_split15_full_n,
        strmFlowU_split15_write,
        strmFlowV_split16_din,
        strmFlowV_split16_full_n,
        strmFlowV_split16_write,
        rows,
        cols,
        rows1,
        cols2,
        level,
        scale_up_flag,
        scale_in,
        init_flag,
        rows_out_din,
        rows_out_full_n,
        rows_out_write,
        rows_out1_din,
        rows_out1_full_n,
        rows_out1_write,
        cols_out_din,
        cols_out_full_n,
        cols_out_write,
        cols_out2_din,
        cols_out2_full_n,
        cols_out2_write,
        rows1_out_din,
        rows1_out_full_n,
        rows1_out_write,
        rows1_out3_din,
        rows1_out3_full_n,
        rows1_out3_write,
        cols2_out_din,
        cols2_out_full_n,
        cols2_out_write,
        cols2_out4_din,
        cols2_out4_full_n,
        cols2_out4_write,
        level_out_din,
        level_out_full_n,
        level_out_write,
        scale_up_flag_out_din,
        scale_up_flag_out_full_n,
        scale_up_flag_out_write,
        scale_up_flag_out5_din,
        scale_up_flag_out5_full_n,
        scale_up_flag_out5_write,
        scale_in_out_din,
        scale_in_out_full_n,
        scale_in_out_write,
        scale_in_out6_din,
        scale_in_out6_full_n,
        scale_in_out6_write,
        init_flag_out_din,
        init_flag_out_full_n,
        init_flag_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] streamFlowin_mat_436_dout;
input   streamFlowin_mat_436_empty_n;
output   streamFlowin_mat_436_read;
output  [15:0] strmFlowU_split15_din;
input   strmFlowU_split15_full_n;
output   strmFlowU_split15_write;
output  [15:0] strmFlowV_split16_din;
input   strmFlowV_split16_full_n;
output   strmFlowV_split16_write;
input  [31:0] rows;
input  [31:0] cols;
input  [31:0] rows1;
input  [31:0] cols2;
input  [31:0] level;
input  [0:0] scale_up_flag;
input  [31:0] scale_in;
input  [0:0] init_flag;
output  [15:0] rows_out_din;
input   rows_out_full_n;
output   rows_out_write;
output  [15:0] rows_out1_din;
input   rows_out1_full_n;
output   rows_out1_write;
output  [15:0] cols_out_din;
input   cols_out_full_n;
output   cols_out_write;
output  [15:0] cols_out2_din;
input   cols_out2_full_n;
output   cols_out2_write;
output  [31:0] rows1_out_din;
input   rows1_out_full_n;
output   rows1_out_write;
output  [15:0] rows1_out3_din;
input   rows1_out3_full_n;
output   rows1_out3_write;
output  [31:0] cols2_out_din;
input   cols2_out_full_n;
output   cols2_out_write;
output  [15:0] cols2_out4_din;
input   cols2_out4_full_n;
output   cols2_out4_write;
output  [31:0] level_out_din;
input   level_out_full_n;
output   level_out_write;
output  [0:0] scale_up_flag_out_din;
input   scale_up_flag_out_full_n;
output   scale_up_flag_out_write;
output  [0:0] scale_up_flag_out5_din;
input   scale_up_flag_out5_full_n;
output   scale_up_flag_out5_write;
output  [31:0] scale_in_out_din;
input   scale_in_out_full_n;
output   scale_in_out_write;
output  [31:0] scale_in_out6_din;
input   scale_in_out6_full_n;
output   scale_in_out6_write;
output  [0:0] init_flag_out_din;
input   init_flag_out_full_n;
output   init_flag_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg streamFlowin_mat_436_read;
reg strmFlowU_split15_write;
reg strmFlowV_split16_write;
reg rows_out_write;
reg rows_out1_write;
reg cols_out_write;
reg cols_out2_write;
reg rows1_out_write;
reg rows1_out3_write;
reg cols2_out_write;
reg cols2_out4_write;
reg level_out_write;
reg scale_up_flag_out_write;
reg scale_up_flag_out5_write;
reg scale_in_out_write;
reg scale_in_out6_write;
reg init_flag_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    streamFlowin_mat_436_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln882_2_reg_399;
reg    strmFlowU_split15_blk_n;
reg    strmFlowV_split16_blk_n;
reg    rows_out_blk_n;
reg    rows_out1_blk_n;
reg    cols_out_blk_n;
reg    cols_out2_blk_n;
reg    rows1_out_blk_n;
reg    rows1_out3_blk_n;
reg    cols2_out_blk_n;
reg    cols2_out4_blk_n;
reg    level_out_blk_n;
reg    scale_up_flag_out_blk_n;
reg    scale_up_flag_out5_blk_n;
reg    scale_in_out_blk_n;
reg    scale_in_out6_blk_n;
reg    init_flag_out_blk_n;
reg   [15:0] empty_154_reg_301;
reg    ap_block_state1;
wire   [0:0] icmp_ln882_fu_338_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] add_ln695_2_fu_343_p2;
reg   [15:0] add_ln695_2_reg_394;
wire   [0:0] icmp_ln882_2_fu_353_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln695_fu_358_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [15:0] empty_reg_290;
wire    ap_CS_fsm_state5;
wire   [15:0] trunc_ln91_3_fu_328_p1;
wire   [15:0] trunc_ln91_2_fu_322_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln882_fu_334_p1;
wire   [31:0] zext_ln882_2_fu_349_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln882_2_fu_353_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_154_reg_301 <= add_ln695_fu_358_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd1))) begin
        empty_154_reg_301 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_reg_290 <= add_ln695_2_reg_394;
    end else if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_290 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_2_reg_394 <= add_ln695_2_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln882_2_reg_399 <= icmp_ln882_2_fu_353_p2;
    end
end

always @ (*) begin
    if ((icmp_ln882_2_fu_353_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols2_out4_blk_n = cols2_out4_full_n;
    end else begin
        cols2_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols2_out4_write = 1'b1;
    end else begin
        cols2_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols2_out_blk_n = cols2_out_full_n;
    end else begin
        cols2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols2_out_write = 1'b1;
    end else begin
        cols2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out2_blk_n = cols_out2_full_n;
    end else begin
        cols_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out2_write = 1'b1;
    end else begin
        cols_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_blk_n = cols_out_full_n;
    end else begin
        cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_write = 1'b1;
    end else begin
        cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        init_flag_out_blk_n = init_flag_out_full_n;
    end else begin
        init_flag_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        init_flag_out_write = 1'b1;
    end else begin
        init_flag_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        level_out_blk_n = level_out_full_n;
    end else begin
        level_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        level_out_write = 1'b1;
    end else begin
        level_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows1_out3_blk_n = rows1_out3_full_n;
    end else begin
        rows1_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows1_out3_write = 1'b1;
    end else begin
        rows1_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows1_out_blk_n = rows1_out_full_n;
    end else begin
        rows1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows1_out_write = 1'b1;
    end else begin
        rows1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out1_blk_n = rows_out1_full_n;
    end else begin
        rows_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out1_write = 1'b1;
    end else begin
        rows_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out_blk_n = rows_out_full_n;
    end else begin
        rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_out_write = 1'b1;
    end else begin
        rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out6_blk_n = scale_in_out6_full_n;
    end else begin
        scale_in_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out6_write = 1'b1;
    end else begin
        scale_in_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out_blk_n = scale_in_out_full_n;
    end else begin
        scale_in_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_in_out_write = 1'b1;
    end else begin
        scale_in_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out5_blk_n = scale_up_flag_out5_full_n;
    end else begin
        scale_up_flag_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out5_write = 1'b1;
    end else begin
        scale_up_flag_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out_blk_n = scale_up_flag_out_full_n;
    end else begin
        scale_up_flag_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_up_flag_out_write = 1'b1;
    end else begin
        scale_up_flag_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        streamFlowin_mat_436_blk_n = streamFlowin_mat_436_empty_n;
    end else begin
        streamFlowin_mat_436_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        streamFlowin_mat_436_read = 1'b1;
    end else begin
        streamFlowin_mat_436_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        strmFlowU_split15_blk_n = strmFlowU_split15_full_n;
    end else begin
        strmFlowU_split15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        strmFlowU_split15_write = 1'b1;
    end else begin
        strmFlowU_split15_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        strmFlowV_split16_blk_n = strmFlowV_split16_full_n;
    end else begin
        strmFlowV_split16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln882_2_reg_399 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        strmFlowV_split16_write = 1'b1;
    end else begin
        strmFlowV_split16_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln882_fu_338_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln882_2_fu_353_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln882_2_fu_353_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_2_fu_343_p2 = (empty_reg_290 + 16'd1);

assign add_ln695_fu_358_p2 = (empty_154_reg_301 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((strmFlowV_split16_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((strmFlowU_split15_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((streamFlowin_mat_436_empty_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((strmFlowV_split16_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((strmFlowU_split15_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((streamFlowin_mat_436_empty_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((strmFlowV_split16_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((strmFlowU_split15_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((streamFlowin_mat_436_empty_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1))));
end

always @ (*) begin
    ap_block_state1 = ((scale_up_flag_out_full_n == 1'b0) | (level_out_full_n == 1'b0) | (cols2_out4_full_n == 1'b0) | (cols2_out_full_n == 1'b0) | (rows1_out3_full_n == 1'b0) | (rows1_out_full_n == 1'b0) | (cols_out2_full_n == 1'b0) | (cols_out_full_n == 1'b0) | (rows_out1_full_n == 1'b0) | (rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (init_flag_out_full_n == 1'b0) | (scale_in_out6_full_n == 1'b0) | (real_start == 1'b0) | (scale_in_out_full_n == 1'b0) | (scale_up_flag_out5_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((strmFlowV_split16_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((strmFlowU_split15_full_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)) | ((streamFlowin_mat_436_empty_n == 1'b0) & (icmp_ln882_2_reg_399 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cols2_out4_din = cols2[15:0];

assign cols2_out_din = cols2;

assign cols_out2_din = trunc_ln91_2_fu_322_p1;

assign cols_out_din = trunc_ln91_2_fu_322_p1;

assign icmp_ln882_2_fu_353_p2 = ((zext_ln882_2_fu_349_p1 < cols) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_338_p2 = ((zext_ln882_fu_334_p1 < rows) ? 1'b1 : 1'b0);

assign init_flag_out_din = init_flag;

assign level_out_din = level;

assign rows1_out3_din = rows1[15:0];

assign rows1_out_din = rows1;

assign rows_out1_din = trunc_ln91_3_fu_328_p1;

assign rows_out_din = trunc_ln91_3_fu_328_p1;

assign scale_in_out6_din = scale_in;

assign scale_in_out_din = scale_in;

assign scale_up_flag_out5_din = scale_up_flag;

assign scale_up_flag_out_din = scale_up_flag;

assign start_out = real_start;

assign strmFlowU_split15_din = {{streamFlowin_mat_436_dout[31:16]}};

assign strmFlowV_split16_din = streamFlowin_mat_436_dout[15:0];

assign trunc_ln91_2_fu_322_p1 = cols[15:0];

assign trunc_ln91_3_fu_328_p1 = rows[15:0];

assign zext_ln882_2_fu_349_p1 = empty_154_reg_301;

assign zext_ln882_fu_334_p1 = empty_reg_290;

endmodule //pyr_dense_optical_flow_accel_split_stream_int_fixed_unsigned_short_1080_unsigned_short_1920_16_10_48
