// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyr_dense_optical_flow_accel_AxiStream2MatStream_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        current_img_mat_434_din,
        current_img_mat_434_full_n,
        current_img_mat_434_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [7:0] current_img_mat_434_din;
input   current_img_mat_434_full_n;
output   current_img_mat_434_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg current_img_mat_434_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1038_reg_781;
reg   [0:0] icmp_ln1049_reg_811;
reg    current_img_mat_434_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1038_reg_781_pp0_iter1_reg;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg   [31:0] j_reg_133;
reg   [30:0] i_reg_144;
reg  signed [31:0] rows_2_reg_744;
reg    ap_block_state1;
reg  signed [31:0] cols_bound_per_npc_2_reg_749;
reg   [3:0] last_blk_width_1_reg_755;
wire   [31:0] bound_fu_183_p2;
reg   [31:0] bound_reg_761;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_i_fu_187_p2;
reg   [31:0] sub_i_reg_766;
wire   [5:0] sub2_i_fu_192_p2;
reg   [5:0] sub2_i_reg_771;
wire   [5:0] add_ln1057_fu_198_p2;
reg   [5:0] add_ln1057_reg_776;
wire   [0:0] icmp_ln1038_fu_208_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op85_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln1038_fu_213_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] rem_load_reg_790;
wire   [0:0] bLast_fu_222_p2;
reg   [0:0] bLast_reg_801;
wire   [3:0] xf_bits_per_clock_fu_227_p3;
reg   [3:0] xf_bits_per_clock_reg_806;
wire   [0:0] icmp_ln1049_fu_249_p2;
reg   [0:0] icmp_ln1049_reg_811_pp0_iter1_reg;
wire   [31:0] j_2_fu_283_p3;
wire   [5:0] sub_ln674_7_fu_378_p2;
reg   [5:0] sub_ln674_7_reg_820;
wire   [31:0] lshr_ln674_3_fu_388_p2;
reg   [31:0] lshr_ln674_3_reg_825;
wire   [0:0] icmp_ln1050_fu_394_p2;
reg   [0:0] icmp_ln1050_reg_830;
wire   [3:0] trunc_ln1051_fu_399_p1;
reg   [3:0] trunc_ln1051_reg_835;
wire   [5:0] sub_ln674_2_fu_474_p2;
reg   [5:0] sub_ln674_2_reg_840;
wire   [31:0] lshr_ln674_fu_484_p2;
reg   [31:0] lshr_ln674_reg_845;
wire   [0:0] icmp_ln414_fu_539_p2;
reg   [0:0] icmp_ln414_reg_850;
wire   [3:0] trunc_ln414_fu_544_p1;
reg   [3:0] trunc_ln414_reg_856;
wire   [3:0] trunc_ln414_1_fu_547_p1;
reg   [3:0] trunc_ln414_1_reg_861;
wire   [3:0] sub_ln414_2_fu_573_p2;
reg   [3:0] sub_ln414_2_reg_866;
wire   [7:0] shl_ln414_fu_583_p2;
reg   [7:0] shl_ln414_reg_871;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [7:0] ap_phi_mux_empty_phi_fu_158_p4;
wire   [7:0] p_Result_24_fu_722_p2;
wire   [7:0] ap_phi_reg_pp0_iter2_empty_reg_155;
wire   [7:0] trunc_ln358_fu_608_p1;
reg   [31:0] rem_fu_94;
wire   [31:0] rem_2_fu_255_p2;
wire   [31:0] rem_1_fu_266_p2;
reg   [31:0] p_Val2_s_fu_98;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] last_blk_width_cast1_i_fu_180_p1;
wire   [31:0] zext_ln1027_fu_204_p1;
wire   [5:0] ptr_width_minus_fu_238_p3;
wire   [31:0] zext_ln1044_fu_234_p1;
wire   [31:0] zext_ln1045_fu_245_p1;
wire   [31:0] add_ln1061_fu_277_p2;
wire   [5:0] select_ln1057_fu_297_p3;
wire   [31:0] zext_ln1057_fu_303_p1;
wire   [31:0] grp_fu_165_p2;
wire   [31:0] sub_ln1057_fu_307_p2;
wire   [5:0] trunc_ln674_1_fu_318_p1;
wire   [5:0] trunc_ln674_2_fu_322_p1;
wire   [0:0] icmp_ln674_1_fu_312_p2;
wire   [5:0] sub_ln674_4_fu_336_p2;
wire   [5:0] sub_ln674_6_fu_348_p2;
reg   [31:0] tmp_23_fu_326_p4;
wire   [5:0] sub_ln674_5_fu_342_p2;
wire   [5:0] select_ln674_3_fu_354_p3;
wire   [5:0] select_ln674_5_fu_370_p3;
wire   [31:0] select_ln674_4_fu_362_p3;
wire   [31:0] zext_ln674_3_fu_384_p1;
wire   [26:0] tmp_fu_402_p4;
wire   [5:0] trunc_ln674_fu_418_p1;
wire   [0:0] icmp_ln674_fu_412_p2;
wire   [5:0] add_ln674_fu_432_p2;
wire   [5:0] sub_ln674_1_fu_444_p2;
reg   [31:0] tmp_21_fu_422_p4;
wire   [5:0] sub_ln674_fu_438_p2;
wire   [5:0] select_ln674_fu_450_p3;
wire   [5:0] select_ln674_2_fu_466_p3;
wire   [31:0] select_ln674_1_fu_458_p3;
wire   [31:0] zext_ln674_fu_480_p1;
wire   [4:0] zext_ln1044_1_fu_291_p1;
wire  signed [4:0] add_ln1054_fu_490_p2;
wire   [5:0] trunc_ln1054_fu_504_p1;
wire  signed [5:0] sext_ln1054_1_fu_500_p1;
wire   [5:0] sub_ln674_3_fu_507_p2;
wire   [5:0] add_ln674_1_fu_513_p2;
wire   [31:0] zext_ln674_2_fu_519_p1;
wire   [31:0] lshr_ln674_2_fu_523_p2;
wire   [31:0] p_Result_23_fu_529_p2;
wire  signed [31:0] sext_ln1054_fu_496_p1;
wire   [3:0] sub_ln414_1_fu_551_p2;
wire   [3:0] select_ln414_fu_557_p3;
wire   [3:0] select_ln414_2_fu_565_p3;
wire   [7:0] p_Repl2_2_fu_535_p1;
wire   [7:0] zext_ln414_1_fu_579_p1;
wire   [31:0] zext_ln674_4_fu_594_p1;
wire   [31:0] lshr_ln674_4_fu_597_p2;
wire   [31:0] p_Result_25_fu_603_p2;
wire   [31:0] zext_ln674_1_fu_613_p1;
wire   [31:0] lshr_ln674_1_fu_616_p2;
wire   [31:0] p_Result_s_fu_622_p2;
wire   [3:0] sub_ln414_fu_631_p2;
wire   [7:0] zext_ln414_fu_636_p1;
wire   [7:0] p_Repl2_s_fu_627_p1;
wire   [7:0] lshr_ln414_fu_640_p2;
wire   [7:0] p_Result_22_fu_646_p2;
wire   [3:0] select_ln414_1_fu_659_p3;
reg   [7:0] tmp_22_fu_671_p4;
wire   [7:0] zext_ln414_2_fu_664_p1;
wire   [7:0] zext_ln414_3_fu_668_p1;
wire   [7:0] shl_ln414_1_fu_686_p2;
wire   [7:0] lshr_ln414_1_fu_692_p2;
wire   [7:0] and_ln414_fu_698_p2;
wire   [7:0] p_Val2_8_fu_652_p3;
wire   [7:0] xor_ln414_fu_704_p2;
wire   [7:0] select_ln414_3_fu_680_p3;
wire   [7:0] and_ln414_1_fu_710_p2;
wire   [7:0] and_ln414_2_fu_716_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U58(
    .din0(cols_bound_per_npc_2_reg_749),
    .din1(rows_2_reg_744),
    .dout(bound_fu_183_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd1))) begin
        i_reg_144 <= add_ln1038_fu_213_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_144 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd1))) begin
        j_reg_133 <= j_2_fu_283_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_133 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_811 == 1'd1) & (icmp_ln1038_reg_781 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_fu_98 <= ldata1_dout;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd1))) begin
        rem_fu_94 <= rem_1_fu_266_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_249_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd1))) begin
        rem_fu_94 <= rem_2_fu_255_p2;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1057_reg_776 <= add_ln1057_fu_198_p2;
        bound_reg_761 <= bound_fu_183_p2;
        sub2_i_reg_771 <= sub2_i_fu_192_p2;
        sub_i_reg_766 <= sub_i_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1038_fu_208_p2 == 1'd1))) begin
        bLast_reg_801 <= bLast_fu_222_p2;
        icmp_ln1049_reg_811 <= icmp_ln1049_fu_249_p2;
        rem_load_reg_790 <= rem_fu_94;
        xf_bits_per_clock_reg_806 <= xf_bits_per_clock_fu_227_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_2_reg_749 <= cols_bound_per_npc_dout;
        last_blk_width_1_reg_755 <= last_blk_width_dout;
        rows_2_reg_744 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1038_reg_781 <= icmp_ln1038_fu_208_p2;
        icmp_ln1038_reg_781_pp0_iter1_reg <= icmp_ln1038_reg_781;
        icmp_ln1049_reg_811_pp0_iter1_reg <= icmp_ln1049_reg_811;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_811 == 1'd1) & (icmp_ln1038_reg_781 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1050_reg_830 <= icmp_ln1050_fu_394_p2;
        icmp_ln414_reg_850 <= icmp_ln414_fu_539_p2;
        lshr_ln674_reg_845 <= lshr_ln674_fu_484_p2;
        shl_ln414_reg_871 <= shl_ln414_fu_583_p2;
        sub_ln414_2_reg_866 <= sub_ln414_2_fu_573_p2;
        sub_ln674_2_reg_840 <= sub_ln674_2_fu_474_p2;
        trunc_ln1051_reg_835 <= trunc_ln1051_fu_399_p1;
        trunc_ln414_1_reg_861 <= trunc_ln414_1_fu_547_p1;
        trunc_ln414_reg_856 <= trunc_ln414_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_811 == 1'd0) & (icmp_ln1038_reg_781 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln674_3_reg_825 <= lshr_ln674_3_fu_388_p2;
        sub_ln674_7_reg_820 <= sub_ln674_7_fu_378_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1038_fu_208_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1)) begin
        if ((icmp_ln1049_reg_811_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_158_p4 = trunc_ln358_fu_608_p1;
        end else if ((icmp_ln1049_reg_811_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_158_p4 = p_Result_24_fu_722_p2;
        end else begin
            ap_phi_mux_empty_phi_fu_158_p4 = ap_phi_reg_pp0_iter2_empty_reg_155;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_158_p4 = ap_phi_reg_pp0_iter2_empty_reg_155;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        current_img_mat_434_blk_n = current_img_mat_434_full_n;
    end else begin
        current_img_mat_434_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        current_img_mat_434_write = 1'b1;
    end else begin
        current_img_mat_434_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_reg_811 == 1'd1) & (icmp_ln1038_reg_781 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op85_read_state4 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_208_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1038_fu_213_p2 = (i_reg_144 + 31'd1);

assign add_ln1054_fu_490_p2 = ($signed(5'd31) + $signed(zext_ln1044_1_fu_291_p1));

assign add_ln1057_fu_198_p2 = (last_blk_width_cast1_i_fu_180_p1 + 6'd31);

assign add_ln1061_fu_277_p2 = (j_reg_133 + 32'd1);

assign add_ln674_1_fu_513_p2 = (6'd31 + sub_ln674_3_fu_507_p2);

assign add_ln674_fu_432_p2 = ($signed(6'd33) + $signed(trunc_ln674_fu_418_p1));

assign and_ln414_1_fu_710_p2 = (xor_ln414_fu_704_p2 & p_Val2_8_fu_652_p3);

assign and_ln414_2_fu_716_p2 = (select_ln414_3_fu_680_p3 & and_ln414_fu_698_p2);

assign and_ln414_fu_698_p2 = (shl_ln414_1_fu_686_p2 & lshr_ln414_1_fu_692_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (current_img_mat_434_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (current_img_mat_434_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (current_img_mat_434_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((ldata1_empty_n == 1'b0) & (ap_predicate_op85_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln1038_reg_781_pp0_iter1_reg == 1'd1) & (current_img_mat_434_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_reg_155 = 'bx;

always @ (*) begin
    ap_predicate_op85_read_state4 = ((icmp_ln1049_reg_811 == 1'd1) & (icmp_ln1038_reg_781 == 1'd1));
end

assign bLast_fu_222_p2 = ((j_reg_133 == sub_i_reg_766) ? 1'b1 : 1'b0);

assign current_img_mat_434_din = ap_phi_mux_empty_phi_fu_158_p4;

assign grp_fu_165_p2 = (32'd32 - rem_load_reg_790);

assign icmp_ln1038_fu_208_p2 = (($signed(zext_ln1027_fu_204_p1) < $signed(bound_reg_761)) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_249_p2 = (($signed(rem_fu_94) < $signed(zext_ln1044_fu_234_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1050_fu_394_p2 = ((rem_load_reg_790 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_539_p2 = ((rem_load_reg_790 > sext_ln1054_fu_496_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_312_p2 = ((grp_fu_165_p2 > sub_ln1057_fu_307_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_412_p2 = ((tmp_fu_402_p4 != 27'd0) ? 1'b1 : 1'b0);

assign j_2_fu_283_p3 = ((bLast_fu_222_p2[0:0] === 1'b1) ? 32'd0 : add_ln1061_fu_277_p2);

assign last_blk_width_cast1_i_fu_180_p1 = last_blk_width_1_reg_755;

assign lshr_ln414_1_fu_692_p2 = 8'd255 >> zext_ln414_3_fu_668_p1;

assign lshr_ln414_fu_640_p2 = 8'd255 >> zext_ln414_fu_636_p1;

assign lshr_ln674_1_fu_616_p2 = 32'd4294967295 >> zext_ln674_1_fu_613_p1;

assign lshr_ln674_2_fu_523_p2 = 32'd4294967295 >> zext_ln674_2_fu_519_p1;

assign lshr_ln674_3_fu_388_p2 = select_ln674_4_fu_362_p3 >> zext_ln674_3_fu_384_p1;

assign lshr_ln674_4_fu_597_p2 = 32'd4294967295 >> zext_ln674_4_fu_594_p1;

assign lshr_ln674_fu_484_p2 = select_ln674_1_fu_458_p3 >> zext_ln674_fu_480_p1;

assign p_Repl2_2_fu_535_p1 = p_Result_23_fu_529_p2[7:0];

assign p_Repl2_s_fu_627_p1 = p_Result_s_fu_622_p2[7:0];

assign p_Result_22_fu_646_p2 = (p_Repl2_s_fu_627_p1 & lshr_ln414_fu_640_p2);

assign p_Result_23_fu_529_p2 = (lshr_ln674_2_fu_523_p2 & ldata1_dout);

assign p_Result_24_fu_722_p2 = (and_ln414_2_fu_716_p2 | and_ln414_1_fu_710_p2);

assign p_Result_25_fu_603_p2 = (lshr_ln674_4_fu_597_p2 & lshr_ln674_3_reg_825);

assign p_Result_s_fu_622_p2 = (lshr_ln674_reg_845 & lshr_ln674_1_fu_616_p2);

assign p_Val2_8_fu_652_p3 = ((icmp_ln1050_reg_830[0:0] === 1'b1) ? 8'd0 : p_Result_22_fu_646_p2);

assign ptr_width_minus_fu_238_p3 = ((bLast_fu_222_p2[0:0] === 1'b1) ? sub2_i_reg_771 : 6'd24);

assign rem_1_fu_266_p2 = (rem_fu_94 + zext_ln1045_fu_245_p1);

assign rem_2_fu_255_p2 = (rem_fu_94 - zext_ln1044_fu_234_p1);

assign select_ln1057_fu_297_p3 = ((bLast_reg_801[0:0] === 1'b1) ? add_ln1057_reg_776 : 6'd39);

assign select_ln414_1_fu_659_p3 = ((icmp_ln414_reg_850[0:0] === 1'b1) ? trunc_ln414_1_reg_861 : trunc_ln414_reg_856);

assign select_ln414_2_fu_565_p3 = ((icmp_ln414_fu_539_p2[0:0] === 1'b1) ? sub_ln414_1_fu_551_p2 : trunc_ln414_fu_544_p1);

assign select_ln414_3_fu_680_p3 = ((icmp_ln414_reg_850[0:0] === 1'b1) ? tmp_22_fu_671_p4 : shl_ln414_reg_871);

assign select_ln414_fu_557_p3 = ((icmp_ln414_fu_539_p2[0:0] === 1'b1) ? trunc_ln414_fu_544_p1 : trunc_ln414_1_fu_547_p1);

assign select_ln674_1_fu_458_p3 = ((icmp_ln674_fu_412_p2[0:0] === 1'b1) ? tmp_21_fu_422_p4 : p_Val2_s_fu_98);

assign select_ln674_2_fu_466_p3 = ((icmp_ln674_fu_412_p2[0:0] === 1'b1) ? sub_ln674_fu_438_p2 : trunc_ln674_fu_418_p1);

assign select_ln674_3_fu_354_p3 = ((icmp_ln674_1_fu_312_p2[0:0] === 1'b1) ? sub_ln674_4_fu_336_p2 : sub_ln674_6_fu_348_p2);

assign select_ln674_4_fu_362_p3 = ((icmp_ln674_1_fu_312_p2[0:0] === 1'b1) ? tmp_23_fu_326_p4 : p_Val2_s_fu_98);

assign select_ln674_5_fu_370_p3 = ((icmp_ln674_1_fu_312_p2[0:0] === 1'b1) ? sub_ln674_5_fu_342_p2 : trunc_ln674_1_fu_318_p1);

assign select_ln674_fu_450_p3 = ((icmp_ln674_fu_412_p2[0:0] === 1'b1) ? add_ln674_fu_432_p2 : sub_ln674_1_fu_444_p2);

assign sext_ln1054_1_fu_500_p1 = add_ln1054_fu_490_p2;

assign sext_ln1054_fu_496_p1 = add_ln1054_fu_490_p2;

assign shl_ln414_1_fu_686_p2 = 8'd255 << zext_ln414_2_fu_664_p1;

assign shl_ln414_fu_583_p2 = p_Repl2_2_fu_535_p1 << zext_ln414_1_fu_579_p1;

assign sub2_i_fu_192_p2 = ($signed(6'd32) - $signed(last_blk_width_cast1_i_fu_180_p1));

assign sub_i_fu_187_p2 = ($signed(cols_bound_per_npc_2_reg_749) + $signed(32'd4294967295));

assign sub_ln1057_fu_307_p2 = (zext_ln1057_fu_303_p1 - rem_load_reg_790);

assign sub_ln414_1_fu_551_p2 = (4'd7 - trunc_ln414_fu_544_p1);

assign sub_ln414_2_fu_573_p2 = (4'd7 - select_ln414_fu_557_p3);

assign sub_ln414_fu_631_p2 = ($signed(4'd8) - $signed(trunc_ln1051_reg_835));

assign sub_ln674_1_fu_444_p2 = (6'd31 - trunc_ln674_fu_418_p1);

assign sub_ln674_2_fu_474_p2 = (6'd31 - select_ln674_fu_450_p3);

assign sub_ln674_3_fu_507_p2 = ($signed(trunc_ln1054_fu_504_p1) - $signed(sext_ln1054_1_fu_500_p1));

assign sub_ln674_4_fu_336_p2 = (trunc_ln674_1_fu_318_p1 - trunc_ln674_2_fu_322_p1);

assign sub_ln674_5_fu_342_p2 = (6'd31 - trunc_ln674_1_fu_318_p1);

assign sub_ln674_6_fu_348_p2 = (trunc_ln674_2_fu_322_p1 - trunc_ln674_1_fu_318_p1);

assign sub_ln674_7_fu_378_p2 = (6'd31 - select_ln674_3_fu_354_p3);

assign sub_ln674_fu_438_p2 = (6'd31 - trunc_ln674_fu_418_p1);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_98) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_21_fu_422_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_21_fu_422_p4[ap_tvar_int_0] = p_Val2_s_fu_98[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_reg_871) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_22_fu_671_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_22_fu_671_p4[ap_tvar_int_1] = shl_ln414_reg_871[7 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_98) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_23_fu_326_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_23_fu_326_p4[ap_tvar_int_2] = p_Val2_s_fu_98[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_402_p4 = {{grp_fu_165_p2[31:5]}};

assign trunc_ln1051_fu_399_p1 = rem_load_reg_790[3:0];

assign trunc_ln1054_fu_504_p1 = rem_load_reg_790[5:0];

assign trunc_ln358_fu_608_p1 = p_Result_25_fu_603_p2[7:0];

assign trunc_ln414_1_fu_547_p1 = add_ln1054_fu_490_p2[3:0];

assign trunc_ln414_fu_544_p1 = rem_load_reg_790[3:0];

assign trunc_ln674_1_fu_318_p1 = grp_fu_165_p2[5:0];

assign trunc_ln674_2_fu_322_p1 = sub_ln1057_fu_307_p2[5:0];

assign trunc_ln674_fu_418_p1 = grp_fu_165_p2[5:0];

assign xf_bits_per_clock_fu_227_p3 = ((bLast_fu_222_p2[0:0] === 1'b1) ? last_blk_width_1_reg_755 : 4'd8);

assign xor_ln414_fu_704_p2 = (8'd255 ^ and_ln414_fu_698_p2);

assign zext_ln1027_fu_204_p1 = i_reg_144;

assign zext_ln1044_1_fu_291_p1 = xf_bits_per_clock_reg_806;

assign zext_ln1044_fu_234_p1 = xf_bits_per_clock_fu_227_p3;

assign zext_ln1045_fu_245_p1 = ptr_width_minus_fu_238_p3;

assign zext_ln1057_fu_303_p1 = select_ln1057_fu_297_p3;

assign zext_ln414_1_fu_579_p1 = select_ln414_2_fu_565_p3;

assign zext_ln414_2_fu_664_p1 = select_ln414_1_fu_659_p3;

assign zext_ln414_3_fu_668_p1 = sub_ln414_2_reg_866;

assign zext_ln414_fu_636_p1 = sub_ln414_fu_631_p2;

assign zext_ln674_1_fu_613_p1 = sub_ln674_2_reg_840;

assign zext_ln674_2_fu_519_p1 = add_ln674_1_fu_513_p2;

assign zext_ln674_3_fu_384_p1 = select_ln674_5_fu_370_p3;

assign zext_ln674_4_fu_594_p1 = sub_ln674_7_reg_820;

assign zext_ln674_fu_480_p1 = select_ln674_2_fu_466_p3;

endmodule //pyr_dense_optical_flow_accel_AxiStream2MatStream_1
