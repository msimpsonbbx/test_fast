-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_AxiStream2MatStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    streamFlowin_mat_436_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    streamFlowin_mat_436_full_n : IN STD_LOGIC;
    streamFlowin_mat_436_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC );
end;


architecture behav of pyr_dense_optical_flow_accel_AxiStream2MatStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1038_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal streamFlowin_mat_436_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln1038_reg_761_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal j_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_136 : STD_LOGIC_VECTOR (30 downto 0);
    signal rows_3_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_bound_per_npc_3_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_blk_width_2_reg_735 : STD_LOGIC_VECTOR (5 downto 0);
    signal bound_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_i_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_i_fu_184_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub2_i_reg_751 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1057_fu_190_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1057_reg_756 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1038_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op85_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1038_fu_205_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal rem_load_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal bLast_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_bits_per_clock_fu_219_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xf_bits_per_clock_reg_786 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1049_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_791_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_275_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_14_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_14_reg_800 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_7_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_7_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1050_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1051_fu_391_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1051_reg_815 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_9_fu_466_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_9_reg_820 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln414_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_532_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln414_reg_836 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln414_2_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln414_2_reg_841 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln414_4_fu_561_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln414_4_reg_846 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln414_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln414_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_150_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_4_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_3_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal last_blk_width_cast_i_fu_172_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1027_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptr_width_minus_fu_230_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1044_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1045_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1061_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1057_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1057_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_3_fu_310_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln674_4_fu_314_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_11_fu_328_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_13_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_318_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_12_fu_334_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_8_fu_346_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_10_fu_362_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_9_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_7_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_394_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln674_fu_410_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln674_fu_424_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_8_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_414_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_fu_442_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_7_fu_458_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_6_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1044_1_fu_283_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1054_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1054_1_fu_496_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1054_fu_492_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_10_fu_499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln674_2_fu_505_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_6_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_6_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1054_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_3_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln414_fu_545_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln414_5_fu_553_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_30_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln414_4_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_8_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_8_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_5_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_5_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_fu_611_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln414_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_29_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln414_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_4_fu_639_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_fu_651_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln414_5_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln414_6_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln414_2_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln414_2_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln414_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_632_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln414_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_6_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln414_3_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln414_4_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U121 : component pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cols_bound_per_npc_3_reg_729,
        din1 => rows_3_reg_724,
        dout => bound_fu_175_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_1))) then 
                i_reg_136 <= add_ln1038_fu_205_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_136 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_1))) then 
                j_reg_125 <= j_3_fu_275_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_125 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_791 = ap_const_lv1_1) and (icmp_ln1038_reg_761 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_s_fu_90 <= ldata1_dout;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    rem_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_241_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_1))) then 
                rem_fu_86 <= rem_3_fu_258_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_1))) then 
                rem_fu_86 <= rem_4_fu_247_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln1057_reg_756 <= add_ln1057_fu_190_p2;
                bound_reg_741 <= bound_fu_175_p2;
                sub2_i_reg_751 <= sub2_i_fu_184_p2;
                sub_i_reg_746 <= sub_i_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_1))) then
                bLast_reg_781 <= bLast_fu_214_p2;
                icmp_ln1049_reg_791 <= icmp_ln1049_fu_241_p2;
                rem_load_reg_770 <= rem_fu_86;
                xf_bits_per_clock_reg_786 <= xf_bits_per_clock_fu_219_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_bound_per_npc_3_reg_729 <= cols_bound_per_npc_dout;
                last_blk_width_2_reg_735 <= last_blk_width_dout;
                rows_3_reg_724 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1038_reg_761 <= icmp_ln1038_fu_200_p2;
                icmp_ln1038_reg_761_pp0_iter1_reg <= icmp_ln1038_reg_761;
                icmp_ln1049_reg_791_pp0_iter1_reg <= icmp_ln1049_reg_791;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_791 = ap_const_lv1_1) and (icmp_ln1038_reg_761 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1050_reg_810 <= icmp_ln1050_fu_386_p2;
                icmp_ln414_reg_830 <= icmp_ln414_fu_527_p2;
                lshr_ln674_reg_825 <= lshr_ln674_fu_476_p2;
                shl_ln414_reg_851 <= shl_ln414_fu_571_p2;
                sub_ln414_4_reg_846 <= sub_ln414_4_fu_561_p2;
                sub_ln674_9_reg_820 <= sub_ln674_9_fu_466_p2;
                trunc_ln1051_reg_815 <= trunc_ln1051_fu_391_p1;
                trunc_ln414_2_reg_841 <= trunc_ln414_2_fu_535_p1;
                trunc_ln414_reg_836 <= trunc_ln414_fu_532_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_791 = ap_const_lv1_0) and (icmp_ln1038_reg_761 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln674_7_reg_805 <= lshr_ln674_7_fu_380_p2;
                sub_ln674_14_reg_800 <= sub_ln674_14_fu_370_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_fu_200_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_200_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1038_fu_205_p2 <= std_logic_vector(unsigned(i_reg_136) + unsigned(ap_const_lv31_1));
    add_ln1054_fu_482_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(zext_ln1044_1_fu_283_p1));
    add_ln1057_fu_190_p2 <= std_logic_vector(unsigned(last_blk_width_cast_i_fu_172_p1) + unsigned(ap_const_lv7_1F));
    add_ln1061_fu_269_p2 <= std_logic_vector(unsigned(j_reg_125) + unsigned(ap_const_lv32_1));
    add_ln674_2_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) + unsigned(sub_ln674_10_fu_499_p2));
    add_ln674_fu_424_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(trunc_ln674_fu_410_p1));
    and_ln414_3_fu_690_p2 <= (xor_ln414_fu_684_p2 and p_Val2_10_fu_632_p3);
    and_ln414_4_fu_696_p2 <= (select_ln414_6_fu_660_p3 and and_ln414_fu_678_p2);
    and_ln414_fu_678_p2 <= (shl_ln414_2_fu_666_p2 and lshr_ln414_2_fu_672_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, streamFlowin_mat_436_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_761_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (streamFlowin_mat_436_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, streamFlowin_mat_436_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_761_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (streamFlowin_mat_436_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, streamFlowin_mat_436_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_761_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (streamFlowin_mat_436_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(ldata1_empty_n, ap_predicate_op85_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(streamFlowin_mat_436_full_n, icmp_ln1038_reg_761_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (streamFlowin_mat_436_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1038_fu_200_p2)
    begin
        if ((icmp_ln1038_fu_200_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_150_p4_assign_proc : process(icmp_ln1038_reg_761_pp0_iter1_reg, icmp_ln1049_reg_791_pp0_iter1_reg, p_Result_27_fu_702_p2, ap_phi_reg_pp0_iter2_empty_reg_147, p_Result_28_fu_591_p2)
    begin
        if ((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1)) then
            if ((icmp_ln1049_reg_791_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_150_p4 <= p_Result_28_fu_591_p2;
            elsif ((icmp_ln1049_reg_791_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_150_p4 <= p_Result_27_fu_702_p2;
            else 
                ap_phi_mux_empty_phi_fu_150_p4 <= ap_phi_reg_pp0_iter2_empty_reg_147;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_150_p4 <= ap_phi_reg_pp0_iter2_empty_reg_147;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_147 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op85_read_state4_assign_proc : process(icmp_ln1038_reg_761, icmp_ln1049_reg_791)
    begin
                ap_predicate_op85_read_state4 <= ((icmp_ln1049_reg_791 = ap_const_lv1_1) and (icmp_ln1038_reg_761 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_214_p2 <= "1" when (j_reg_125 = sub_i_reg_746) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_157_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(rem_load_reg_770));
    icmp_ln1038_fu_200_p2 <= "1" when (signed(zext_ln1027_fu_196_p1) < signed(bound_reg_741)) else "0";
    icmp_ln1049_fu_241_p2 <= "1" when (signed(rem_fu_86) < signed(zext_ln1044_fu_226_p1)) else "0";
    icmp_ln1050_fu_386_p2 <= "1" when (rem_load_reg_770 = ap_const_lv32_0) else "0";
    icmp_ln414_fu_527_p2 <= "1" when (unsigned(rem_load_reg_770) > unsigned(sext_ln1054_fu_488_p1)) else "0";
    icmp_ln674_2_fu_304_p2 <= "1" when (unsigned(grp_fu_157_p2) > unsigned(sub_ln1057_fu_299_p2)) else "0";
    icmp_ln674_fu_404_p2 <= "0" when (tmp_fu_394_p4 = ap_const_lv27_0) else "1";
    j_3_fu_275_p3 <= 
        ap_const_lv32_0 when (bLast_fu_214_p2(0) = '1') else 
        add_ln1061_fu_269_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last_blk_width_cast_i_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_2_reg_735),7));

    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1038_reg_761, icmp_ln1049_reg_791)
    begin
        if (((icmp_ln1049_reg_791 = ap_const_lv1_1) and (icmp_ln1038_reg_761 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op85_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln414_2_fu_672_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln414_6_fu_648_p1(31-1 downto 0)))));
    lshr_ln414_fu_620_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln414_fu_616_p1(31-1 downto 0)))));
    lshr_ln674_5_fu_600_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_5_fu_597_p1(31-1 downto 0)))));
    lshr_ln674_6_fu_515_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_6_fu_511_p1(31-1 downto 0)))));
    lshr_ln674_7_fu_380_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_9_fu_354_p3),to_integer(unsigned('0' & zext_ln674_7_fu_376_p1(31-1 downto 0)))));
    lshr_ln674_8_fu_585_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_8_fu_582_p1(31-1 downto 0)))));
    lshr_ln674_fu_476_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_6_fu_450_p3),to_integer(unsigned('0' & zext_ln674_fu_472_p1(31-1 downto 0)))));
    p_Result_27_fu_702_p2 <= (and_ln414_4_fu_696_p2 or and_ln414_3_fu_690_p2);
    p_Result_28_fu_591_p2 <= (lshr_ln674_8_fu_585_p2 and lshr_ln674_7_reg_805);
    p_Result_29_fu_606_p2 <= (lshr_ln674_reg_825 and lshr_ln674_5_fu_600_p2);
    p_Result_30_fu_521_p2 <= (lshr_ln674_6_fu_515_p2 and ldata1_dout);
    p_Result_s_fu_626_p2 <= (p_Result_29_fu_606_p2 and lshr_ln414_fu_620_p2);
    p_Val2_10_fu_632_p3 <= 
        ap_const_lv32_0 when (icmp_ln1050_reg_810(0) = '1') else 
        p_Result_s_fu_626_p2;
    ptr_width_minus_fu_230_p3 <= 
        sub2_i_reg_751 when (bLast_fu_214_p2(0) = '1') else 
        ap_const_lv7_0;
    rem_3_fu_258_p2 <= std_logic_vector(signed(sext_ln1045_fu_237_p1) + signed(rem_fu_86));
    rem_4_fu_247_p2 <= std_logic_vector(unsigned(rem_fu_86) - unsigned(zext_ln1044_fu_226_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1057_fu_289_p3 <= 
        add_ln1057_reg_756 when (bLast_reg_781(0) = '1') else 
        ap_const_lv7_3F;
    select_ln414_4_fu_639_p3 <= 
        trunc_ln414_2_reg_841 when (icmp_ln414_reg_830(0) = '1') else 
        trunc_ln414_reg_836;
    select_ln414_5_fu_553_p3 <= 
        sub_ln414_3_fu_539_p2 when (icmp_ln414_fu_527_p2(0) = '1') else 
        trunc_ln414_fu_532_p1;
    select_ln414_6_fu_660_p3 <= 
        tmp_25_fu_651_p4 when (icmp_ln414_reg_830(0) = '1') else 
        shl_ln414_reg_851;
    select_ln414_fu_545_p3 <= 
        trunc_ln414_fu_532_p1 when (icmp_ln414_fu_527_p2(0) = '1') else 
        trunc_ln414_2_fu_535_p1;
    select_ln674_10_fu_362_p3 <= 
        sub_ln674_12_fu_334_p2 when (icmp_ln674_2_fu_304_p2(0) = '1') else 
        trunc_ln674_3_fu_310_p1;
    select_ln674_6_fu_450_p3 <= 
        tmp_24_fu_414_p4 when (icmp_ln674_fu_404_p2(0) = '1') else 
        p_Val2_s_fu_90;
    select_ln674_7_fu_458_p3 <= 
        sub_ln674_fu_430_p2 when (icmp_ln674_fu_404_p2(0) = '1') else 
        trunc_ln674_fu_410_p1;
    select_ln674_8_fu_346_p3 <= 
        sub_ln674_11_fu_328_p2 when (icmp_ln674_2_fu_304_p2(0) = '1') else 
        sub_ln674_13_fu_340_p2;
    select_ln674_9_fu_354_p3 <= 
        tmp_26_fu_318_p4 when (icmp_ln674_2_fu_304_p2(0) = '1') else 
        p_Val2_s_fu_90;
    select_ln674_fu_442_p3 <= 
        add_ln674_fu_424_p2 when (icmp_ln674_fu_404_p2(0) = '1') else 
        sub_ln674_8_fu_436_p2;
        sext_ln1045_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_width_minus_fu_230_p3),32));

        sext_ln1054_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_482_p2),32));

    shl_ln414_2_fu_666_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln414_5_fu_644_p1(31-1 downto 0)))));
    shl_ln414_fu_571_p2 <= std_logic_vector(shift_left(unsigned(p_Result_30_fu_521_p2),to_integer(unsigned('0' & zext_ln414_4_fu_567_p1(31-1 downto 0)))));

    streamFlowin_mat_436_blk_n_assign_proc : process(streamFlowin_mat_436_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_761_pp0_iter1_reg)
    begin
        if (((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            streamFlowin_mat_436_blk_n <= streamFlowin_mat_436_full_n;
        else 
            streamFlowin_mat_436_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    streamFlowin_mat_436_din <= ap_phi_mux_empty_phi_fu_150_p4;

    streamFlowin_mat_436_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1038_reg_761_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1038_reg_761_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            streamFlowin_mat_436_write <= ap_const_logic_1;
        else 
            streamFlowin_mat_436_write <= ap_const_logic_0;
        end if; 
    end process;

    sub2_i_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv7_20) - unsigned(last_blk_width_cast_i_fu_172_p1));
    sub_i_fu_179_p2 <= std_logic_vector(signed(cols_bound_per_npc_3_reg_729) + signed(ap_const_lv32_FFFFFFFF));
    sub_ln1057_fu_299_p2 <= std_logic_vector(unsigned(zext_ln1057_fu_295_p1) - unsigned(rem_load_reg_770));
    sub_ln414_3_fu_539_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln414_fu_532_p1));
    sub_ln414_4_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln414_fu_545_p3));
    sub_ln414_fu_611_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(trunc_ln1051_reg_815));
    sub_ln674_10_fu_499_p2 <= std_logic_vector(unsigned(trunc_ln1054_1_fu_496_p1) - unsigned(trunc_ln1054_fu_492_p1));
    sub_ln674_11_fu_328_p2 <= std_logic_vector(unsigned(trunc_ln674_3_fu_310_p1) - unsigned(trunc_ln674_4_fu_314_p1));
    sub_ln674_12_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_3_fu_310_p1));
    sub_ln674_13_fu_340_p2 <= std_logic_vector(unsigned(trunc_ln674_4_fu_314_p1) - unsigned(trunc_ln674_3_fu_310_p1));
    sub_ln674_14_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_8_fu_346_p3));
    sub_ln674_8_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_410_p1));
    sub_ln674_9_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_fu_442_p3));
    sub_ln674_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_410_p1));
    
    tmp_24_fu_414_p4_proc : process(p_Val2_s_fu_90)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_24_fu_414_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_90;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_24_fu_414_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_24_fu_414_p4_i) := p_Val2_s_fu_90(32-1-tmp_24_fu_414_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_24_fu_414_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_25_fu_651_p4_proc : process(shl_ln414_reg_851)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_25_fu_651_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln414_reg_851;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_25_fu_651_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_25_fu_651_p4_i) := shl_ln414_reg_851(32-1-tmp_25_fu_651_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_25_fu_651_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_26_fu_318_p4_proc : process(p_Val2_s_fu_90)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_26_fu_318_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_90;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_26_fu_318_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_26_fu_318_p4_i) := p_Val2_s_fu_90(32-1-tmp_26_fu_318_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_26_fu_318_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_394_p4 <= grp_fu_157_p2(31 downto 5);
    trunc_ln1051_fu_391_p1 <= rem_load_reg_770(6 - 1 downto 0);
    trunc_ln1054_1_fu_496_p1 <= rem_load_reg_770(6 - 1 downto 0);
    trunc_ln1054_fu_492_p1 <= add_ln1054_fu_482_p2(6 - 1 downto 0);
    trunc_ln414_2_fu_535_p1 <= add_ln1054_fu_482_p2(6 - 1 downto 0);
    trunc_ln414_fu_532_p1 <= rem_load_reg_770(6 - 1 downto 0);
    trunc_ln674_3_fu_310_p1 <= grp_fu_157_p2(6 - 1 downto 0);
    trunc_ln674_4_fu_314_p1 <= sub_ln1057_fu_299_p2(6 - 1 downto 0);
    trunc_ln674_fu_410_p1 <= grp_fu_157_p2(6 - 1 downto 0);
    xf_bits_per_clock_fu_219_p3 <= 
        last_blk_width_2_reg_735 when (bLast_fu_214_p2(0) = '1') else 
        ap_const_lv6_20;
    xor_ln414_fu_684_p2 <= (ap_const_lv32_FFFFFFFF xor and_ln414_fu_678_p2);
    zext_ln1027_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_136),32));
    zext_ln1044_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_786),7));
    zext_ln1044_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_219_p3),32));
    zext_ln1057_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_fu_289_p3),32));
    zext_ln414_4_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_5_fu_553_p3),32));
    zext_ln414_5_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_4_fu_639_p3),32));
    zext_ln414_6_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_4_reg_846),32));
    zext_ln414_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_611_p2),32));
    zext_ln674_5_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_9_reg_820),32));
    zext_ln674_6_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_2_fu_505_p2),32));
    zext_ln674_7_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_10_fu_362_p3),32));
    zext_ln674_8_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_14_reg_800),32));
    zext_ln674_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_7_fu_458_p3),32));
end behav;
