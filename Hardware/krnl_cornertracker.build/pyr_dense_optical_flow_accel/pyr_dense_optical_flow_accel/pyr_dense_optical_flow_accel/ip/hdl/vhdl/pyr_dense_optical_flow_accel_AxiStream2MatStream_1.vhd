-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_dense_optical_flow_accel_AxiStream2MatStream_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    current_img_mat_434_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    current_img_mat_434_full_n : IN STD_LOGIC;
    current_img_mat_434_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC );
end;


architecture behav of pyr_dense_optical_flow_accel_AxiStream2MatStream_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1038_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_img_mat_434_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln1038_reg_781_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal j_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (30 downto 0);
    signal rows_2_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_bound_per_npc_2_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_blk_width_1_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_i_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_i_fu_192_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub2_i_reg_771 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1057_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1057_reg_776 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1038_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op85_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1038_fu_213_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal rem_load_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal bLast_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_bits_per_clock_fu_227_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xf_bits_per_clock_reg_806 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1049_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_811_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_7_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_7_reg_820 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_3_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_3_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1050_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1051_fu_399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1051_reg_835 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_2_fu_474_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_2_reg_840 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln414_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_544_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_reg_856 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_fu_547_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_reg_861 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_fu_573_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_reg_866 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln414_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_24_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln358_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_1_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal last_blk_width_cast1_i_fu_180_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1027_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptr_width_minus_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1044_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1045_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1061_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_fu_297_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1057_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1057_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_1_fu_318_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln674_2_fu_322_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_4_fu_336_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_6_fu_348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_326_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_5_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_3_fu_354_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_5_fu_370_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_4_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_3_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_402_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln674_fu_418_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln674_fu_432_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_1_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_422_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_2_fu_466_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_1_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1044_1_fu_291_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1054_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1054_fu_504_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1054_1_fu_500_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_3_fu_507_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln674_1_fu_513_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_2_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_2_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_23_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1054_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_1_fu_551_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_fu_557_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_2_fu_565_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Repl2_2_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_1_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_4_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_4_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_1_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_1_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_fu_631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln414_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_s_fu_627_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_fu_640_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_22_fu_646_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_1_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_2_fu_664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_3_fu_668_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_1_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_1_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln414_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_3_fu_680_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_1_fu_710_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_2_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U58 : component pyr_dense_optical_flow_accel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cols_bound_per_npc_2_reg_749,
        din1 => rows_2_reg_744,
        dout => bound_fu_183_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_1))) then 
                i_reg_144 <= add_ln1038_fu_213_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_144 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_1))) then 
                j_reg_133 <= j_2_fu_283_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_811 = ap_const_lv1_1) and (icmp_ln1038_reg_781 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_s_fu_98 <= ldata1_dout;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    rem_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_1))) then 
                rem_fu_94 <= rem_1_fu_266_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_1))) then 
                rem_fu_94 <= rem_2_fu_255_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln1057_reg_776 <= add_ln1057_fu_198_p2;
                bound_reg_761 <= bound_fu_183_p2;
                sub2_i_reg_771 <= sub2_i_fu_192_p2;
                sub_i_reg_766 <= sub_i_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_1))) then
                bLast_reg_801 <= bLast_fu_222_p2;
                icmp_ln1049_reg_811 <= icmp_ln1049_fu_249_p2;
                rem_load_reg_790 <= rem_fu_94;
                xf_bits_per_clock_reg_806 <= xf_bits_per_clock_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_bound_per_npc_2_reg_749 <= cols_bound_per_npc_dout;
                last_blk_width_1_reg_755 <= last_blk_width_dout;
                rows_2_reg_744 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1038_reg_781 <= icmp_ln1038_fu_208_p2;
                icmp_ln1038_reg_781_pp0_iter1_reg <= icmp_ln1038_reg_781;
                icmp_ln1049_reg_811_pp0_iter1_reg <= icmp_ln1049_reg_811;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_811 = ap_const_lv1_1) and (icmp_ln1038_reg_781 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1050_reg_830 <= icmp_ln1050_fu_394_p2;
                icmp_ln414_reg_850 <= icmp_ln414_fu_539_p2;
                lshr_ln674_reg_845 <= lshr_ln674_fu_484_p2;
                shl_ln414_reg_871 <= shl_ln414_fu_583_p2;
                sub_ln414_2_reg_866 <= sub_ln414_2_fu_573_p2;
                sub_ln674_2_reg_840 <= sub_ln674_2_fu_474_p2;
                trunc_ln1051_reg_835 <= trunc_ln1051_fu_399_p1;
                trunc_ln414_1_reg_861 <= trunc_ln414_1_fu_547_p1;
                trunc_ln414_reg_856 <= trunc_ln414_fu_544_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_811 = ap_const_lv1_0) and (icmp_ln1038_reg_781 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln674_3_reg_825 <= lshr_ln674_3_fu_388_p2;
                sub_ln674_7_reg_820 <= sub_ln674_7_fu_378_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_fu_208_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_208_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1038_fu_213_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv31_1));
    add_ln1054_fu_490_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(zext_ln1044_1_fu_291_p1));
    add_ln1057_fu_198_p2 <= std_logic_vector(unsigned(last_blk_width_cast1_i_fu_180_p1) + unsigned(ap_const_lv6_1F));
    add_ln1061_fu_277_p2 <= std_logic_vector(unsigned(j_reg_133) + unsigned(ap_const_lv32_1));
    add_ln674_1_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) + unsigned(sub_ln674_3_fu_507_p2));
    add_ln674_fu_432_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(trunc_ln674_fu_418_p1));
    and_ln414_1_fu_710_p2 <= (xor_ln414_fu_704_p2 and p_Val2_8_fu_652_p3);
    and_ln414_2_fu_716_p2 <= (select_ln414_3_fu_680_p3 and and_ln414_fu_698_p2);
    and_ln414_fu_698_p2 <= (shl_ln414_1_fu_686_p2 and lshr_ln414_1_fu_692_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, current_img_mat_434_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_781_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (current_img_mat_434_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, current_img_mat_434_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_781_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (current_img_mat_434_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, current_img_mat_434_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_781_pp0_iter1_reg, ap_predicate_op85_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (current_img_mat_434_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(ldata1_empty_n, ap_predicate_op85_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(current_img_mat_434_full_n, icmp_ln1038_reg_781_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (current_img_mat_434_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1038_fu_208_p2)
    begin
        if ((icmp_ln1038_fu_208_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_158_p4_assign_proc : process(icmp_ln1038_reg_781_pp0_iter1_reg, icmp_ln1049_reg_811_pp0_iter1_reg, p_Result_24_fu_722_p2, ap_phi_reg_pp0_iter2_empty_reg_155, trunc_ln358_fu_608_p1)
    begin
        if ((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1)) then
            if ((icmp_ln1049_reg_811_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_158_p4 <= trunc_ln358_fu_608_p1;
            elsif ((icmp_ln1049_reg_811_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_158_p4 <= p_Result_24_fu_722_p2;
            else 
                ap_phi_mux_empty_phi_fu_158_p4 <= ap_phi_reg_pp0_iter2_empty_reg_155;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_158_p4 <= ap_phi_reg_pp0_iter2_empty_reg_155;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_155 <= "XXXXXXXX";

    ap_predicate_op85_read_state4_assign_proc : process(icmp_ln1038_reg_781, icmp_ln1049_reg_811)
    begin
                ap_predicate_op85_read_state4 <= ((icmp_ln1049_reg_811 = ap_const_lv1_1) and (icmp_ln1038_reg_781 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_222_p2 <= "1" when (j_reg_133 = sub_i_reg_766) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;


    current_img_mat_434_blk_n_assign_proc : process(current_img_mat_434_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_781_pp0_iter1_reg)
    begin
        if (((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            current_img_mat_434_blk_n <= current_img_mat_434_full_n;
        else 
            current_img_mat_434_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    current_img_mat_434_din <= ap_phi_mux_empty_phi_fu_158_p4;

    current_img_mat_434_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1038_reg_781_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1038_reg_781_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            current_img_mat_434_write <= ap_const_logic_1;
        else 
            current_img_mat_434_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(rem_load_reg_790));
    icmp_ln1038_fu_208_p2 <= "1" when (signed(zext_ln1027_fu_204_p1) < signed(bound_reg_761)) else "0";
    icmp_ln1049_fu_249_p2 <= "1" when (signed(rem_fu_94) < signed(zext_ln1044_fu_234_p1)) else "0";
    icmp_ln1050_fu_394_p2 <= "1" when (rem_load_reg_790 = ap_const_lv32_0) else "0";
    icmp_ln414_fu_539_p2 <= "1" when (unsigned(rem_load_reg_790) > unsigned(sext_ln1054_fu_496_p1)) else "0";
    icmp_ln674_1_fu_312_p2 <= "1" when (unsigned(grp_fu_165_p2) > unsigned(sub_ln1057_fu_307_p2)) else "0";
    icmp_ln674_fu_412_p2 <= "0" when (tmp_fu_402_p4 = ap_const_lv27_0) else "1";
    j_2_fu_283_p3 <= 
        ap_const_lv32_0 when (bLast_fu_222_p2(0) = '1') else 
        add_ln1061_fu_277_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last_blk_width_cast1_i_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_1_reg_755),6));

    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1038_reg_781, icmp_ln1049_reg_811)
    begin
        if (((icmp_ln1049_reg_811 = ap_const_lv1_1) and (icmp_ln1038_reg_781 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op85_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op85_read_state4 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln414_1_fu_692_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_3_fu_668_p1(8-1 downto 0)))));
    lshr_ln414_fu_640_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_fu_636_p1(8-1 downto 0)))));
    lshr_ln674_1_fu_616_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_1_fu_613_p1(31-1 downto 0)))));
    lshr_ln674_2_fu_523_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_2_fu_519_p1(31-1 downto 0)))));
    lshr_ln674_3_fu_388_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_362_p3),to_integer(unsigned('0' & zext_ln674_3_fu_384_p1(31-1 downto 0)))));
    lshr_ln674_4_fu_597_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_4_fu_594_p1(31-1 downto 0)))));
    lshr_ln674_fu_484_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_458_p3),to_integer(unsigned('0' & zext_ln674_fu_480_p1(31-1 downto 0)))));
    p_Repl2_2_fu_535_p1 <= p_Result_23_fu_529_p2(8 - 1 downto 0);
    p_Repl2_s_fu_627_p1 <= p_Result_s_fu_622_p2(8 - 1 downto 0);
    p_Result_22_fu_646_p2 <= (p_Repl2_s_fu_627_p1 and lshr_ln414_fu_640_p2);
    p_Result_23_fu_529_p2 <= (lshr_ln674_2_fu_523_p2 and ldata1_dout);
    p_Result_24_fu_722_p2 <= (and_ln414_2_fu_716_p2 or and_ln414_1_fu_710_p2);
    p_Result_25_fu_603_p2 <= (lshr_ln674_4_fu_597_p2 and lshr_ln674_3_reg_825);
    p_Result_s_fu_622_p2 <= (lshr_ln674_reg_845 and lshr_ln674_1_fu_616_p2);
    p_Val2_8_fu_652_p3 <= 
        ap_const_lv8_0 when (icmp_ln1050_reg_830(0) = '1') else 
        p_Result_22_fu_646_p2;
    ptr_width_minus_fu_238_p3 <= 
        sub2_i_reg_771 when (bLast_fu_222_p2(0) = '1') else 
        ap_const_lv6_18;
    rem_1_fu_266_p2 <= std_logic_vector(unsigned(rem_fu_94) + unsigned(zext_ln1045_fu_245_p1));
    rem_2_fu_255_p2 <= std_logic_vector(unsigned(rem_fu_94) - unsigned(zext_ln1044_fu_234_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1057_fu_297_p3 <= 
        add_ln1057_reg_776 when (bLast_reg_801(0) = '1') else 
        ap_const_lv6_27;
    select_ln414_1_fu_659_p3 <= 
        trunc_ln414_1_reg_861 when (icmp_ln414_reg_850(0) = '1') else 
        trunc_ln414_reg_856;
    select_ln414_2_fu_565_p3 <= 
        sub_ln414_1_fu_551_p2 when (icmp_ln414_fu_539_p2(0) = '1') else 
        trunc_ln414_fu_544_p1;
    select_ln414_3_fu_680_p3 <= 
        tmp_22_fu_671_p4 when (icmp_ln414_reg_850(0) = '1') else 
        shl_ln414_reg_871;
    select_ln414_fu_557_p3 <= 
        trunc_ln414_fu_544_p1 when (icmp_ln414_fu_539_p2(0) = '1') else 
        trunc_ln414_1_fu_547_p1;
    select_ln674_1_fu_458_p3 <= 
        tmp_21_fu_422_p4 when (icmp_ln674_fu_412_p2(0) = '1') else 
        p_Val2_s_fu_98;
    select_ln674_2_fu_466_p3 <= 
        sub_ln674_fu_438_p2 when (icmp_ln674_fu_412_p2(0) = '1') else 
        trunc_ln674_fu_418_p1;
    select_ln674_3_fu_354_p3 <= 
        sub_ln674_4_fu_336_p2 when (icmp_ln674_1_fu_312_p2(0) = '1') else 
        sub_ln674_6_fu_348_p2;
    select_ln674_4_fu_362_p3 <= 
        tmp_23_fu_326_p4 when (icmp_ln674_1_fu_312_p2(0) = '1') else 
        p_Val2_s_fu_98;
    select_ln674_5_fu_370_p3 <= 
        sub_ln674_5_fu_342_p2 when (icmp_ln674_1_fu_312_p2(0) = '1') else 
        trunc_ln674_1_fu_318_p1;
    select_ln674_fu_450_p3 <= 
        add_ln674_fu_432_p2 when (icmp_ln674_fu_412_p2(0) = '1') else 
        sub_ln674_1_fu_444_p2;
        sext_ln1054_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_490_p2),6));

        sext_ln1054_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_490_p2),32));

    shl_ln414_1_fu_686_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_2_fu_664_p1(8-1 downto 0)))));
    shl_ln414_fu_583_p2 <= std_logic_vector(shift_left(unsigned(p_Repl2_2_fu_535_p1),to_integer(unsigned('0' & zext_ln414_1_fu_579_p1(8-1 downto 0)))));
    sub2_i_fu_192_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(last_blk_width_cast1_i_fu_180_p1));
    sub_i_fu_187_p2 <= std_logic_vector(signed(cols_bound_per_npc_2_reg_749) + signed(ap_const_lv32_FFFFFFFF));
    sub_ln1057_fu_307_p2 <= std_logic_vector(unsigned(zext_ln1057_fu_303_p1) - unsigned(rem_load_reg_790));
    sub_ln414_1_fu_551_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln414_fu_544_p1));
    sub_ln414_2_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln414_fu_557_p3));
    sub_ln414_fu_631_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln1051_reg_835));
    sub_ln674_1_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_418_p1));
    sub_ln674_2_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_fu_450_p3));
    sub_ln674_3_fu_507_p2 <= std_logic_vector(unsigned(trunc_ln1054_fu_504_p1) - unsigned(sext_ln1054_1_fu_500_p1));
    sub_ln674_4_fu_336_p2 <= std_logic_vector(unsigned(trunc_ln674_1_fu_318_p1) - unsigned(trunc_ln674_2_fu_322_p1));
    sub_ln674_5_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_1_fu_318_p1));
    sub_ln674_6_fu_348_p2 <= std_logic_vector(unsigned(trunc_ln674_2_fu_322_p1) - unsigned(trunc_ln674_1_fu_318_p1));
    sub_ln674_7_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_3_fu_354_p3));
    sub_ln674_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_418_p1));
    
    tmp_21_fu_422_p4_proc : process(p_Val2_s_fu_98)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_21_fu_422_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_98;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_21_fu_422_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_21_fu_422_p4_i) := p_Val2_s_fu_98(32-1-tmp_21_fu_422_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_21_fu_422_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_22_fu_671_p4_proc : process(shl_ln414_reg_871)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_22_fu_671_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln414_reg_871;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_22_fu_671_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_22_fu_671_p4_i) := shl_ln414_reg_871(8-1-tmp_22_fu_671_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_22_fu_671_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_23_fu_326_p4_proc : process(p_Val2_s_fu_98)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_23_fu_326_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_98;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_23_fu_326_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_23_fu_326_p4_i) := p_Val2_s_fu_98(32-1-tmp_23_fu_326_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_23_fu_326_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_402_p4 <= grp_fu_165_p2(31 downto 5);
    trunc_ln1051_fu_399_p1 <= rem_load_reg_790(4 - 1 downto 0);
    trunc_ln1054_fu_504_p1 <= rem_load_reg_790(6 - 1 downto 0);
    trunc_ln358_fu_608_p1 <= p_Result_25_fu_603_p2(8 - 1 downto 0);
    trunc_ln414_1_fu_547_p1 <= add_ln1054_fu_490_p2(4 - 1 downto 0);
    trunc_ln414_fu_544_p1 <= rem_load_reg_790(4 - 1 downto 0);
    trunc_ln674_1_fu_318_p1 <= grp_fu_165_p2(6 - 1 downto 0);
    trunc_ln674_2_fu_322_p1 <= sub_ln1057_fu_307_p2(6 - 1 downto 0);
    trunc_ln674_fu_418_p1 <= grp_fu_165_p2(6 - 1 downto 0);
    xf_bits_per_clock_fu_227_p3 <= 
        last_blk_width_1_reg_755 when (bLast_fu_222_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln414_fu_704_p2 <= (ap_const_lv8_FF xor and_ln414_fu_698_p2);
    zext_ln1027_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_144),32));
    zext_ln1044_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_806),5));
    zext_ln1044_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_227_p3),32));
    zext_ln1045_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_238_p3),32));
    zext_ln1057_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_fu_297_p3),32));
    zext_ln414_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_565_p3),8));
    zext_ln414_2_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_659_p3),8));
    zext_ln414_3_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_2_reg_866),8));
    zext_ln414_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_631_p2),8));
    zext_ln674_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_reg_840),32));
    zext_ln674_2_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_1_fu_513_p2),32));
    zext_ln674_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_370_p3),32));
    zext_ln674_4_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_reg_820),32));
    zext_ln674_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_466_p3),32));
end behav;
