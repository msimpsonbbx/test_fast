-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cornerupdate_accel is
generic (
    C_M_AXI_GMEM7_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM7_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM7_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM8_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM8_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM9_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM9_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM7_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM7_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM7_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM8_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM8_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM8_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM9_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM9_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM9_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem7_AWVALID : OUT STD_LOGIC;
    m_axi_gmem7_AWREADY : IN STD_LOGIC;
    m_axi_gmem7_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem7_WVALID : OUT STD_LOGIC;
    m_axi_gmem7_WREADY : IN STD_LOGIC;
    m_axi_gmem7_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem7_WLAST : OUT STD_LOGIC;
    m_axi_gmem7_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_WUSER_WIDTH-1 downto 0);
    m_axi_gmem7_ARVALID : OUT STD_LOGIC;
    m_axi_gmem7_ARREADY : IN STD_LOGIC;
    m_axi_gmem7_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RVALID : IN STD_LOGIC;
    m_axi_gmem7_RREADY : OUT STD_LOGIC;
    m_axi_gmem7_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_RLAST : IN STD_LOGIC;
    m_axi_gmem7_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_RUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BVALID : IN STD_LOGIC;
    m_axi_gmem7_BREADY : OUT STD_LOGIC;
    m_axi_gmem7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_BUSER_WIDTH-1 downto 0);
    m_axi_gmem8_AWVALID : OUT STD_LOGIC;
    m_axi_gmem8_AWREADY : IN STD_LOGIC;
    m_axi_gmem8_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem8_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem8_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem8_WVALID : OUT STD_LOGIC;
    m_axi_gmem8_WREADY : IN STD_LOGIC;
    m_axi_gmem8_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH-1 downto 0);
    m_axi_gmem8_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem8_WLAST : OUT STD_LOGIC;
    m_axi_gmem8_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_WUSER_WIDTH-1 downto 0);
    m_axi_gmem8_ARVALID : OUT STD_LOGIC;
    m_axi_gmem8_ARREADY : IN STD_LOGIC;
    m_axi_gmem8_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem8_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem8_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem8_RVALID : IN STD_LOGIC;
    m_axi_gmem8_RREADY : OUT STD_LOGIC;
    m_axi_gmem8_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH-1 downto 0);
    m_axi_gmem8_RLAST : IN STD_LOGIC;
    m_axi_gmem8_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_RUSER_WIDTH-1 downto 0);
    m_axi_gmem8_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_BVALID : IN STD_LOGIC;
    m_axi_gmem8_BREADY : OUT STD_LOGIC;
    m_axi_gmem8_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_BUSER_WIDTH-1 downto 0);
    m_axi_gmem9_AWVALID : OUT STD_LOGIC;
    m_axi_gmem9_AWREADY : IN STD_LOGIC;
    m_axi_gmem9_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem9_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem9_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem9_WVALID : OUT STD_LOGIC;
    m_axi_gmem9_WREADY : IN STD_LOGIC;
    m_axi_gmem9_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH-1 downto 0);
    m_axi_gmem9_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem9_WLAST : OUT STD_LOGIC;
    m_axi_gmem9_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_WUSER_WIDTH-1 downto 0);
    m_axi_gmem9_ARVALID : OUT STD_LOGIC;
    m_axi_gmem9_ARREADY : IN STD_LOGIC;
    m_axi_gmem9_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem9_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem9_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem9_RVALID : IN STD_LOGIC;
    m_axi_gmem9_RREADY : OUT STD_LOGIC;
    m_axi_gmem9_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH-1 downto 0);
    m_axi_gmem9_RLAST : IN STD_LOGIC;
    m_axi_gmem9_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_RUSER_WIDTH-1 downto 0);
    m_axi_gmem9_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_BVALID : IN STD_LOGIC;
    m_axi_gmem9_BREADY : OUT STD_LOGIC;
    m_axi_gmem9_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cornerupdate_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cornerupdate_accel_cornerupdate_accel,hls_ip_2020_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.867000,HLS_SYN_LAT=30221,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=4412,HLS_SYN_LUT=4815,HLS_VERSION=2020_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal list_fix : STD_LOGIC_VECTOR (63 downto 0);
    signal list : STD_LOGIC_VECTOR (63 downto 0);
    signal nCorners : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_vectors : STD_LOGIC_VECTOR (63 downto 0);
    signal harris_flag : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem7_AWVALID : STD_LOGIC;
    signal gmem7_AWREADY : STD_LOGIC;
    signal gmem7_WVALID : STD_LOGIC;
    signal gmem7_WREADY : STD_LOGIC;
    signal gmem7_ARVALID : STD_LOGIC;
    signal gmem7_ARREADY : STD_LOGIC;
    signal gmem7_RVALID : STD_LOGIC;
    signal gmem7_RREADY : STD_LOGIC;
    signal gmem7_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem7_RLAST : STD_LOGIC;
    signal gmem7_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem7_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem7_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem7_BVALID : STD_LOGIC;
    signal gmem7_BREADY : STD_LOGIC;
    signal gmem7_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem7_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem7_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem8_AWVALID : STD_LOGIC;
    signal gmem8_AWREADY : STD_LOGIC;
    signal gmem8_WVALID : STD_LOGIC;
    signal gmem8_WREADY : STD_LOGIC;
    signal gmem8_ARVALID : STD_LOGIC;
    signal gmem8_ARREADY : STD_LOGIC;
    signal gmem8_RVALID : STD_LOGIC;
    signal gmem8_RREADY : STD_LOGIC;
    signal gmem8_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem8_RLAST : STD_LOGIC;
    signal gmem8_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem8_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem8_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem8_BVALID : STD_LOGIC;
    signal gmem8_BREADY : STD_LOGIC;
    signal gmem8_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem8_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem8_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem9_AWREADY : STD_LOGIC;
    signal gmem9_WREADY : STD_LOGIC;
    signal gmem9_ARVALID : STD_LOGIC;
    signal gmem9_ARREADY : STD_LOGIC;
    signal gmem9_RVALID : STD_LOGIC;
    signal gmem9_RREADY : STD_LOGIC;
    signal gmem9_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem9_RLAST : STD_LOGIC;
    signal gmem9_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem9_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem9_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem9_BVALID : STD_LOGIC;
    signal gmem9_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem9_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem9_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_vectors_read_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal list_read_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal list_fix_read_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_133_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_168 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_30_fu_138_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_30_reg_173 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_31_fu_143_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_reg_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_idle : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_ready : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WLAST : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_RREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_BREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WLAST : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_RREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_BREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WLAST : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARVALID : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_RREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_BREADY : STD_LOGIC;
    signal grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call37 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component cornerupdate_accel_cornerUpdate_10000u_3u_1080u_1920u_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem7_AWVALID : OUT STD_LOGIC;
        m_axi_gmem7_AWREADY : IN STD_LOGIC;
        m_axi_gmem7_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem7_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_WVALID : OUT STD_LOGIC;
        m_axi_gmem7_WREADY : IN STD_LOGIC;
        m_axi_gmem7_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem7_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem7_WLAST : OUT STD_LOGIC;
        m_axi_gmem7_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_ARVALID : OUT STD_LOGIC;
        m_axi_gmem7_ARREADY : IN STD_LOGIC;
        m_axi_gmem7_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem7_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_RVALID : IN STD_LOGIC;
        m_axi_gmem7_RREADY : OUT STD_LOGIC;
        m_axi_gmem7_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem7_RLAST : IN STD_LOGIC;
        m_axi_gmem7_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_BVALID : IN STD_LOGIC;
        m_axi_gmem7_BREADY : OUT STD_LOGIC;
        m_axi_gmem7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_AWVALID : OUT STD_LOGIC;
        m_axi_gmem8_AWREADY : IN STD_LOGIC;
        m_axi_gmem8_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem8_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem8_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem8_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem8_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_WVALID : OUT STD_LOGIC;
        m_axi_gmem8_WREADY : IN STD_LOGIC;
        m_axi_gmem8_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem8_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_WLAST : OUT STD_LOGIC;
        m_axi_gmem8_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_ARVALID : OUT STD_LOGIC;
        m_axi_gmem8_ARREADY : IN STD_LOGIC;
        m_axi_gmem8_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem8_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem8_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem8_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem8_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem8_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_RVALID : IN STD_LOGIC;
        m_axi_gmem8_RREADY : OUT STD_LOGIC;
        m_axi_gmem8_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem8_RLAST : IN STD_LOGIC;
        m_axi_gmem8_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_BVALID : IN STD_LOGIC;
        m_axi_gmem8_BREADY : OUT STD_LOGIC;
        m_axi_gmem8_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem8_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem8_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_AWVALID : OUT STD_LOGIC;
        m_axi_gmem9_AWREADY : IN STD_LOGIC;
        m_axi_gmem9_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem9_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem9_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem9_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem9_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_WVALID : OUT STD_LOGIC;
        m_axi_gmem9_WREADY : IN STD_LOGIC;
        m_axi_gmem9_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem9_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_WLAST : OUT STD_LOGIC;
        m_axi_gmem9_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_ARVALID : OUT STD_LOGIC;
        m_axi_gmem9_ARREADY : IN STD_LOGIC;
        m_axi_gmem9_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem9_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem9_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem9_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem9_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem9_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_RVALID : IN STD_LOGIC;
        m_axi_gmem9_RREADY : OUT STD_LOGIC;
        m_axi_gmem9_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem9_RLAST : IN STD_LOGIC;
        m_axi_gmem9_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_BVALID : IN STD_LOGIC;
        m_axi_gmem9_BREADY : OUT STD_LOGIC;
        m_axi_gmem9_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem9_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem9_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        list_fix : IN STD_LOGIC_VECTOR (63 downto 0);
        list : IN STD_LOGIC_VECTOR (63 downto 0);
        nCorners : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (10 downto 0);
        flow_vectors_4 : IN STD_LOGIC_VECTOR (63 downto 0);
        harris_flag : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cornerupdate_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        list_fix : OUT STD_LOGIC_VECTOR (63 downto 0);
        list : OUT STD_LOGIC_VECTOR (63 downto 0);
        nCorners : OUT STD_LOGIC_VECTOR (31 downto 0);
        flow_vectors : OUT STD_LOGIC_VECTOR (63 downto 0);
        harris_flag : OUT STD_LOGIC_VECTOR (31 downto 0);
        flow_rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        flow_cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component cornerupdate_accel_gmem7_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cornerupdate_accel_gmem8_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cornerupdate_accel_gmem9_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component cornerupdate_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        list_fix => list_fix,
        list => list,
        nCorners => nCorners,
        flow_vectors => flow_vectors,
        harris_flag => harris_flag,
        flow_rows => flow_rows,
        flow_cols => flow_cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem7_m_axi_U : component cornerupdate_accel_gmem7_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM7_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM7_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM7_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM7_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM7_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM7_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM7_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM7_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM7_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM7_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM7_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem7_AWVALID,
        AWREADY => m_axi_gmem7_AWREADY,
        AWADDR => m_axi_gmem7_AWADDR,
        AWID => m_axi_gmem7_AWID,
        AWLEN => m_axi_gmem7_AWLEN,
        AWSIZE => m_axi_gmem7_AWSIZE,
        AWBURST => m_axi_gmem7_AWBURST,
        AWLOCK => m_axi_gmem7_AWLOCK,
        AWCACHE => m_axi_gmem7_AWCACHE,
        AWPROT => m_axi_gmem7_AWPROT,
        AWQOS => m_axi_gmem7_AWQOS,
        AWREGION => m_axi_gmem7_AWREGION,
        AWUSER => m_axi_gmem7_AWUSER,
        WVALID => m_axi_gmem7_WVALID,
        WREADY => m_axi_gmem7_WREADY,
        WDATA => m_axi_gmem7_WDATA,
        WSTRB => m_axi_gmem7_WSTRB,
        WLAST => m_axi_gmem7_WLAST,
        WID => m_axi_gmem7_WID,
        WUSER => m_axi_gmem7_WUSER,
        ARVALID => m_axi_gmem7_ARVALID,
        ARREADY => m_axi_gmem7_ARREADY,
        ARADDR => m_axi_gmem7_ARADDR,
        ARID => m_axi_gmem7_ARID,
        ARLEN => m_axi_gmem7_ARLEN,
        ARSIZE => m_axi_gmem7_ARSIZE,
        ARBURST => m_axi_gmem7_ARBURST,
        ARLOCK => m_axi_gmem7_ARLOCK,
        ARCACHE => m_axi_gmem7_ARCACHE,
        ARPROT => m_axi_gmem7_ARPROT,
        ARQOS => m_axi_gmem7_ARQOS,
        ARREGION => m_axi_gmem7_ARREGION,
        ARUSER => m_axi_gmem7_ARUSER,
        RVALID => m_axi_gmem7_RVALID,
        RREADY => m_axi_gmem7_RREADY,
        RDATA => m_axi_gmem7_RDATA,
        RLAST => m_axi_gmem7_RLAST,
        RID => m_axi_gmem7_RID,
        RUSER => m_axi_gmem7_RUSER,
        RRESP => m_axi_gmem7_RRESP,
        BVALID => m_axi_gmem7_BVALID,
        BREADY => m_axi_gmem7_BREADY,
        BRESP => m_axi_gmem7_BRESP,
        BID => m_axi_gmem7_BID,
        BUSER => m_axi_gmem7_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem7_ARVALID,
        I_ARREADY => gmem7_ARREADY,
        I_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARADDR,
        I_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARID,
        I_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLEN,
        I_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARSIZE,
        I_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLOCK,
        I_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARCACHE,
        I_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARQOS,
        I_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARPROT,
        I_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARUSER,
        I_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARBURST,
        I_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARREGION,
        I_RVALID => gmem7_RVALID,
        I_RREADY => gmem7_RREADY,
        I_RDATA => gmem7_RDATA,
        I_RID => gmem7_RID,
        I_RUSER => gmem7_RUSER,
        I_RRESP => gmem7_RRESP,
        I_RLAST => gmem7_RLAST,
        I_AWVALID => gmem7_AWVALID,
        I_AWREADY => gmem7_AWREADY,
        I_AWADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWADDR,
        I_AWID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWID,
        I_AWLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLEN,
        I_AWSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWSIZE,
        I_AWLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLOCK,
        I_AWCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWCACHE,
        I_AWQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWQOS,
        I_AWPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWPROT,
        I_AWUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWUSER,
        I_AWBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWBURST,
        I_AWREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWREGION,
        I_WVALID => gmem7_WVALID,
        I_WREADY => gmem7_WREADY,
        I_WDATA => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WDATA,
        I_WID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WID,
        I_WUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WUSER,
        I_WLAST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WLAST,
        I_WSTRB => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WSTRB,
        I_BVALID => gmem7_BVALID,
        I_BREADY => gmem7_BREADY,
        I_BRESP => gmem7_BRESP,
        I_BID => gmem7_BID,
        I_BUSER => gmem7_BUSER);

    gmem8_m_axi_U : component cornerupdate_accel_gmem8_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM8_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM8_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM8_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM8_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM8_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM8_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM8_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM8_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM8_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM8_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM8_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem8_AWVALID,
        AWREADY => m_axi_gmem8_AWREADY,
        AWADDR => m_axi_gmem8_AWADDR,
        AWID => m_axi_gmem8_AWID,
        AWLEN => m_axi_gmem8_AWLEN,
        AWSIZE => m_axi_gmem8_AWSIZE,
        AWBURST => m_axi_gmem8_AWBURST,
        AWLOCK => m_axi_gmem8_AWLOCK,
        AWCACHE => m_axi_gmem8_AWCACHE,
        AWPROT => m_axi_gmem8_AWPROT,
        AWQOS => m_axi_gmem8_AWQOS,
        AWREGION => m_axi_gmem8_AWREGION,
        AWUSER => m_axi_gmem8_AWUSER,
        WVALID => m_axi_gmem8_WVALID,
        WREADY => m_axi_gmem8_WREADY,
        WDATA => m_axi_gmem8_WDATA,
        WSTRB => m_axi_gmem8_WSTRB,
        WLAST => m_axi_gmem8_WLAST,
        WID => m_axi_gmem8_WID,
        WUSER => m_axi_gmem8_WUSER,
        ARVALID => m_axi_gmem8_ARVALID,
        ARREADY => m_axi_gmem8_ARREADY,
        ARADDR => m_axi_gmem8_ARADDR,
        ARID => m_axi_gmem8_ARID,
        ARLEN => m_axi_gmem8_ARLEN,
        ARSIZE => m_axi_gmem8_ARSIZE,
        ARBURST => m_axi_gmem8_ARBURST,
        ARLOCK => m_axi_gmem8_ARLOCK,
        ARCACHE => m_axi_gmem8_ARCACHE,
        ARPROT => m_axi_gmem8_ARPROT,
        ARQOS => m_axi_gmem8_ARQOS,
        ARREGION => m_axi_gmem8_ARREGION,
        ARUSER => m_axi_gmem8_ARUSER,
        RVALID => m_axi_gmem8_RVALID,
        RREADY => m_axi_gmem8_RREADY,
        RDATA => m_axi_gmem8_RDATA,
        RLAST => m_axi_gmem8_RLAST,
        RID => m_axi_gmem8_RID,
        RUSER => m_axi_gmem8_RUSER,
        RRESP => m_axi_gmem8_RRESP,
        BVALID => m_axi_gmem8_BVALID,
        BREADY => m_axi_gmem8_BREADY,
        BRESP => m_axi_gmem8_BRESP,
        BID => m_axi_gmem8_BID,
        BUSER => m_axi_gmem8_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem8_ARVALID,
        I_ARREADY => gmem8_ARREADY,
        I_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARADDR,
        I_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARID,
        I_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLEN,
        I_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARSIZE,
        I_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLOCK,
        I_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARCACHE,
        I_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARQOS,
        I_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARPROT,
        I_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARUSER,
        I_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARBURST,
        I_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARREGION,
        I_RVALID => gmem8_RVALID,
        I_RREADY => gmem8_RREADY,
        I_RDATA => gmem8_RDATA,
        I_RID => gmem8_RID,
        I_RUSER => gmem8_RUSER,
        I_RRESP => gmem8_RRESP,
        I_RLAST => gmem8_RLAST,
        I_AWVALID => gmem8_AWVALID,
        I_AWREADY => gmem8_AWREADY,
        I_AWADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWADDR,
        I_AWID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWID,
        I_AWLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLEN,
        I_AWSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWSIZE,
        I_AWLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLOCK,
        I_AWCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWCACHE,
        I_AWQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWQOS,
        I_AWPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWPROT,
        I_AWUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWUSER,
        I_AWBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWBURST,
        I_AWREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWREGION,
        I_WVALID => gmem8_WVALID,
        I_WREADY => gmem8_WREADY,
        I_WDATA => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WDATA,
        I_WID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WID,
        I_WUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WUSER,
        I_WLAST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WLAST,
        I_WSTRB => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WSTRB,
        I_BVALID => gmem8_BVALID,
        I_BREADY => gmem8_BREADY,
        I_BRESP => gmem8_BRESP,
        I_BID => gmem8_BID,
        I_BUSER => gmem8_BUSER);

    gmem9_m_axi_U : component cornerupdate_accel_gmem9_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM9_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM9_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM9_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM9_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM9_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM9_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM9_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM9_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM9_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM9_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM9_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem9_AWVALID,
        AWREADY => m_axi_gmem9_AWREADY,
        AWADDR => m_axi_gmem9_AWADDR,
        AWID => m_axi_gmem9_AWID,
        AWLEN => m_axi_gmem9_AWLEN,
        AWSIZE => m_axi_gmem9_AWSIZE,
        AWBURST => m_axi_gmem9_AWBURST,
        AWLOCK => m_axi_gmem9_AWLOCK,
        AWCACHE => m_axi_gmem9_AWCACHE,
        AWPROT => m_axi_gmem9_AWPROT,
        AWQOS => m_axi_gmem9_AWQOS,
        AWREGION => m_axi_gmem9_AWREGION,
        AWUSER => m_axi_gmem9_AWUSER,
        WVALID => m_axi_gmem9_WVALID,
        WREADY => m_axi_gmem9_WREADY,
        WDATA => m_axi_gmem9_WDATA,
        WSTRB => m_axi_gmem9_WSTRB,
        WLAST => m_axi_gmem9_WLAST,
        WID => m_axi_gmem9_WID,
        WUSER => m_axi_gmem9_WUSER,
        ARVALID => m_axi_gmem9_ARVALID,
        ARREADY => m_axi_gmem9_ARREADY,
        ARADDR => m_axi_gmem9_ARADDR,
        ARID => m_axi_gmem9_ARID,
        ARLEN => m_axi_gmem9_ARLEN,
        ARSIZE => m_axi_gmem9_ARSIZE,
        ARBURST => m_axi_gmem9_ARBURST,
        ARLOCK => m_axi_gmem9_ARLOCK,
        ARCACHE => m_axi_gmem9_ARCACHE,
        ARPROT => m_axi_gmem9_ARPROT,
        ARQOS => m_axi_gmem9_ARQOS,
        ARREGION => m_axi_gmem9_ARREGION,
        ARUSER => m_axi_gmem9_ARUSER,
        RVALID => m_axi_gmem9_RVALID,
        RREADY => m_axi_gmem9_RREADY,
        RDATA => m_axi_gmem9_RDATA,
        RLAST => m_axi_gmem9_RLAST,
        RID => m_axi_gmem9_RID,
        RUSER => m_axi_gmem9_RUSER,
        RRESP => m_axi_gmem9_RRESP,
        BVALID => m_axi_gmem9_BVALID,
        BREADY => m_axi_gmem9_BREADY,
        BRESP => m_axi_gmem9_BRESP,
        BID => m_axi_gmem9_BID,
        BUSER => m_axi_gmem9_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem9_ARVALID,
        I_ARREADY => gmem9_ARREADY,
        I_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARADDR,
        I_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARID,
        I_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLEN,
        I_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARSIZE,
        I_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLOCK,
        I_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARCACHE,
        I_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARQOS,
        I_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARPROT,
        I_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARUSER,
        I_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARBURST,
        I_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARREGION,
        I_RVALID => gmem9_RVALID,
        I_RREADY => gmem9_RREADY,
        I_RDATA => gmem9_RDATA,
        I_RID => gmem9_RID,
        I_RUSER => gmem9_RUSER,
        I_RRESP => gmem9_RRESP,
        I_RLAST => gmem9_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem9_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem9_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem9_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem9_BRESP,
        I_BID => gmem9_BID,
        I_BUSER => gmem9_BUSER);

    grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112 : component cornerupdate_accel_cornerUpdate_10000u_3u_1080u_1920u_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start,
        ap_done => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done,
        ap_idle => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_idle,
        ap_ready => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_ready,
        m_axi_gmem7_AWVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWVALID,
        m_axi_gmem7_AWREADY => gmem7_AWREADY,
        m_axi_gmem7_AWADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWADDR,
        m_axi_gmem7_AWID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWID,
        m_axi_gmem7_AWLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLEN,
        m_axi_gmem7_AWSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWSIZE,
        m_axi_gmem7_AWBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWBURST,
        m_axi_gmem7_AWLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWLOCK,
        m_axi_gmem7_AWCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWCACHE,
        m_axi_gmem7_AWPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWPROT,
        m_axi_gmem7_AWQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWQOS,
        m_axi_gmem7_AWREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWREGION,
        m_axi_gmem7_AWUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWUSER,
        m_axi_gmem7_WVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WVALID,
        m_axi_gmem7_WREADY => gmem7_WREADY,
        m_axi_gmem7_WDATA => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WDATA,
        m_axi_gmem7_WSTRB => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WSTRB,
        m_axi_gmem7_WLAST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WLAST,
        m_axi_gmem7_WID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WID,
        m_axi_gmem7_WUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WUSER,
        m_axi_gmem7_ARVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARVALID,
        m_axi_gmem7_ARREADY => gmem7_ARREADY,
        m_axi_gmem7_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARADDR,
        m_axi_gmem7_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARID,
        m_axi_gmem7_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLEN,
        m_axi_gmem7_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARSIZE,
        m_axi_gmem7_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARBURST,
        m_axi_gmem7_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARLOCK,
        m_axi_gmem7_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARCACHE,
        m_axi_gmem7_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARPROT,
        m_axi_gmem7_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARQOS,
        m_axi_gmem7_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARREGION,
        m_axi_gmem7_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARUSER,
        m_axi_gmem7_RVALID => gmem7_RVALID,
        m_axi_gmem7_RREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_RREADY,
        m_axi_gmem7_RDATA => gmem7_RDATA,
        m_axi_gmem7_RLAST => gmem7_RLAST,
        m_axi_gmem7_RID => gmem7_RID,
        m_axi_gmem7_RUSER => gmem7_RUSER,
        m_axi_gmem7_RRESP => gmem7_RRESP,
        m_axi_gmem7_BVALID => gmem7_BVALID,
        m_axi_gmem7_BREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_BREADY,
        m_axi_gmem7_BRESP => gmem7_BRESP,
        m_axi_gmem7_BID => gmem7_BID,
        m_axi_gmem7_BUSER => gmem7_BUSER,
        m_axi_gmem8_AWVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWVALID,
        m_axi_gmem8_AWREADY => gmem8_AWREADY,
        m_axi_gmem8_AWADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWADDR,
        m_axi_gmem8_AWID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWID,
        m_axi_gmem8_AWLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLEN,
        m_axi_gmem8_AWSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWSIZE,
        m_axi_gmem8_AWBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWBURST,
        m_axi_gmem8_AWLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWLOCK,
        m_axi_gmem8_AWCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWCACHE,
        m_axi_gmem8_AWPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWPROT,
        m_axi_gmem8_AWQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWQOS,
        m_axi_gmem8_AWREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWREGION,
        m_axi_gmem8_AWUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWUSER,
        m_axi_gmem8_WVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WVALID,
        m_axi_gmem8_WREADY => gmem8_WREADY,
        m_axi_gmem8_WDATA => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WDATA,
        m_axi_gmem8_WSTRB => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WSTRB,
        m_axi_gmem8_WLAST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WLAST,
        m_axi_gmem8_WID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WID,
        m_axi_gmem8_WUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WUSER,
        m_axi_gmem8_ARVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARVALID,
        m_axi_gmem8_ARREADY => gmem8_ARREADY,
        m_axi_gmem8_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARADDR,
        m_axi_gmem8_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARID,
        m_axi_gmem8_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLEN,
        m_axi_gmem8_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARSIZE,
        m_axi_gmem8_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARBURST,
        m_axi_gmem8_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARLOCK,
        m_axi_gmem8_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARCACHE,
        m_axi_gmem8_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARPROT,
        m_axi_gmem8_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARQOS,
        m_axi_gmem8_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARREGION,
        m_axi_gmem8_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARUSER,
        m_axi_gmem8_RVALID => gmem8_RVALID,
        m_axi_gmem8_RREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_RREADY,
        m_axi_gmem8_RDATA => gmem8_RDATA,
        m_axi_gmem8_RLAST => gmem8_RLAST,
        m_axi_gmem8_RID => gmem8_RID,
        m_axi_gmem8_RUSER => gmem8_RUSER,
        m_axi_gmem8_RRESP => gmem8_RRESP,
        m_axi_gmem8_BVALID => gmem8_BVALID,
        m_axi_gmem8_BREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_BREADY,
        m_axi_gmem8_BRESP => gmem8_BRESP,
        m_axi_gmem8_BID => gmem8_BID,
        m_axi_gmem8_BUSER => gmem8_BUSER,
        m_axi_gmem9_AWVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWVALID,
        m_axi_gmem9_AWREADY => ap_const_logic_0,
        m_axi_gmem9_AWADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWADDR,
        m_axi_gmem9_AWID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWID,
        m_axi_gmem9_AWLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWLEN,
        m_axi_gmem9_AWSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWSIZE,
        m_axi_gmem9_AWBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWBURST,
        m_axi_gmem9_AWLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWLOCK,
        m_axi_gmem9_AWCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWCACHE,
        m_axi_gmem9_AWPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWPROT,
        m_axi_gmem9_AWQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWQOS,
        m_axi_gmem9_AWREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWREGION,
        m_axi_gmem9_AWUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_AWUSER,
        m_axi_gmem9_WVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WVALID,
        m_axi_gmem9_WREADY => ap_const_logic_0,
        m_axi_gmem9_WDATA => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WDATA,
        m_axi_gmem9_WSTRB => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WSTRB,
        m_axi_gmem9_WLAST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WLAST,
        m_axi_gmem9_WID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WID,
        m_axi_gmem9_WUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_WUSER,
        m_axi_gmem9_ARVALID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARVALID,
        m_axi_gmem9_ARREADY => gmem9_ARREADY,
        m_axi_gmem9_ARADDR => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARADDR,
        m_axi_gmem9_ARID => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARID,
        m_axi_gmem9_ARLEN => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLEN,
        m_axi_gmem9_ARSIZE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARSIZE,
        m_axi_gmem9_ARBURST => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARBURST,
        m_axi_gmem9_ARLOCK => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARLOCK,
        m_axi_gmem9_ARCACHE => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARCACHE,
        m_axi_gmem9_ARPROT => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARPROT,
        m_axi_gmem9_ARQOS => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARQOS,
        m_axi_gmem9_ARREGION => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARREGION,
        m_axi_gmem9_ARUSER => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARUSER,
        m_axi_gmem9_RVALID => gmem9_RVALID,
        m_axi_gmem9_RREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_RREADY,
        m_axi_gmem9_RDATA => gmem9_RDATA,
        m_axi_gmem9_RLAST => gmem9_RLAST,
        m_axi_gmem9_RID => gmem9_RID,
        m_axi_gmem9_RUSER => gmem9_RUSER,
        m_axi_gmem9_RRESP => gmem9_RRESP,
        m_axi_gmem9_BVALID => ap_const_logic_0,
        m_axi_gmem9_BREADY => grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_BREADY,
        m_axi_gmem9_BRESP => ap_const_lv2_0,
        m_axi_gmem9_BID => ap_const_lv1_0,
        m_axi_gmem9_BUSER => ap_const_lv1_0,
        list_fix => list_fix_read_reg_163,
        list => list_read_reg_158,
        nCorners => nCorners,
        p_read => empty_30_reg_173,
        p_read1 => empty_reg_168,
        flow_vectors_4 => flow_vectors_read_reg_148,
        harris_flag => empty_31_reg_178);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_30_reg_173 <= empty_30_fu_138_p1;
                empty_31_reg_178 <= empty_31_fu_143_p1;
                empty_reg_168 <= empty_fu_133_p1;
                flow_vectors_read_reg_148 <= flow_vectors;
                list_fix_read_reg_163 <= list_fix;
                list_read_reg_158 <= list;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call37_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call37 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_30_fu_138_p1 <= flow_rows(11 - 1 downto 0);
    empty_31_fu_143_p1 <= harris_flag(1 - 1 downto 0);
    empty_fu_133_p1 <= flow_cols(11 - 1 downto 0);

    gmem7_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem7_ARVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_ARVALID;
        else 
            gmem7_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem7_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem7_AWVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_AWVALID;
        else 
            gmem7_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem7_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem7_BREADY <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_BREADY;
        else 
            gmem7_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem7_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem7_RREADY <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_RREADY;
        else 
            gmem7_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem7_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem7_WVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem7_WVALID;
        else 
            gmem7_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem8_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem8_ARVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_ARVALID;
        else 
            gmem8_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem8_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem8_AWVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_AWVALID;
        else 
            gmem8_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem8_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem8_BREADY <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_BREADY;
        else 
            gmem8_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem8_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem8_RREADY <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_RREADY;
        else 
            gmem8_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem8_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem8_WVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem8_WVALID;
        else 
            gmem8_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem9_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem9_ARVALID <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_ARVALID;
        else 
            gmem9_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem9_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem9_RREADY <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_m_axi_gmem9_RREADY;
        else 
            gmem9_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start <= grp_cornerUpdate_10000u_3u_1080u_1920u_1u_s_fu_112_ap_start_reg;
end behav;
