// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cornerTracker_cornersImgToList_10000u_0u_1080u_1920u_1u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_harris_mat_420_dout,
        out_harris_mat_420_empty_n,
        out_harris_mat_420_read,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        p_src_1_dout,
        p_src_1_empty_n,
        p_src_1_read,
        p_src_2_dout,
        p_src_2_empty_n,
        p_src_2_read,
        list_dout,
        list_empty_n,
        list_read,
        ncorners,
        ncorners_ap_vld
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_pp0_stage0 = 76'd16;
parameter    ap_ST_fsm_state77 = 76'd32;
parameter    ap_ST_fsm_state78 = 76'd64;
parameter    ap_ST_fsm_pp1_stage0 = 76'd128;
parameter    ap_ST_fsm_state81 = 76'd256;
parameter    ap_ST_fsm_state82 = 76'd512;
parameter    ap_ST_fsm_state83 = 76'd1024;
parameter    ap_ST_fsm_state84 = 76'd2048;
parameter    ap_ST_fsm_state85 = 76'd4096;
parameter    ap_ST_fsm_state86 = 76'd8192;
parameter    ap_ST_fsm_state87 = 76'd16384;
parameter    ap_ST_fsm_state88 = 76'd32768;
parameter    ap_ST_fsm_state89 = 76'd65536;
parameter    ap_ST_fsm_state90 = 76'd131072;
parameter    ap_ST_fsm_state91 = 76'd262144;
parameter    ap_ST_fsm_state92 = 76'd524288;
parameter    ap_ST_fsm_state93 = 76'd1048576;
parameter    ap_ST_fsm_state94 = 76'd2097152;
parameter    ap_ST_fsm_state95 = 76'd4194304;
parameter    ap_ST_fsm_state96 = 76'd8388608;
parameter    ap_ST_fsm_state97 = 76'd16777216;
parameter    ap_ST_fsm_state98 = 76'd33554432;
parameter    ap_ST_fsm_state99 = 76'd67108864;
parameter    ap_ST_fsm_state100 = 76'd134217728;
parameter    ap_ST_fsm_state101 = 76'd268435456;
parameter    ap_ST_fsm_state102 = 76'd536870912;
parameter    ap_ST_fsm_state103 = 76'd1073741824;
parameter    ap_ST_fsm_state104 = 76'd2147483648;
parameter    ap_ST_fsm_state105 = 76'd4294967296;
parameter    ap_ST_fsm_state106 = 76'd8589934592;
parameter    ap_ST_fsm_state107 = 76'd17179869184;
parameter    ap_ST_fsm_state108 = 76'd34359738368;
parameter    ap_ST_fsm_state109 = 76'd68719476736;
parameter    ap_ST_fsm_state110 = 76'd137438953472;
parameter    ap_ST_fsm_state111 = 76'd274877906944;
parameter    ap_ST_fsm_state112 = 76'd549755813888;
parameter    ap_ST_fsm_state113 = 76'd1099511627776;
parameter    ap_ST_fsm_state114 = 76'd2199023255552;
parameter    ap_ST_fsm_state115 = 76'd4398046511104;
parameter    ap_ST_fsm_state116 = 76'd8796093022208;
parameter    ap_ST_fsm_state117 = 76'd17592186044416;
parameter    ap_ST_fsm_state118 = 76'd35184372088832;
parameter    ap_ST_fsm_state119 = 76'd70368744177664;
parameter    ap_ST_fsm_state120 = 76'd140737488355328;
parameter    ap_ST_fsm_state121 = 76'd281474976710656;
parameter    ap_ST_fsm_state122 = 76'd562949953421312;
parameter    ap_ST_fsm_state123 = 76'd1125899906842624;
parameter    ap_ST_fsm_state124 = 76'd2251799813685248;
parameter    ap_ST_fsm_state125 = 76'd4503599627370496;
parameter    ap_ST_fsm_state126 = 76'd9007199254740992;
parameter    ap_ST_fsm_state127 = 76'd18014398509481984;
parameter    ap_ST_fsm_state128 = 76'd36028797018963968;
parameter    ap_ST_fsm_state129 = 76'd72057594037927936;
parameter    ap_ST_fsm_state130 = 76'd144115188075855872;
parameter    ap_ST_fsm_state131 = 76'd288230376151711744;
parameter    ap_ST_fsm_state132 = 76'd576460752303423488;
parameter    ap_ST_fsm_state133 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state134 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state135 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state136 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state137 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state138 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state139 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state140 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state141 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state142 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state143 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state144 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state145 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state146 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state147 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state148 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] out_harris_mat_420_dout;
input   out_harris_mat_420_empty_n;
output   out_harris_mat_420_read;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [31:0] m_axi_gmem2_WDATA;
output  [3:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [31:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
input  [10:0] p_src_1_dout;
input   p_src_1_empty_n;
output   p_src_1_read;
input  [10:0] p_src_2_dout;
input   p_src_2_empty_n;
output   p_src_2_read;
input  [63:0] list_dout;
input   list_empty_n;
output   list_read;
output  [31:0] ncorners;
output   ncorners_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_harris_mat_420_read;
reg m_axi_gmem2_AWVALID;
reg[63:0] m_axi_gmem2_AWADDR;
reg[31:0] m_axi_gmem2_AWLEN;
reg m_axi_gmem2_WVALID;
reg[31:0] m_axi_gmem2_WDATA;
reg m_axi_gmem2_BREADY;
reg p_src_1_read;
reg p_src_2_read;
reg list_read;
reg[31:0] ncorners;
reg ncorners_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_harris_mat_420_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln29_1_reg_485;
reg    gmem2_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln35_reg_501;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln35_reg_501_pp0_iter2_reg;
reg    gmem2_blk_n_B;
reg    ap_enable_reg_pp0_iter71;
reg   [0:0] and_ln35_reg_501_pp0_iter70_reg;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln47_2_reg_553;
wire    ap_CS_fsm_state148;
reg   [0:0] icmp_ln47_reg_527;
reg   [0:0] icmp_ln29_reg_459;
reg    p_src_1_blk_n;
reg    p_src_2_blk_n;
reg    list_blk_n;
reg   [21:0] indvar_flatten_reg_168;
reg   [10:0] i_reg_179;
reg   [10:0] p_Repl2_3_reg_191;
reg   [31:0] indvar_i_reg_214;
reg   [63:0] list_read_reg_448;
reg    ap_block_state1;
reg   [10:0] p_src_2_read_reg_454;
wire   [0:0] icmp_ln29_fu_230_p2;
wire   [21:0] grp_fu_442_p2;
reg   [21:0] bound_reg_480;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln29_1_fu_249_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter3;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
wire    ap_block_state22_pp0_stage0_iter17;
wire    ap_block_state23_pp0_stage0_iter18;
wire    ap_block_state24_pp0_stage0_iter19;
wire    ap_block_state25_pp0_stage0_iter20;
wire    ap_block_state26_pp0_stage0_iter21;
wire    ap_block_state27_pp0_stage0_iter22;
wire    ap_block_state28_pp0_stage0_iter23;
wire    ap_block_state29_pp0_stage0_iter24;
wire    ap_block_state30_pp0_stage0_iter25;
wire    ap_block_state31_pp0_stage0_iter26;
wire    ap_block_state32_pp0_stage0_iter27;
wire    ap_block_state33_pp0_stage0_iter28;
wire    ap_block_state34_pp0_stage0_iter29;
wire    ap_block_state35_pp0_stage0_iter30;
wire    ap_block_state36_pp0_stage0_iter31;
wire    ap_block_state37_pp0_stage0_iter32;
wire    ap_block_state38_pp0_stage0_iter33;
wire    ap_block_state39_pp0_stage0_iter34;
wire    ap_block_state40_pp0_stage0_iter35;
wire    ap_block_state41_pp0_stage0_iter36;
wire    ap_block_state42_pp0_stage0_iter37;
wire    ap_block_state43_pp0_stage0_iter38;
wire    ap_block_state44_pp0_stage0_iter39;
wire    ap_block_state45_pp0_stage0_iter40;
wire    ap_block_state46_pp0_stage0_iter41;
wire    ap_block_state47_pp0_stage0_iter42;
wire    ap_block_state48_pp0_stage0_iter43;
wire    ap_block_state49_pp0_stage0_iter44;
wire    ap_block_state50_pp0_stage0_iter45;
wire    ap_block_state51_pp0_stage0_iter46;
wire    ap_block_state52_pp0_stage0_iter47;
wire    ap_block_state53_pp0_stage0_iter48;
wire    ap_block_state54_pp0_stage0_iter49;
wire    ap_block_state55_pp0_stage0_iter50;
wire    ap_block_state56_pp0_stage0_iter51;
wire    ap_block_state57_pp0_stage0_iter52;
wire    ap_block_state58_pp0_stage0_iter53;
wire    ap_block_state59_pp0_stage0_iter54;
wire    ap_block_state60_pp0_stage0_iter55;
wire    ap_block_state61_pp0_stage0_iter56;
wire    ap_block_state62_pp0_stage0_iter57;
wire    ap_block_state63_pp0_stage0_iter58;
wire    ap_block_state64_pp0_stage0_iter59;
wire    ap_block_state65_pp0_stage0_iter60;
wire    ap_block_state66_pp0_stage0_iter61;
wire    ap_block_state67_pp0_stage0_iter62;
wire    ap_block_state68_pp0_stage0_iter63;
wire    ap_block_state69_pp0_stage0_iter64;
wire    ap_block_state70_pp0_stage0_iter65;
wire    ap_block_state71_pp0_stage0_iter66;
wire    ap_block_state72_pp0_stage0_iter67;
wire    ap_block_state73_pp0_stage0_iter68;
wire    ap_block_state74_pp0_stage0_iter69;
wire    ap_block_state75_pp0_stage0_iter70;
reg    ap_block_state76_pp0_stage0_iter71;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln29_1_reg_485_pp0_iter1_reg;
reg   [0:0] icmp_ln29_1_reg_485_pp0_iter2_reg;
wire   [21:0] add_ln29_fu_254_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] cornerCount_1_load_reg_494;
wire   [0:0] and_ln35_fu_270_p2;
reg   [0:0] and_ln35_reg_501_pp0_iter3_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter4_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter5_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter6_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter7_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter8_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter9_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter10_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter11_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter12_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter13_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter14_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter15_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter16_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter17_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter18_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter19_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter20_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter21_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter22_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter23_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter24_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter25_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter26_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter27_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter28_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter29_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter30_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter31_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter32_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter33_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter34_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter35_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter36_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter37_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter38_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter39_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter40_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter41_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter42_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter43_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter44_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter45_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter46_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter47_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter48_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter49_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter50_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter51_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter52_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter53_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter54_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter55_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter56_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter57_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter58_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter59_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter60_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter61_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter62_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter63_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter64_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter65_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter66_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter67_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter68_reg;
reg   [0:0] and_ln35_reg_501_pp0_iter69_reg;
reg   [63:0] gmem2_addr_1_reg_505;
wire   [10:0] select_ln28_fu_333_p3;
reg   [10:0] select_ln28_reg_511;
wire   [10:0] select_ln29_fu_347_p3;
reg   [10:0] select_ln29_reg_516;
wire   [10:0] j_fu_355_p2;
reg   [10:0] j_reg_522;
wire   [0:0] grp_fu_225_p2;
wire    ap_CS_fsm_state77;
wire   [31:0] sub_ln47_fu_376_p2;
reg   [31:0] sub_ln47_reg_531;
reg   [63:0] gmem2_addr_reg_537;
wire   [0:0] icmp_ln47_1_fu_419_p2;
reg   [0:0] icmp_ln47_1_reg_543;
wire   [31:0] new_upper_i_fu_425_p3;
reg   [31:0] new_upper_i_reg_548;
wire   [0:0] icmp_ln47_2_fu_431_p2;
wire    ap_block_state79_pp1_stage0_iter0;
wire    ap_block_state80_pp1_stage0_iter1;
reg    ap_block_state80_io;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] add_ln47_1_fu_436_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state6;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state79;
reg   [10:0] ap_phi_mux_i_phi_fu_183_p4;
reg   [10:0] ap_phi_mux_p_Repl2_3_phi_fu_195_p4;
reg   [31:0] ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4;
reg   [31:0] cornerCount_0_lcssa74_i_reg_203;
wire  signed [63:0] sext_ln41_fu_307_p1;
wire  signed [63:0] sext_ln47_1_fu_409_p1;
wire   [31:0] zext_ln390_fu_371_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_predicate_op367_writeresp_state148;
reg    ap_block_state148;
wire    ap_block_pp1_stage0_01001;
reg   [31:0] cornerCount_1_fu_100;
wire   [31:0] cornerCount_fu_317_p2;
reg   [31:0] grp_fu_225_p0;
wire   [0:0] icmp_ln874_fu_264_p2;
wire   [13:0] trunc_ln41_fu_276_p1;
wire   [15:0] shl_ln1_fu_280_p3;
wire   [63:0] zext_ln41_fu_288_p1;
wire   [63:0] add_ln41_fu_292_p2;
wire   [61:0] trunc_ln41_1_fu_297_p4;
wire   [0:0] icmp_ln30_fu_328_p2;
wire   [10:0] add_ln29_1_fu_341_p2;
wire   [15:0] zext_ln30_fu_361_p1;
wire   [26:0] p_Result_s_fu_364_p3;
wire   [33:0] shl_ln_fu_382_p3;
wire  signed [63:0] sext_ln47_fu_390_p1;
wire   [63:0] add_ln47_fu_394_p2;
wire   [61:0] trunc_ln_fu_399_p4;
wire   [10:0] grp_fu_442_p0;
wire   [10:0] grp_fu_442_p1;
reg    grp_fu_442_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [75:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [21:0] grp_fu_442_p00;
wire   [21:0] grp_fu_442_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
end

cornerTracker_mul_mul_11ns_11ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mul_mul_11ns_11ns_22_4_1_U327(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_442_p0),
    .din1(grp_fu_442_p1),
    .ce(grp_fu_442_ce),
    .dout(grp_fu_442_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state148))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state6)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter71 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state79) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state79) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state79);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_225_p2 == 1'd1) & (icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        cornerCount_0_lcssa74_i_reg_203 <= cornerCount_1_load_reg_494;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cornerCount_0_lcssa74_i_reg_203 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln35_fu_270_p2) & (icmp_ln29_1_reg_485 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cornerCount_1_fu_100 <= cornerCount_fu_317_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        cornerCount_1_fu_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_reg_485_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_179 <= select_ln29_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_179 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_1_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_168 <= add_ln29_fu_254_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_168 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        indvar_i_reg_214 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln47_2_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_i_reg_214 <= add_ln47_1_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_reg_485_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Repl2_3_reg_191 <= j_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Repl2_3_reg_191 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_1_reg_485 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln35_reg_501 <= and_ln35_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln35_reg_501_pp0_iter10_reg <= and_ln35_reg_501_pp0_iter9_reg;
        and_ln35_reg_501_pp0_iter11_reg <= and_ln35_reg_501_pp0_iter10_reg;
        and_ln35_reg_501_pp0_iter12_reg <= and_ln35_reg_501_pp0_iter11_reg;
        and_ln35_reg_501_pp0_iter13_reg <= and_ln35_reg_501_pp0_iter12_reg;
        and_ln35_reg_501_pp0_iter14_reg <= and_ln35_reg_501_pp0_iter13_reg;
        and_ln35_reg_501_pp0_iter15_reg <= and_ln35_reg_501_pp0_iter14_reg;
        and_ln35_reg_501_pp0_iter16_reg <= and_ln35_reg_501_pp0_iter15_reg;
        and_ln35_reg_501_pp0_iter17_reg <= and_ln35_reg_501_pp0_iter16_reg;
        and_ln35_reg_501_pp0_iter18_reg <= and_ln35_reg_501_pp0_iter17_reg;
        and_ln35_reg_501_pp0_iter19_reg <= and_ln35_reg_501_pp0_iter18_reg;
        and_ln35_reg_501_pp0_iter20_reg <= and_ln35_reg_501_pp0_iter19_reg;
        and_ln35_reg_501_pp0_iter21_reg <= and_ln35_reg_501_pp0_iter20_reg;
        and_ln35_reg_501_pp0_iter22_reg <= and_ln35_reg_501_pp0_iter21_reg;
        and_ln35_reg_501_pp0_iter23_reg <= and_ln35_reg_501_pp0_iter22_reg;
        and_ln35_reg_501_pp0_iter24_reg <= and_ln35_reg_501_pp0_iter23_reg;
        and_ln35_reg_501_pp0_iter25_reg <= and_ln35_reg_501_pp0_iter24_reg;
        and_ln35_reg_501_pp0_iter26_reg <= and_ln35_reg_501_pp0_iter25_reg;
        and_ln35_reg_501_pp0_iter27_reg <= and_ln35_reg_501_pp0_iter26_reg;
        and_ln35_reg_501_pp0_iter28_reg <= and_ln35_reg_501_pp0_iter27_reg;
        and_ln35_reg_501_pp0_iter29_reg <= and_ln35_reg_501_pp0_iter28_reg;
        and_ln35_reg_501_pp0_iter2_reg <= and_ln35_reg_501;
        and_ln35_reg_501_pp0_iter30_reg <= and_ln35_reg_501_pp0_iter29_reg;
        and_ln35_reg_501_pp0_iter31_reg <= and_ln35_reg_501_pp0_iter30_reg;
        and_ln35_reg_501_pp0_iter32_reg <= and_ln35_reg_501_pp0_iter31_reg;
        and_ln35_reg_501_pp0_iter33_reg <= and_ln35_reg_501_pp0_iter32_reg;
        and_ln35_reg_501_pp0_iter34_reg <= and_ln35_reg_501_pp0_iter33_reg;
        and_ln35_reg_501_pp0_iter35_reg <= and_ln35_reg_501_pp0_iter34_reg;
        and_ln35_reg_501_pp0_iter36_reg <= and_ln35_reg_501_pp0_iter35_reg;
        and_ln35_reg_501_pp0_iter37_reg <= and_ln35_reg_501_pp0_iter36_reg;
        and_ln35_reg_501_pp0_iter38_reg <= and_ln35_reg_501_pp0_iter37_reg;
        and_ln35_reg_501_pp0_iter39_reg <= and_ln35_reg_501_pp0_iter38_reg;
        and_ln35_reg_501_pp0_iter3_reg <= and_ln35_reg_501_pp0_iter2_reg;
        and_ln35_reg_501_pp0_iter40_reg <= and_ln35_reg_501_pp0_iter39_reg;
        and_ln35_reg_501_pp0_iter41_reg <= and_ln35_reg_501_pp0_iter40_reg;
        and_ln35_reg_501_pp0_iter42_reg <= and_ln35_reg_501_pp0_iter41_reg;
        and_ln35_reg_501_pp0_iter43_reg <= and_ln35_reg_501_pp0_iter42_reg;
        and_ln35_reg_501_pp0_iter44_reg <= and_ln35_reg_501_pp0_iter43_reg;
        and_ln35_reg_501_pp0_iter45_reg <= and_ln35_reg_501_pp0_iter44_reg;
        and_ln35_reg_501_pp0_iter46_reg <= and_ln35_reg_501_pp0_iter45_reg;
        and_ln35_reg_501_pp0_iter47_reg <= and_ln35_reg_501_pp0_iter46_reg;
        and_ln35_reg_501_pp0_iter48_reg <= and_ln35_reg_501_pp0_iter47_reg;
        and_ln35_reg_501_pp0_iter49_reg <= and_ln35_reg_501_pp0_iter48_reg;
        and_ln35_reg_501_pp0_iter4_reg <= and_ln35_reg_501_pp0_iter3_reg;
        and_ln35_reg_501_pp0_iter50_reg <= and_ln35_reg_501_pp0_iter49_reg;
        and_ln35_reg_501_pp0_iter51_reg <= and_ln35_reg_501_pp0_iter50_reg;
        and_ln35_reg_501_pp0_iter52_reg <= and_ln35_reg_501_pp0_iter51_reg;
        and_ln35_reg_501_pp0_iter53_reg <= and_ln35_reg_501_pp0_iter52_reg;
        and_ln35_reg_501_pp0_iter54_reg <= and_ln35_reg_501_pp0_iter53_reg;
        and_ln35_reg_501_pp0_iter55_reg <= and_ln35_reg_501_pp0_iter54_reg;
        and_ln35_reg_501_pp0_iter56_reg <= and_ln35_reg_501_pp0_iter55_reg;
        and_ln35_reg_501_pp0_iter57_reg <= and_ln35_reg_501_pp0_iter56_reg;
        and_ln35_reg_501_pp0_iter58_reg <= and_ln35_reg_501_pp0_iter57_reg;
        and_ln35_reg_501_pp0_iter59_reg <= and_ln35_reg_501_pp0_iter58_reg;
        and_ln35_reg_501_pp0_iter5_reg <= and_ln35_reg_501_pp0_iter4_reg;
        and_ln35_reg_501_pp0_iter60_reg <= and_ln35_reg_501_pp0_iter59_reg;
        and_ln35_reg_501_pp0_iter61_reg <= and_ln35_reg_501_pp0_iter60_reg;
        and_ln35_reg_501_pp0_iter62_reg <= and_ln35_reg_501_pp0_iter61_reg;
        and_ln35_reg_501_pp0_iter63_reg <= and_ln35_reg_501_pp0_iter62_reg;
        and_ln35_reg_501_pp0_iter64_reg <= and_ln35_reg_501_pp0_iter63_reg;
        and_ln35_reg_501_pp0_iter65_reg <= and_ln35_reg_501_pp0_iter64_reg;
        and_ln35_reg_501_pp0_iter66_reg <= and_ln35_reg_501_pp0_iter65_reg;
        and_ln35_reg_501_pp0_iter67_reg <= and_ln35_reg_501_pp0_iter66_reg;
        and_ln35_reg_501_pp0_iter68_reg <= and_ln35_reg_501_pp0_iter67_reg;
        and_ln35_reg_501_pp0_iter69_reg <= and_ln35_reg_501_pp0_iter68_reg;
        and_ln35_reg_501_pp0_iter6_reg <= and_ln35_reg_501_pp0_iter5_reg;
        and_ln35_reg_501_pp0_iter70_reg <= and_ln35_reg_501_pp0_iter69_reg;
        and_ln35_reg_501_pp0_iter7_reg <= and_ln35_reg_501_pp0_iter6_reg;
        and_ln35_reg_501_pp0_iter8_reg <= and_ln35_reg_501_pp0_iter7_reg;
        and_ln35_reg_501_pp0_iter9_reg <= and_ln35_reg_501_pp0_iter8_reg;
        icmp_ln29_1_reg_485_pp0_iter2_reg <= icmp_ln29_1_reg_485_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_480 <= grp_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cornerCount_1_load_reg_494 <= cornerCount_1_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln35_fu_270_p2) & (icmp_ln29_1_reg_485 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem2_addr_1_reg_505 <= sext_ln41_fu_307_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) & ((grp_fu_225_p2 == 1'd1) | (icmp_ln29_reg_459 == 1'd1)))) begin
        gmem2_addr_reg_537 <= sext_ln47_1_fu_409_p1;
        icmp_ln47_1_reg_543 <= icmp_ln47_1_fu_419_p2;
        sub_ln47_reg_531 <= sub_ln47_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln29_1_reg_485 <= icmp_ln29_1_fu_249_p2;
        icmp_ln29_1_reg_485_pp0_iter1_reg <= icmp_ln29_1_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln29_reg_459 <= icmp_ln29_fu_230_p2;
        list_read_reg_448 <= list_dout;
        p_src_2_read_reg_454 <= p_src_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln47_2_reg_553 <= icmp_ln47_2_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        icmp_ln47_reg_527 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_reg_485_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_522 <= j_fu_355_p2;
        select_ln29_reg_516 <= select_ln29_fu_347_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        new_upper_i_reg_548 <= new_upper_i_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_reg_485_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln28_reg_511 <= select_ln28_fu_333_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_1_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_2_fu_431_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state79 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state79 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state148))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fu_225_p2 == 1'd1) & (icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 = cornerCount_1_load_reg_494;
    end else begin
        ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 = cornerCount_0_lcssa74_i_reg_203;
    end
end

always @ (*) begin
    if (((icmp_ln29_1_reg_485_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_183_p4 = select_ln29_reg_516;
    end else begin
        ap_phi_mux_i_phi_fu_183_p4 = i_reg_179;
    end
end

always @ (*) begin
    if (((icmp_ln29_1_reg_485_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_Repl2_3_phi_fu_195_p4 = j_reg_522;
    end else begin
        ap_phi_mux_p_Repl2_3_phi_fu_195_p4 = p_Repl2_3_reg_191;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state148))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | ((1'd1 == and_ln35_reg_501) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state148) & ((icmp_ln29_reg_459 == 1'd1) | (icmp_ln47_reg_527 == 1'd1))) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln47_2_reg_553 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_225_p0 = cornerCount_1_load_reg_494;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_225_p0 = cornerCount_1_fu_100;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_442_ce = 1'b1;
    end else begin
        grp_fu_442_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        list_blk_n = list_empty_n;
    end else begin
        list_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        list_read = 1'b1;
    end else begin
        list_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        m_axi_gmem2_AWADDR = gmem2_addr_reg_537;
    end else if (((1'd1 == and_ln35_reg_501) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem2_AWADDR = gmem2_addr_1_reg_505;
    end else begin
        m_axi_gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        m_axi_gmem2_AWLEN = sub_ln47_reg_531;
    end else if (((1'd1 == and_ln35_reg_501) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem2_AWLEN = 32'd1;
    end else begin
        m_axi_gmem2_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1)) | ((1'd1 == and_ln35_reg_501) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0)) & (ap_predicate_op367_writeresp_state148 == 1'b1) & (1'b1 == ap_CS_fsm_state148)) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_2_reg_553 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        m_axi_gmem2_WDATA = 32'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_gmem2_WDATA = zext_ln390_fu_371_p1;
    end else begin
        m_axi_gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln47_2_reg_553 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem2_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        ncorners = cornerCount_1_load_reg_494;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ncorners = 32'd0;
    end else begin
        ncorners = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ncorners_ap_vld = 1'b1;
    end else begin
        ncorners_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_1_reg_485 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_harris_mat_420_blk_n = out_harris_mat_420_empty_n;
    end else begin
        out_harris_mat_420_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_1_reg_485 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_harris_mat_420_read = 1'b1;
    end else begin
        out_harris_mat_420_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_blk_n = p_src_1_empty_n;
    end else begin
        p_src_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_read = 1'b1;
    end else begin
        p_src_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_blk_n = p_src_2_empty_n;
    end else begin
        p_src_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_read = 1'b1;
    end else begin
        p_src_2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0)) & (icmp_ln29_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)) & ~((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((grp_fu_225_p2 == 1'd0) & (icmp_ln29_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (m_axi_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln47_2_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln47_2_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            if ((~((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state148))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_1_fu_341_p2 = (ap_phi_mux_i_phi_fu_183_p4 + 11'd1);

assign add_ln29_fu_254_p2 = (indvar_flatten_reg_168 + 22'd1);

assign add_ln41_fu_292_p2 = (list_read_reg_448 + zext_ln41_fu_288_p1);

assign add_ln47_1_fu_436_p2 = (indvar_i_reg_214 + 32'd1);

assign add_ln47_fu_394_p2 = ($signed(sext_ln47_fu_390_p1) + $signed(list_read_reg_448));

assign and_ln35_fu_270_p2 = (icmp_ln874_fu_264_p2 & grp_fu_225_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter71 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (m_axi_gmem2_BVALID == 1'b0)) | ((icmp_ln29_1_reg_485 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_harris_mat_420_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (m_axi_gmem2_BVALID == 1'b0)) | ((icmp_ln29_1_reg_485 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_harris_mat_420_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter71 == 1'b1) & (1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (m_axi_gmem2_BVALID == 1'b0)) | ((icmp_ln29_1_reg_485 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_harris_mat_420_empty_n == 1'b0)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state80_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state80_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (list_empty_n == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state148 = ((ap_predicate_op367_writeresp_state148 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0));
end

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln29_1_reg_485 == 1'd0) & (out_harris_mat_420_empty_n == 1'b0));
end

assign ap_block_state70_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_pp0_stage0_iter71 = ((1'd1 == and_ln35_reg_501_pp0_iter70_reg) & (m_axi_gmem2_BVALID == 1'b0));
end

assign ap_block_state79_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((1'd1 == and_ln35_reg_501) & (m_axi_gmem2_AWREADY == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_io = ((icmp_ln47_2_reg_553 == 1'd0) & (m_axi_gmem2_WREADY == 1'b0));
end

assign ap_block_state80_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((1'd1 == and_ln35_reg_501_pp0_iter2_reg) & (m_axi_gmem2_WREADY == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op367_writeresp_state148 = ((icmp_ln29_reg_459 == 1'd1) | (icmp_ln47_reg_527 == 1'd1));
end

assign cornerCount_fu_317_p2 = (32'd1 + cornerCount_1_fu_100);

assign grp_fu_225_p2 = ((grp_fu_225_p0 < 32'd10000) ? 1'b1 : 1'b0);

assign grp_fu_442_p0 = grp_fu_442_p00;

assign grp_fu_442_p00 = p_src_2_dout;

assign grp_fu_442_p1 = grp_fu_442_p10;

assign grp_fu_442_p10 = p_src_1_dout;

assign icmp_ln29_1_fu_249_p2 = ((indvar_flatten_reg_168 == bound_reg_480) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_230_p2 = ((p_src_1_dout == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_328_p2 = ((ap_phi_mux_p_Repl2_3_phi_fu_195_p4 == p_src_2_read_reg_454) ? 1'b1 : 1'b0);

assign icmp_ln47_1_fu_419_p2 = ((ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 != 32'd10000) ? 1'b1 : 1'b0);

assign icmp_ln47_2_fu_431_p2 = ((indvar_i_reg_214 == new_upper_i_reg_548) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_264_p2 = ((out_harris_mat_420_dout == 8'd255) ? 1'b1 : 1'b0);

assign j_fu_355_p2 = (select_ln28_fu_333_p3 + 11'd1);

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 4'd15;

assign m_axi_gmem2_WUSER = 1'd0;

assign new_upper_i_fu_425_p3 = ((icmp_ln47_1_reg_543[0:0] === 1'b1) ? sub_ln47_reg_531 : 32'd1);

assign p_Result_s_fu_364_p3 = {{select_ln29_reg_516}, {zext_ln30_fu_361_p1}};

assign select_ln28_fu_333_p3 = ((icmp_ln30_fu_328_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_p_Repl2_3_phi_fu_195_p4);

assign select_ln29_fu_347_p3 = ((icmp_ln30_fu_328_p2[0:0] === 1'b1) ? add_ln29_1_fu_341_p2 : ap_phi_mux_i_phi_fu_183_p4);

assign sext_ln41_fu_307_p1 = $signed(trunc_ln41_1_fu_297_p4);

assign sext_ln47_1_fu_409_p1 = $signed(trunc_ln_fu_399_p4);

assign sext_ln47_fu_390_p1 = $signed(shl_ln_fu_382_p3);

assign shl_ln1_fu_280_p3 = {{trunc_ln41_fu_276_p1}, {2'd0}};

assign shl_ln_fu_382_p3 = {{ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4}, {2'd0}};

assign sub_ln47_fu_376_p2 = (32'd10000 - ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4);

assign trunc_ln41_1_fu_297_p4 = {{add_ln41_fu_292_p2[63:2]}};

assign trunc_ln41_fu_276_p1 = cornerCount_1_fu_100[13:0];

assign trunc_ln_fu_399_p4 = {{add_ln47_fu_394_p2[63:2]}};

assign zext_ln30_fu_361_p1 = select_ln28_reg_511;

assign zext_ln390_fu_371_p1 = p_Result_s_fu_364_p3;

assign zext_ln41_fu_288_p1 = shl_ln1_fu_280_p3;

endmodule //cornerTracker_cornersImgToList_10000u_0u_1080u_1920u_1u_s
