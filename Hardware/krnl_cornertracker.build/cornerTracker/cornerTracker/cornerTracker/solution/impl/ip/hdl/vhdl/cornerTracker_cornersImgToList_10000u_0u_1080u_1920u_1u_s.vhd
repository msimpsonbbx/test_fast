-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cornerTracker_cornersImgToList_10000u_0u_1080u_1920u_1u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_harris_mat_420_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    out_harris_mat_420_empty_n : IN STD_LOGIC;
    out_harris_mat_420_read : OUT STD_LOGIC;
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_1_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src_1_empty_n : IN STD_LOGIC;
    p_src_1_read : OUT STD_LOGIC;
    p_src_2_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src_2_empty_n : IN STD_LOGIC;
    p_src_2_read : OUT STD_LOGIC;
    list_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    list_empty_n : IN STD_LOGIC;
    list_read : OUT STD_LOGIC;
    ncorners : OUT STD_LOGIC_VECTOR (31 downto 0);
    ncorners_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cornerTracker_cornersImgToList_10000u_0u_1080u_1920u_1u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_harris_mat_420_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln29_1_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln35_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln35_reg_501_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal and_ln35_reg_501_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln47_2_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal icmp_ln47_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_1_blk_n : STD_LOGIC;
    signal p_src_2_blk_n : STD_LOGIC;
    signal list_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_reg_179 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_3_reg_191 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_i_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal list_read_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_src_2_read_reg_454 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln29_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal bound_reg_480 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln29_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter70 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln29_1_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_1_reg_485_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_254_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal cornerCount_1_load_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_501_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_1_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_fu_333_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln28_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_fu_347_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_reg_516 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_522 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal sub_ln47_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln47_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_reg_537 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_1_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_upper_i_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_upper_i_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln47_2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state79_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state80_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state80_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln47_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state79 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_183_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_p_Repl2_3_phi_fu_195_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cornerCount_0_lcssa74_i_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln41_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_1_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln390_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_predicate_op367_writeresp_state148 : BOOLEAN;
    signal ap_block_state148 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal cornerCount_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal cornerCount_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln874_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_276_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1_fu_280_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln41_1_fu_297_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln30_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_1_fu_341_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_364_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln_fu_382_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln47_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln47_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_399_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_442_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_442_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_442_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_442_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_442_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component cornerTracker_mul_mul_11ns_11ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    mul_mul_11ns_11ns_22_4_1_U327 : component cornerTracker_mul_mul_11ns_11ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_442_p0,
        din1 => grp_fu_442_p1,
        ce => grp_fu_442_ce,
        dout => grp_fu_442_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state148))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state6)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state79) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state79) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state79);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cornerCount_0_lcssa74_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_225_p2 = ap_const_lv1_1) and (icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                cornerCount_0_lcssa74_i_reg_203 <= cornerCount_1_load_reg_494;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cornerCount_0_lcssa74_i_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cornerCount_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln35_fu_270_p2) and (icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                cornerCount_1_fu_100 <= cornerCount_fu_317_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cornerCount_1_fu_100 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_1_reg_485_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_179 <= select_ln29_reg_516;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_179 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln29_1_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_168 <= add_ln29_fu_254_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_168 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    indvar_i_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                indvar_i_reg_214 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln47_2_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_i_reg_214 <= add_ln47_1_fu_436_p2;
            end if; 
        end if;
    end process;

    p_Repl2_3_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_1_reg_485_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Repl2_3_reg_191 <= j_reg_522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Repl2_3_reg_191 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln35_reg_501 <= and_ln35_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln35_reg_501_pp0_iter10_reg <= and_ln35_reg_501_pp0_iter9_reg;
                and_ln35_reg_501_pp0_iter11_reg <= and_ln35_reg_501_pp0_iter10_reg;
                and_ln35_reg_501_pp0_iter12_reg <= and_ln35_reg_501_pp0_iter11_reg;
                and_ln35_reg_501_pp0_iter13_reg <= and_ln35_reg_501_pp0_iter12_reg;
                and_ln35_reg_501_pp0_iter14_reg <= and_ln35_reg_501_pp0_iter13_reg;
                and_ln35_reg_501_pp0_iter15_reg <= and_ln35_reg_501_pp0_iter14_reg;
                and_ln35_reg_501_pp0_iter16_reg <= and_ln35_reg_501_pp0_iter15_reg;
                and_ln35_reg_501_pp0_iter17_reg <= and_ln35_reg_501_pp0_iter16_reg;
                and_ln35_reg_501_pp0_iter18_reg <= and_ln35_reg_501_pp0_iter17_reg;
                and_ln35_reg_501_pp0_iter19_reg <= and_ln35_reg_501_pp0_iter18_reg;
                and_ln35_reg_501_pp0_iter20_reg <= and_ln35_reg_501_pp0_iter19_reg;
                and_ln35_reg_501_pp0_iter21_reg <= and_ln35_reg_501_pp0_iter20_reg;
                and_ln35_reg_501_pp0_iter22_reg <= and_ln35_reg_501_pp0_iter21_reg;
                and_ln35_reg_501_pp0_iter23_reg <= and_ln35_reg_501_pp0_iter22_reg;
                and_ln35_reg_501_pp0_iter24_reg <= and_ln35_reg_501_pp0_iter23_reg;
                and_ln35_reg_501_pp0_iter25_reg <= and_ln35_reg_501_pp0_iter24_reg;
                and_ln35_reg_501_pp0_iter26_reg <= and_ln35_reg_501_pp0_iter25_reg;
                and_ln35_reg_501_pp0_iter27_reg <= and_ln35_reg_501_pp0_iter26_reg;
                and_ln35_reg_501_pp0_iter28_reg <= and_ln35_reg_501_pp0_iter27_reg;
                and_ln35_reg_501_pp0_iter29_reg <= and_ln35_reg_501_pp0_iter28_reg;
                and_ln35_reg_501_pp0_iter2_reg <= and_ln35_reg_501;
                and_ln35_reg_501_pp0_iter30_reg <= and_ln35_reg_501_pp0_iter29_reg;
                and_ln35_reg_501_pp0_iter31_reg <= and_ln35_reg_501_pp0_iter30_reg;
                and_ln35_reg_501_pp0_iter32_reg <= and_ln35_reg_501_pp0_iter31_reg;
                and_ln35_reg_501_pp0_iter33_reg <= and_ln35_reg_501_pp0_iter32_reg;
                and_ln35_reg_501_pp0_iter34_reg <= and_ln35_reg_501_pp0_iter33_reg;
                and_ln35_reg_501_pp0_iter35_reg <= and_ln35_reg_501_pp0_iter34_reg;
                and_ln35_reg_501_pp0_iter36_reg <= and_ln35_reg_501_pp0_iter35_reg;
                and_ln35_reg_501_pp0_iter37_reg <= and_ln35_reg_501_pp0_iter36_reg;
                and_ln35_reg_501_pp0_iter38_reg <= and_ln35_reg_501_pp0_iter37_reg;
                and_ln35_reg_501_pp0_iter39_reg <= and_ln35_reg_501_pp0_iter38_reg;
                and_ln35_reg_501_pp0_iter3_reg <= and_ln35_reg_501_pp0_iter2_reg;
                and_ln35_reg_501_pp0_iter40_reg <= and_ln35_reg_501_pp0_iter39_reg;
                and_ln35_reg_501_pp0_iter41_reg <= and_ln35_reg_501_pp0_iter40_reg;
                and_ln35_reg_501_pp0_iter42_reg <= and_ln35_reg_501_pp0_iter41_reg;
                and_ln35_reg_501_pp0_iter43_reg <= and_ln35_reg_501_pp0_iter42_reg;
                and_ln35_reg_501_pp0_iter44_reg <= and_ln35_reg_501_pp0_iter43_reg;
                and_ln35_reg_501_pp0_iter45_reg <= and_ln35_reg_501_pp0_iter44_reg;
                and_ln35_reg_501_pp0_iter46_reg <= and_ln35_reg_501_pp0_iter45_reg;
                and_ln35_reg_501_pp0_iter47_reg <= and_ln35_reg_501_pp0_iter46_reg;
                and_ln35_reg_501_pp0_iter48_reg <= and_ln35_reg_501_pp0_iter47_reg;
                and_ln35_reg_501_pp0_iter49_reg <= and_ln35_reg_501_pp0_iter48_reg;
                and_ln35_reg_501_pp0_iter4_reg <= and_ln35_reg_501_pp0_iter3_reg;
                and_ln35_reg_501_pp0_iter50_reg <= and_ln35_reg_501_pp0_iter49_reg;
                and_ln35_reg_501_pp0_iter51_reg <= and_ln35_reg_501_pp0_iter50_reg;
                and_ln35_reg_501_pp0_iter52_reg <= and_ln35_reg_501_pp0_iter51_reg;
                and_ln35_reg_501_pp0_iter53_reg <= and_ln35_reg_501_pp0_iter52_reg;
                and_ln35_reg_501_pp0_iter54_reg <= and_ln35_reg_501_pp0_iter53_reg;
                and_ln35_reg_501_pp0_iter55_reg <= and_ln35_reg_501_pp0_iter54_reg;
                and_ln35_reg_501_pp0_iter56_reg <= and_ln35_reg_501_pp0_iter55_reg;
                and_ln35_reg_501_pp0_iter57_reg <= and_ln35_reg_501_pp0_iter56_reg;
                and_ln35_reg_501_pp0_iter58_reg <= and_ln35_reg_501_pp0_iter57_reg;
                and_ln35_reg_501_pp0_iter59_reg <= and_ln35_reg_501_pp0_iter58_reg;
                and_ln35_reg_501_pp0_iter5_reg <= and_ln35_reg_501_pp0_iter4_reg;
                and_ln35_reg_501_pp0_iter60_reg <= and_ln35_reg_501_pp0_iter59_reg;
                and_ln35_reg_501_pp0_iter61_reg <= and_ln35_reg_501_pp0_iter60_reg;
                and_ln35_reg_501_pp0_iter62_reg <= and_ln35_reg_501_pp0_iter61_reg;
                and_ln35_reg_501_pp0_iter63_reg <= and_ln35_reg_501_pp0_iter62_reg;
                and_ln35_reg_501_pp0_iter64_reg <= and_ln35_reg_501_pp0_iter63_reg;
                and_ln35_reg_501_pp0_iter65_reg <= and_ln35_reg_501_pp0_iter64_reg;
                and_ln35_reg_501_pp0_iter66_reg <= and_ln35_reg_501_pp0_iter65_reg;
                and_ln35_reg_501_pp0_iter67_reg <= and_ln35_reg_501_pp0_iter66_reg;
                and_ln35_reg_501_pp0_iter68_reg <= and_ln35_reg_501_pp0_iter67_reg;
                and_ln35_reg_501_pp0_iter69_reg <= and_ln35_reg_501_pp0_iter68_reg;
                and_ln35_reg_501_pp0_iter6_reg <= and_ln35_reg_501_pp0_iter5_reg;
                and_ln35_reg_501_pp0_iter70_reg <= and_ln35_reg_501_pp0_iter69_reg;
                and_ln35_reg_501_pp0_iter7_reg <= and_ln35_reg_501_pp0_iter6_reg;
                and_ln35_reg_501_pp0_iter8_reg <= and_ln35_reg_501_pp0_iter7_reg;
                and_ln35_reg_501_pp0_iter9_reg <= and_ln35_reg_501_pp0_iter8_reg;
                icmp_ln29_1_reg_485_pp0_iter2_reg <= icmp_ln29_1_reg_485_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_480 <= grp_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                cornerCount_1_load_reg_494 <= cornerCount_1_fu_100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln35_fu_270_p2) and (icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem2_addr_1_reg_505 <= sext_ln41_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and ((grp_fu_225_p2 = ap_const_lv1_1) or (icmp_ln29_reg_459 = ap_const_lv1_1)))) then
                gmem2_addr_reg_537 <= sext_ln47_1_fu_409_p1;
                icmp_ln47_1_reg_543 <= icmp_ln47_1_fu_419_p2;
                sub_ln47_reg_531 <= sub_ln47_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln29_1_reg_485 <= icmp_ln29_1_fu_249_p2;
                icmp_ln29_1_reg_485_pp0_iter1_reg <= icmp_ln29_1_reg_485;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln29_reg_459 <= icmp_ln29_fu_230_p2;
                list_read_reg_448 <= list_dout;
                p_src_2_read_reg_454 <= p_src_2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln47_2_reg_553 <= icmp_ln47_2_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                icmp_ln47_reg_527 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_1_reg_485_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_reg_522 <= j_fu_355_p2;
                select_ln29_reg_516 <= select_ln29_fu_347_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then
                new_upper_i_reg_548 <= new_upper_i_fu_425_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_1_reg_485_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_reg_511 <= select_ln28_fu_333_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem2_AWREADY, m_axi_gmem2_BVALID, p_src_1_empty_n, p_src_2_empty_n, list_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter71, ap_CS_fsm_state78, ap_CS_fsm_state148, icmp_ln29_reg_459, icmp_ln29_fu_230_p2, ap_enable_reg_pp0_iter0, grp_fu_225_p2, ap_CS_fsm_state77, icmp_ln47_2_fu_431_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter70, ap_block_pp1_stage0_subdone, ap_predicate_op367_writeresp_state148)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                if (((grp_fu_225_p2 = ap_const_lv1_0) and (icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state148;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln47_2_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln47_2_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                if ((not(((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state148))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state148;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln29_1_fu_341_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_183_p4) + unsigned(ap_const_lv11_1));
    add_ln29_fu_254_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_168) + unsigned(ap_const_lv22_1));
    add_ln41_fu_292_p2 <= std_logic_vector(unsigned(list_read_reg_448) + unsigned(zext_ln41_fu_288_p1));
    add_ln47_1_fu_436_p2 <= std_logic_vector(unsigned(indvar_i_reg_214) + unsigned(ap_const_lv32_1));
    add_ln47_fu_394_p2 <= std_logic_vector(signed(sext_ln47_fu_390_p1) + signed(list_read_reg_448));
    and_ln35_fu_270_p2 <= (icmp_ln874_fu_264_p2 and grp_fu_225_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state148 <= ap_CS_fsm(75);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state77 <= ap_CS_fsm(5);
    ap_CS_fsm_state78 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_harris_mat_420_empty_n, m_axi_gmem2_BVALID, ap_enable_reg_pp0_iter1, icmp_ln29_1_reg_485, ap_enable_reg_pp0_iter71, and_ln35_reg_501_pp0_iter70_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (m_axi_gmem2_BVALID = ap_const_logic_0)) or ((icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_harris_mat_420_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_harris_mat_420_empty_n, m_axi_gmem2_BVALID, ap_enable_reg_pp0_iter1, icmp_ln29_1_reg_485, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter71, and_ln35_reg_501_pp0_iter70_reg, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (m_axi_gmem2_BVALID = ap_const_logic_0)) or ((icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_harris_mat_420_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_harris_mat_420_empty_n, m_axi_gmem2_BVALID, ap_enable_reg_pp0_iter1, icmp_ln29_1_reg_485, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter71, and_ln35_reg_501_pp0_iter70_reg, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (m_axi_gmem2_BVALID = ap_const_logic_0)) or ((icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_harris_mat_420_empty_n = ap_const_logic_0)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state80_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state80_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state80_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state80_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_1_empty_n, p_src_2_empty_n, list_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state148_assign_proc : process(m_axi_gmem2_BVALID, ap_predicate_op367_writeresp_state148)
    begin
                ap_block_state148 <= ((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0));
    end process;

        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(out_harris_mat_420_empty_n, icmp_ln29_1_reg_485)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln29_1_reg_485 = ap_const_lv1_0) and (out_harris_mat_420_empty_n = ap_const_logic_0));
    end process;

        ap_block_state70_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state76_pp0_stage0_iter71_assign_proc : process(m_axi_gmem2_BVALID, and_ln35_reg_501_pp0_iter70_reg)
    begin
                ap_block_state76_pp0_stage0_iter71 <= ((ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (m_axi_gmem2_BVALID = ap_const_logic_0));
    end process;

        ap_block_state79_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(m_axi_gmem2_AWREADY, and_ln35_reg_501)
    begin
                ap_block_state7_io <= ((ap_const_lv1_1 = and_ln35_reg_501) and (m_axi_gmem2_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state80_io_assign_proc : process(m_axi_gmem2_WREADY, icmp_ln47_2_reg_553)
    begin
                ap_block_state80_io <= ((icmp_ln47_2_reg_553 = ap_const_lv1_0) and (m_axi_gmem2_WREADY = ap_const_logic_0));
    end process;

        ap_block_state80_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_gmem2_WREADY, and_ln35_reg_501_pp0_iter2_reg)
    begin
                ap_block_state8_io <= ((ap_const_lv1_1 = and_ln35_reg_501_pp0_iter2_reg) and (m_axi_gmem2_WREADY = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln29_1_fu_249_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln29_1_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state79_assign_proc : process(icmp_ln47_2_fu_431_p2)
    begin
        if ((icmp_ln47_2_fu_431_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state79 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem2_BVALID, ap_CS_fsm_state148, ap_predicate_op367_writeresp_state148)
    begin
        if ((not(((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70)
    begin
        if (((ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4_assign_proc : process(icmp_ln29_reg_459, cornerCount_1_load_reg_494, grp_fu_225_p2, ap_CS_fsm_state77, cornerCount_0_lcssa74_i_reg_203)
    begin
        if (((grp_fu_225_p2 = ap_const_lv1_1) and (icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 <= cornerCount_1_load_reg_494;
        else 
            ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 <= cornerCount_0_lcssa74_i_reg_203;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_183_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, i_reg_179, icmp_ln29_1_reg_485_pp0_iter2_reg, select_ln29_reg_516)
    begin
        if (((icmp_ln29_1_reg_485_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_183_p4 <= select_ln29_reg_516;
        else 
            ap_phi_mux_i_phi_fu_183_p4 <= i_reg_179;
        end if; 
    end process;


    ap_phi_mux_p_Repl2_3_phi_fu_195_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Repl2_3_reg_191, icmp_ln29_1_reg_485_pp0_iter2_reg, j_reg_522)
    begin
        if (((icmp_ln29_1_reg_485_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Repl2_3_phi_fu_195_p4 <= j_reg_522;
        else 
            ap_phi_mux_p_Repl2_3_phi_fu_195_p4 <= p_Repl2_3_reg_191;
        end if; 
    end process;


    ap_predicate_op367_writeresp_state148_assign_proc : process(icmp_ln47_reg_527, icmp_ln29_reg_459)
    begin
                ap_predicate_op367_writeresp_state148 <= ((icmp_ln29_reg_459 = ap_const_lv1_1) or (icmp_ln47_reg_527 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state148, ap_predicate_op367_writeresp_state148)
    begin
        if ((not(((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cornerCount_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cornerCount_1_fu_100));

    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln35_reg_501, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((ap_const_lv1_1 = and_ln35_reg_501) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter71, and_ln35_reg_501_pp0_iter70_reg, ap_CS_fsm_state148, icmp_ln47_reg_527, icmp_ln29_reg_459)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state148) and ((icmp_ln29_reg_459 = ap_const_lv1_1) or (icmp_ln47_reg_527 = ap_const_lv1_1))) or ((ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln35_reg_501_pp0_iter2_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln47_2_reg_553)
    begin
        if ((((icmp_ln47_2_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, cornerCount_1_load_reg_494, ap_CS_fsm_state77, cornerCount_1_fu_100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_225_p0 <= cornerCount_1_load_reg_494;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_225_p0 <= cornerCount_1_fu_100;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_225_p2 <= "1" when (unsigned(grp_fu_225_p0) < unsigned(ap_const_lv32_2710)) else "0";

    grp_fu_442_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_442_ce <= ap_const_logic_1;
        else 
            grp_fu_442_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_442_p0 <= grp_fu_442_p00(11 - 1 downto 0);
    grp_fu_442_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_2_dout),22));
    grp_fu_442_p1 <= grp_fu_442_p10(11 - 1 downto 0);
    grp_fu_442_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_1_dout),22));
    icmp_ln29_1_fu_249_p2 <= "1" when (indvar_flatten_reg_168 = bound_reg_480) else "0";
    icmp_ln29_fu_230_p2 <= "1" when (p_src_1_dout = ap_const_lv11_0) else "0";
    icmp_ln30_fu_328_p2 <= "1" when (ap_phi_mux_p_Repl2_3_phi_fu_195_p4 = p_src_2_read_reg_454) else "0";
    icmp_ln47_1_fu_419_p2 <= "0" when (ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 = ap_const_lv32_2710) else "1";
    icmp_ln47_2_fu_431_p2 <= "1" when (indvar_i_reg_214 = new_upper_i_reg_548) else "0";
    icmp_ln874_fu_264_p2 <= "1" when (out_harris_mat_420_dout = ap_const_lv8_FF) else "0";
    j_fu_355_p2 <= std_logic_vector(unsigned(select_ln28_fu_333_p3) + unsigned(ap_const_lv11_1));

    list_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, list_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            list_blk_n <= list_empty_n;
        else 
            list_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    list_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            list_read <= ap_const_logic_1;
        else 
            list_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_ARADDR <= ap_const_lv64_0;
    m_axi_gmem2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem2_ARID <= ap_const_lv1_0;
    m_axi_gmem2_ARLEN <= ap_const_lv32_0;
    m_axi_gmem2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem2_ARUSER <= ap_const_lv1_0;
    m_axi_gmem2_ARVALID <= ap_const_logic_0;

    m_axi_gmem2_AWADDR_assign_proc : process(m_axi_gmem2_AWREADY, ap_enable_reg_pp0_iter2, and_ln35_reg_501, ap_CS_fsm_state78, ap_block_pp0_stage0_11001, gmem2_addr_1_reg_505, gmem2_addr_reg_537)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem2_AWADDR <= gmem2_addr_reg_537;
        elsif (((ap_const_lv1_1 = and_ln35_reg_501) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem2_AWADDR <= gmem2_addr_1_reg_505;
        else 
            m_axi_gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;

    m_axi_gmem2_AWLEN_assign_proc : process(m_axi_gmem2_AWREADY, ap_enable_reg_pp0_iter2, and_ln35_reg_501, ap_CS_fsm_state78, ap_block_pp0_stage0_11001, sub_ln47_reg_531)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem2_AWLEN <= sub_ln47_reg_531;
        elsif (((ap_const_lv1_1 = and_ln35_reg_501) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem2_AWLEN <= ap_const_lv32_1;
        else 
            m_axi_gmem2_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;

    m_axi_gmem2_AWVALID_assign_proc : process(m_axi_gmem2_AWREADY, ap_enable_reg_pp0_iter2, and_ln35_reg_501, ap_CS_fsm_state78, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state78) and (m_axi_gmem2_AWREADY = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln35_reg_501) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem2_BREADY_assign_proc : process(m_axi_gmem2_BVALID, ap_enable_reg_pp0_iter71, and_ln35_reg_501_pp0_iter70_reg, ap_CS_fsm_state148, ap_block_pp0_stage0_11001, ap_predicate_op367_writeresp_state148)
    begin
        if (((not(((ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (m_axi_gmem2_BVALID = ap_const_logic_0))) and (ap_predicate_op367_writeresp_state148 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state148)) or ((ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter70_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem2_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_RREADY <= ap_const_logic_0;

    m_axi_gmem2_WDATA_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln35_reg_501_pp0_iter2_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln47_2_reg_553, zext_ln390_fu_371_p1, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if (((icmp_ln47_2_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            m_axi_gmem2_WDATA <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_gmem2_WDATA <= zext_ln390_fu_371_p1;
        else 
            m_axi_gmem2_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv4_F;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;

    m_axi_gmem2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln35_reg_501_pp0_iter2_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln47_2_reg_553, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((icmp_ln47_2_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln35_reg_501_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem2_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    ncorners_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n, icmp_ln29_reg_459, icmp_ln29_fu_230_p2, cornerCount_1_load_reg_494, ap_CS_fsm_state77)
    begin
        if (((icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ncorners <= cornerCount_1_load_reg_494;
        elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ncorners <= ap_const_lv32_0;
        else 
            ncorners <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ncorners_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n, icmp_ln29_reg_459, icmp_ln29_fu_230_p2, ap_CS_fsm_state77)
    begin
        if ((((icmp_ln29_reg_459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (icmp_ln29_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ncorners_ap_vld <= ap_const_logic_1;
        else 
            ncorners_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    new_upper_i_fu_425_p3 <= 
        sub_ln47_reg_531 when (icmp_ln47_1_reg_543(0) = '1') else 
        ap_const_lv32_1;

    out_harris_mat_420_blk_n_assign_proc : process(out_harris_mat_420_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln29_1_reg_485)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            out_harris_mat_420_blk_n <= out_harris_mat_420_empty_n;
        else 
            out_harris_mat_420_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_harris_mat_420_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln29_1_reg_485, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_1_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            out_harris_mat_420_read <= ap_const_logic_1;
        else 
            out_harris_mat_420_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_364_p3 <= (select_ln29_reg_516 & zext_ln30_fu_361_p1);

    p_src_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_blk_n <= p_src_1_empty_n;
        else 
            p_src_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_read <= ap_const_logic_1;
        else 
            p_src_1_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_blk_n <= p_src_2_empty_n;
        else 
            p_src_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, list_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (list_empty_n = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_read <= ap_const_logic_1;
        else 
            p_src_2_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln28_fu_333_p3 <= 
        ap_const_lv11_0 when (icmp_ln30_fu_328_p2(0) = '1') else 
        ap_phi_mux_p_Repl2_3_phi_fu_195_p4;
    select_ln29_fu_347_p3 <= 
        add_ln29_1_fu_341_p2 when (icmp_ln30_fu_328_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_183_p4;
        sext_ln41_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln41_1_fu_297_p4),64));

        sext_ln47_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_399_p4),64));

        sext_ln47_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_382_p3),64));

    shl_ln1_fu_280_p3 <= (trunc_ln41_fu_276_p1 & ap_const_lv2_0);
    shl_ln_fu_382_p3 <= (ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4 & ap_const_lv2_0);
    sub_ln47_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv32_2710) - unsigned(ap_phi_mux_cornerCount_0_lcssa74_i_phi_fu_207_p4));
    trunc_ln41_1_fu_297_p4 <= add_ln41_fu_292_p2(63 downto 2);
    trunc_ln41_fu_276_p1 <= cornerCount_1_fu_100(14 - 1 downto 0);
    trunc_ln_fu_399_p4 <= add_ln47_fu_394_p2(63 downto 2);
    zext_ln30_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_511),16));
    zext_ln390_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_364_p3),32));
    zext_ln41_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_280_p3),64));
end behav;
