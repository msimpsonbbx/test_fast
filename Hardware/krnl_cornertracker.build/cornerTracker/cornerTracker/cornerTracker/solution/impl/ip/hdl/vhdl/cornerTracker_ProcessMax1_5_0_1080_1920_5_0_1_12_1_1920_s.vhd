-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cornerTracker_ProcessMax1_5_0_1080_1920_5_0_1_12_1_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    thresh_48_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    thresh_48_empty_n : IN STD_LOGIC;
    thresh_48_read : OUT STD_LOGIC;
    out_harris_mat_420_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_harris_mat_420_full_n : IN STD_LOGIC;
    out_harris_mat_420_write : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf1_ce0 : OUT STD_LOGIC;
    buf1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf1_ce1 : OUT STD_LOGIC;
    buf1_we1 : OUT STD_LOGIC;
    buf1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buf2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf2_ce0 : OUT STD_LOGIC;
    buf2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buf2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf2_ce1 : OUT STD_LOGIC;
    buf2_we1 : OUT STD_LOGIC;
    buf2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_width : IN STD_LOGIC_VECTOR (10 downto 0);
    row_ind : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read111 : IN STD_LOGIC_VECTOR (15 downto 0);
    tp : IN STD_LOGIC_VECTOR (1 downto 0);
    mid : IN STD_LOGIC_VECTOR (1 downto 0);
    bottom : IN STD_LOGIC_VECTOR (1 downto 0);
    flag_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read210 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read312 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of cornerTracker_ProcessMax1_5_0_1080_1920_5_0_1_12_1_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal thresh_48_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln88_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_harris_mat_420_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln874_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_768_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_297 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op44_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l00_buf3_0_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal l10_buf_0_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal l10_buf5_0_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal l20_buf78_0_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal l00_buf4_0_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal l10_buf6_0_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal l20_buf8_0_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal Array_0_reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal P0_0_reg_398 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_ind_read_read_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln88_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_744_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_744_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln695_fu_472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln695_reg_748 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln874_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret2_xfExtractPixels_1_12_5_s_fu_435_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret3_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret4_xfExtractPixels_1_12_5_s_fu_446_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret4_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln874_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln874_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1353_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1353_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state5 : STD_LOGIC;
    signal call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_ready : STD_LOGIC;
    signal call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret2_xfExtractPixels_1_12_5_s_fu_435_ap_ready : STD_LOGIC;
    signal call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_ready : STD_LOGIC;
    signal call_ret4_xfExtractPixels_1_12_5_s_fu_446_ap_ready : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_301_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_l00_buf3_0_phi_fu_313_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_l10_buf_0_phi_fu_325_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_l10_buf5_0_phi_fu_338_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_l20_buf78_0_phi_fu_350_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_P0_0_phi_fu_402_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_414_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf0_V_fu_509_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf1_V_fu_521_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf2_V_fu_533_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln538_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_4_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal write_index_0_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln110_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal read_index_0_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_553_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln550_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln550_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln785_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln785_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component cornerTracker_xFSuppressionRad1_1_5_ap_uint_8_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cornerTracker_xfExtractPixels_1_12_5_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cornerTracker_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422 : component cornerTracker_xFSuppressionRad1_1_5_ap_uint_8_s
    port map (
        ap_ready => call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_ready,
        p_read1 => ap_phi_mux_l00_buf3_0_phi_fu_313_p4,
        p_read2 => ap_phi_mux_l10_buf_0_phi_fu_325_p4,
        p_read3 => ap_phi_mux_l10_buf5_0_phi_fu_338_p4,
        p_read4 => call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_return,
        p_read5 => ap_phi_mux_l20_buf78_0_phi_fu_350_p4,
        ap_return => call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_return);

    call_ret2_xfExtractPixels_1_12_5_s_fu_435 : component cornerTracker_xfExtractPixels_1_12_5_s
    port map (
        ap_ready => call_ret2_xfExtractPixels_1_12_5_s_fu_435_ap_ready,
        p_read1 => buf0_V_fu_509_p5,
        ap_return => call_ret2_xfExtractPixels_1_12_5_s_fu_435_ap_return);

    call_ret3_xfExtractPixels_1_12_5_s_fu_440 : component cornerTracker_xfExtractPixels_1_12_5_s
    port map (
        ap_ready => call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_ready,
        p_read1 => buf1_V_fu_521_p5,
        ap_return => call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_return);

    call_ret4_xfExtractPixels_1_12_5_s_fu_446 : component cornerTracker_xfExtractPixels_1_12_5_s
    port map (
        ap_ready => call_ret4_xfExtractPixels_1_12_5_s_fu_446_ap_ready,
        p_read1 => buf2_V_fu_533_p5,
        ap_return => call_ret4_xfExtractPixels_1_12_5_s_fu_446_ap_return);

    mux_32_32_1_1_U230 : component cornerTracker_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf1_q0,
        din2 => buf2_q0,
        din3 => tp,
        dout => buf0_V_fu_509_p5);

    mux_32_32_1_1_U231 : component cornerTracker_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf1_q0,
        din2 => buf2_q0,
        din3 => mid,
        dout => buf1_V_fu_521_p5);

    mux_32_32_1_1_U232 : component cornerTracker_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => buf_r_q0,
        din1 => buf1_q0,
        din2 => buf2_q0,
        din3 => bottom,
        dout => buf2_V_fu_533_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state5))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Array_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                Array_0_reg_388 <= select_ln874_reg_790;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Array_0_reg_388 <= p_read9;
            end if; 
        end if;
    end process;

    P0_0_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                P0_0_reg_398 <= ap_const_lv8_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                P0_0_reg_398 <= p_read10;
            end if; 
        end if;
    end process;

    empty_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
                empty_reg_297 <= add_ln695_reg_748;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_297 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                i_op_assign_reg_410 <= ap_const_lv16_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_reg_410 <= p_read111;
            end if; 
        end if;
    end process;

    l00_buf3_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l00_buf3_0_reg_309 <= call_ret2_reg_772;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l00_buf3_0_reg_309 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    l00_buf4_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l00_buf4_0_reg_358 <= call_ret2_reg_772;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l00_buf4_0_reg_358 <= p_read2;
            end if; 
        end if;
    end process;

    l10_buf5_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l10_buf5_0_reg_333 <= call_ret3_reg_778;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l10_buf5_0_reg_333 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    l10_buf6_0_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l10_buf6_0_reg_368 <= call_ret3_reg_778;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l10_buf6_0_reg_368 <= p_read5;
            end if; 
        end if;
    end process;

    l10_buf_0_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l10_buf_0_reg_321 <= l10_buf5_0_reg_333;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l10_buf_0_reg_321 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    l20_buf78_0_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l20_buf78_0_reg_346 <= call_ret4_reg_784;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l20_buf78_0_reg_346 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    l20_buf8_0_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                l20_buf8_0_reg_378 <= call_ret4_reg_784;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l20_buf8_0_reg_378 <= p_read8;
            end if; 
        end if;
    end process;

    read_index_0_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln88_fu_467_p2 = ap_const_lv1_0) and (flag_offset = ap_const_lv1_1))) then 
                read_index_0_fu_118 <= add_ln93_fu_478_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                read_index_0_fu_118 <= p_read210;
            end if; 
        end if;
    end process;

    write_index_0_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln88_reg_744_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln874_reg_768 = ap_const_lv1_0))) then 
                write_index_0_fu_114 <= add_ln110_fu_589_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_index_0_fu_114 <= p_read312;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln695_reg_748 <= add_ln695_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln88_reg_744_pp0_iter2_reg = ap_const_lv1_0))) then
                call_ret2_reg_772 <= call_ret2_xfExtractPixels_1_12_5_s_fu_435_ap_return;
                call_ret3_reg_778 <= call_ret3_xfExtractPixels_1_12_5_s_fu_440_ap_return;
                call_ret4_reg_784 <= call_ret4_xfExtractPixels_1_12_5_s_fu_446_ap_return;
                select_ln874_reg_790 <= select_ln874_fu_545_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_297_pp0_iter1_reg <= empty_reg_297;
                icmp_ln88_reg_744 <= icmp_ln88_fu_467_p2;
                icmp_ln88_reg_744_pp0_iter1_reg <= icmp_ln88_reg_744;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then
                icmp_ln874_reg_768 <= icmp_ln874_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln874_reg_768_pp0_iter3_reg <= icmp_ln874_reg_768;
                icmp_ln88_reg_744_pp0_iter2_reg <= icmp_ln88_reg_744_pp0_iter1_reg;
                icmp_ln88_reg_744_pp0_iter3_reg <= icmp_ln88_reg_744_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_744_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln874_reg_768 = ap_const_lv1_0))) then
                or_ln1353_reg_795 <= or_ln1353_fu_583_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln110_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(write_index_0_fu_114));
    add_ln695_fu_472_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_phi_fu_301_p4) + unsigned(ap_const_lv11_1));
    add_ln93_fu_478_p2 <= std_logic_vector(unsigned(read_index_0_fu_118) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(thresh_48_empty_n, out_harris_mat_420_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln874_reg_768_pp0_iter3_reg, ap_predicate_op44_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (thresh_48_empty_n = ap_const_logic_0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1)) or ((out_harris_mat_420_full_n = ap_const_logic_0) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(thresh_48_empty_n, out_harris_mat_420_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln874_reg_768_pp0_iter3_reg, ap_predicate_op44_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (thresh_48_empty_n = ap_const_logic_0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1)) or ((out_harris_mat_420_full_n = ap_const_logic_0) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(thresh_48_empty_n, out_harris_mat_420_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln874_reg_768_pp0_iter3_reg, ap_predicate_op44_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (thresh_48_empty_n = ap_const_logic_0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1)) or ((out_harris_mat_420_full_n = ap_const_logic_0) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(thresh_48_empty_n, ap_predicate_op44_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((thresh_48_empty_n = ap_const_logic_0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(out_harris_mat_420_full_n, icmp_ln874_reg_768_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((out_harris_mat_420_full_n = ap_const_logic_0) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter3_state5_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln88_fu_467_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_fu_467_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_P0_0_phi_fu_402_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, P0_0_reg_398, icmp_ln88_reg_744_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_P0_0_phi_fu_402_p4 <= ap_const_lv8_0;
        else 
            ap_phi_mux_P0_0_phi_fu_402_p4 <= P0_0_reg_398;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_301_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln88_reg_744, empty_reg_297, add_ln695_reg_748)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_empty_phi_fu_301_p4 <= add_ln695_reg_748;
        else 
            ap_phi_mux_empty_phi_fu_301_p4 <= empty_reg_297;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_414_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, i_op_assign_reg_410, icmp_ln88_reg_744_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_i_op_assign_phi_fu_414_p4 <= ap_const_lv16_0;
        else 
            ap_phi_mux_i_op_assign_phi_fu_414_p4 <= i_op_assign_reg_410;
        end if; 
    end process;


    ap_phi_mux_l00_buf3_0_phi_fu_313_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, l00_buf3_0_reg_309, icmp_ln88_reg_744_pp0_iter3_reg, call_ret2_reg_772)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_l00_buf3_0_phi_fu_313_p4 <= call_ret2_reg_772;
        else 
            ap_phi_mux_l00_buf3_0_phi_fu_313_p4 <= l00_buf3_0_reg_309;
        end if; 
    end process;


    ap_phi_mux_l10_buf5_0_phi_fu_338_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, l10_buf5_0_reg_333, icmp_ln88_reg_744_pp0_iter3_reg, call_ret3_reg_778)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_l10_buf5_0_phi_fu_338_p4 <= call_ret3_reg_778;
        else 
            ap_phi_mux_l10_buf5_0_phi_fu_338_p4 <= l10_buf5_0_reg_333;
        end if; 
    end process;


    ap_phi_mux_l10_buf_0_phi_fu_325_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, l10_buf_0_reg_321, l10_buf5_0_reg_333, icmp_ln88_reg_744_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_l10_buf_0_phi_fu_325_p4 <= l10_buf5_0_reg_333;
        else 
            ap_phi_mux_l10_buf_0_phi_fu_325_p4 <= l10_buf_0_reg_321;
        end if; 
    end process;


    ap_phi_mux_l20_buf78_0_phi_fu_350_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, l20_buf78_0_reg_346, icmp_ln88_reg_744_pp0_iter3_reg, call_ret4_reg_784)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_reg_744_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_l20_buf78_0_phi_fu_350_p4 <= call_ret4_reg_784;
        else 
            ap_phi_mux_l20_buf78_0_phi_fu_350_p4 <= l20_buf78_0_reg_346;
        end if; 
    end process;


    ap_predicate_op44_read_state3_assign_proc : process(flag_offset, icmp_ln88_reg_744)
    begin
                ap_predicate_op44_read_state3 <= ((flag_offset = ap_const_lv1_1) and (icmp_ln88_reg_744 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= P0_0_reg_398;
    ap_return_1 <= i_op_assign_reg_410;
    ap_return_10 <= l20_buf8_0_reg_378;
    ap_return_11 <= Array_0_reg_388;
    ap_return_2 <= read_index_0_fu_118;
    ap_return_3 <= write_index_0_fu_114;
    ap_return_4 <= l00_buf3_0_reg_309;
    ap_return_5 <= l10_buf_0_reg_321;
    ap_return_6 <= l10_buf5_0_reg_333;
    ap_return_7 <= l20_buf78_0_reg_346;
    ap_return_8 <= l00_buf4_0_reg_358;
    ap_return_9 <= l10_buf6_0_reg_368;
    buf1_address0 <= zext_ln538_4_fu_496_p1(11 - 1 downto 0);
    buf1_address1 <= zext_ln538_fu_489_p1(11 - 1 downto 0);

    buf1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf1_ce0 <= ap_const_logic_1;
        else 
            buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf1_ce1 <= ap_const_logic_1;
        else 
            buf1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf1_d1 <= thresh_48_dout;

    buf1_we1_assign_proc : process(flag_offset, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln88_reg_744, ap_block_pp0_stage0_11001, row_ind_read_read_fu_164_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (row_ind_read_read_fu_164_p2 = ap_const_lv2_1) and (flag_offset = ap_const_lv1_1) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
            buf1_we1 <= ap_const_logic_1;
        else 
            buf1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf2_address0 <= zext_ln538_4_fu_496_p1(11 - 1 downto 0);
    buf2_address1 <= zext_ln538_fu_489_p1(11 - 1 downto 0);

    buf2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf2_ce0 <= ap_const_logic_1;
        else 
            buf2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf2_ce1 <= ap_const_logic_1;
        else 
            buf2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf2_d1 <= thresh_48_dout;

    buf2_we1_assign_proc : process(flag_offset, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln88_reg_744, ap_block_pp0_stage0_11001, row_ind_read_read_fu_164_p2)
    begin
        if ((not((row_ind_read_read_fu_164_p2 = ap_const_lv2_0)) and not((row_ind_read_read_fu_164_p2 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (flag_offset = ap_const_lv1_1) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
            buf2_we1 <= ap_const_logic_1;
        else 
            buf2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= zext_ln538_4_fu_496_p1(11 - 1 downto 0);
    buf_r_address1 <= zext_ln538_fu_489_p1(11 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= thresh_48_dout;

    buf_r_we1_assign_proc : process(flag_offset, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln88_reg_744, ap_block_pp0_stage0_11001, row_ind_read_read_fu_164_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (row_ind_read_read_fu_164_p2 = ap_const_lv2_0) and (flag_offset = ap_const_lv1_1) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln874_fu_503_p2 <= "1" when (empty_reg_297_pp0_iter1_reg = ap_const_lv11_0) else "0";
    icmp_ln88_fu_467_p2 <= "1" when (ap_phi_mux_empty_phi_fu_301_p4 = img_width) else "0";
    or_ln1353_fu_583_p2 <= (trunc_ln785_fu_579_p1 or ap_phi_mux_P0_0_phi_fu_402_p4);

    out_harris_mat_420_blk_n_assign_proc : process(out_harris_mat_420_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln874_reg_768_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_harris_mat_420_blk_n <= out_harris_mat_420_full_n;
        else 
            out_harris_mat_420_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_harris_mat_420_din <= or_ln1353_reg_795;

    out_harris_mat_420_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln874_reg_768_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln874_reg_768_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_harris_mat_420_write <= ap_const_logic_1;
        else 
            out_harris_mat_420_write <= ap_const_logic_0;
        end if; 
    end process;

    row_ind_read_read_fu_164_p2 <= row_ind;
    select_ln550_fu_561_p3 <= 
        ap_const_lv32_FF when (call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_return(0) = '1') else 
        ap_const_lv32_0;
    select_ln874_fu_545_p3 <= 
        ap_const_lv8_FF when (call_ret_xFSuppressionRad1_1_5_ap_uint_8_s_fu_422_ap_return(0) = '1') else 
        ap_const_lv8_0;
    shl_ln785_fu_573_p2 <= std_logic_vector(shift_left(unsigned(select_ln550_fu_561_p3),to_integer(unsigned('0' & zext_ln550_fu_569_p1(31-1 downto 0)))));
    shl_ln_fu_553_p3 <= (ap_phi_mux_i_op_assign_phi_fu_414_p4 & ap_const_lv3_0);

    thresh_48_blk_n_assign_proc : process(thresh_48_empty_n, flag_offset, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln88_reg_744)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (flag_offset = ap_const_lv1_1) and (icmp_ln88_reg_744 = ap_const_lv1_0))) then 
            thresh_48_blk_n <= thresh_48_empty_n;
        else 
            thresh_48_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    thresh_48_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op44_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1))) then 
            thresh_48_read <= ap_const_logic_1;
        else 
            thresh_48_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln785_fu_579_p1 <= shl_ln785_fu_573_p2(8 - 1 downto 0);
    zext_ln538_4_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_297_pp0_iter1_reg),64));
    zext_ln538_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_297),64));
    zext_ln550_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_553_p3),32));
end behav;
