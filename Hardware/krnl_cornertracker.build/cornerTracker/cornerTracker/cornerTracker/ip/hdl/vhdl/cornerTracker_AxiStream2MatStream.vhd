-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cornerTracker_AxiStream2MatStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_harris_mat_419_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_harris_mat_419_full_n : IN STD_LOGIC;
    in_harris_mat_419_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC );
end;


architecture behav of cornerTracker_AxiStream2MatStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1038_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_harris_mat_419_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln1038_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal j_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_146 : STD_LOGIC_VECTOR (21 downto 0);
    signal cols_bound_per_npc_1_reg_760 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal last_blk_width_1_reg_765 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_cast_i_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_cast_i_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub2_i_fu_206_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub2_i_reg_786 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1057_fu_212_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1057_reg_791 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1038_reg_796 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1038_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op93_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_223_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal rem_load_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal bLast_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_bits_per_clock_fu_237_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xf_bits_per_clock_reg_826 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1049_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_831_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_7_fu_388_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_7_reg_840 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_3_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_3_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1050_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1051_fu_409_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1051_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_2_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_2_reg_860 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln674_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln414_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_554_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_fu_557_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_reg_881 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_fu_583_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_reg_886 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln414_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_160_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln358_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_1_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cols_bound_per_npc_cast4_i_fu_193_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_i_fu_196_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal last_blk_width_cast2_i_fu_190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ptr_width_minus_fu_248_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1044_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1045_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1061_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_fu_307_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1057_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1057_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_1_fu_328_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln674_2_fu_332_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_4_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_6_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_336_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_5_fu_352_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_3_fu_364_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_5_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_4_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_3_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_412_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln674_fu_428_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln674_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln674_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_1_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_fu_460_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_2_fu_476_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln674_1_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1044_1_fu_301_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1054_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1054_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1054_1_fu_510_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln674_3_fu_517_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln674_1_fu_523_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_2_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_2_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1054_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_1_fu_561_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_fu_567_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_2_fu_575_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Repl2_4_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_1_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_4_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_4_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln674_1_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_1_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln414_fu_641_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln414_fu_646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_s_fu_637_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_fu_650_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_1_fu_669_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_681_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_2_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_3_fu_678_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_1_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_1_fu_702_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_662_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln414_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_3_fu_690_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_1_fu_720_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_2_fu_726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_739_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_739_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_739_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_739_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component cornerTracker_mul_mul_11ns_11ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    mul_mul_11ns_11ns_22_4_1_U38 : component cornerTracker_mul_mul_11ns_11ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_739_p0,
        din1 => grp_fu_739_p1,
        ce => grp_fu_739_ce,
        dout => grp_fu_739_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_0))) then 
                i_reg_146 <= i_1_fu_223_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_146 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    j_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_0))) then 
                j_reg_135 <= j_2_fu_293_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_831 = ap_const_lv1_1) and (icmp_ln1038_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_s_fu_100 <= ldata1_dout;
            elsif ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_100 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    rem_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_259_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_0))) then 
                rem_fu_96 <= rem_1_fu_276_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_0))) then 
                rem_fu_96 <= rem_2_fu_265_p2;
            elsif ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1057_reg_791 <= add_ln1057_fu_212_p2;
                mul_ln1038_reg_796 <= grp_fu_739_p2;
                sub2_i_reg_786 <= sub2_i_fu_206_p2;
                sub_cast_i_reg_781 <= sub_cast_i_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_0))) then
                bLast_reg_821 <= bLast_fu_232_p2;
                icmp_ln1049_reg_831 <= icmp_ln1049_fu_259_p2;
                rem_load_reg_810 <= rem_fu_96;
                xf_bits_per_clock_reg_826 <= xf_bits_per_clock_fu_237_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_bound_per_npc_1_reg_760 <= cols_bound_per_npc_dout;
                last_blk_width_1_reg_765 <= last_blk_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1038_reg_801 <= icmp_ln1038_fu_218_p2;
                icmp_ln1038_reg_801_pp0_iter1_reg <= icmp_ln1038_reg_801;
                icmp_ln1049_reg_831_pp0_iter1_reg <= icmp_ln1049_reg_831;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_831 = ap_const_lv1_1) and (icmp_ln1038_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1050_reg_850 <= icmp_ln1050_fu_404_p2;
                icmp_ln414_reg_870 <= icmp_ln414_fu_549_p2;
                lshr_ln674_reg_865 <= lshr_ln674_fu_494_p2;
                shl_ln414_reg_891 <= shl_ln414_fu_593_p2;
                sub_ln414_2_reg_886 <= sub_ln414_2_fu_583_p2;
                sub_ln674_2_reg_860 <= sub_ln674_2_fu_484_p2;
                trunc_ln1051_reg_855 <= trunc_ln1051_fu_409_p1;
                trunc_ln414_1_reg_881 <= trunc_ln414_1_fu_557_p1;
                trunc_ln414_reg_876 <= trunc_ln414_fu_554_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_831 = ap_const_lv1_0) and (icmp_ln1038_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln674_3_reg_845 <= lshr_ln674_3_fu_398_p2;
                sub_ln674_7_reg_840 <= sub_ln674_7_fu_388_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_fu_218_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_218_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1054_fu_500_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(zext_ln1044_1_fu_301_p1));
    add_ln1057_fu_212_p2 <= std_logic_vector(unsigned(last_blk_width_cast2_i_fu_190_p1) + unsigned(ap_const_lv6_1F));
    add_ln1061_fu_287_p2 <= std_logic_vector(unsigned(j_reg_135) + unsigned(ap_const_lv32_1));
    add_ln674_1_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) + unsigned(sub_ln674_3_fu_517_p2));
    add_ln674_fu_442_p2 <= std_logic_vector(signed(ap_const_lv6_21) + signed(trunc_ln674_fu_428_p1));
    and_ln414_1_fu_720_p2 <= (xor_ln414_fu_714_p2 and p_Val2_6_fu_662_p3);
    and_ln414_2_fu_726_p2 <= (select_ln414_3_fu_690_p3 and and_ln414_fu_708_p2);
    and_ln414_fu_708_p2 <= (shl_ln414_1_fu_696_p2 and lshr_ln414_1_fu_702_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, in_harris_mat_419_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_801_pp0_iter1_reg, ap_predicate_op93_read_state6)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (in_harris_mat_419_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op93_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, in_harris_mat_419_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_801_pp0_iter1_reg, ap_predicate_op93_read_state6)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (in_harris_mat_419_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op93_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, in_harris_mat_419_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_801_pp0_iter1_reg, ap_predicate_op93_read_state6)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (in_harris_mat_419_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op93_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
                ap_block_state1 <= ((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(ldata1_empty_n, ap_predicate_op93_read_state6)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op93_read_state6 = ap_const_boolean_1));
    end process;


    ap_block_state7_pp0_stage0_iter2_assign_proc : process(in_harris_mat_419_full_n, icmp_ln1038_reg_801_pp0_iter1_reg)
    begin
                ap_block_state7_pp0_stage0_iter2 <= ((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (in_harris_mat_419_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln1038_fu_218_p2)
    begin
        if ((icmp_ln1038_fu_218_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_160_p4_assign_proc : process(icmp_ln1038_reg_801_pp0_iter1_reg, icmp_ln1049_reg_831_pp0_iter1_reg, p_Result_7_fu_732_p2, ap_phi_reg_pp0_iter2_empty_reg_157, trunc_ln358_fu_618_p1)
    begin
        if ((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln1049_reg_831_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_160_p4 <= trunc_ln358_fu_618_p1;
            elsif ((icmp_ln1049_reg_831_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_160_p4 <= p_Result_7_fu_732_p2;
            else 
                ap_phi_mux_empty_phi_fu_160_p4 <= ap_phi_reg_pp0_iter2_empty_reg_157;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_160_p4 <= ap_phi_reg_pp0_iter2_empty_reg_157;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_157 <= "XXXXXXXX";

    ap_predicate_op93_read_state6_assign_proc : process(icmp_ln1038_reg_801, icmp_ln1049_reg_831)
    begin
                ap_predicate_op93_read_state6 <= ((icmp_ln1049_reg_831 = ap_const_lv1_1) and (icmp_ln1038_reg_801 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_232_p2 <= "1" when (j_reg_135 = sub_cast_i_reg_781) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_bound_per_npc_cast4_i_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_1_reg_760),12));

    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(rem_load_reg_810));

    grp_fu_739_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_739_ce <= ap_const_logic_0;
        else 
            grp_fu_739_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_739_p0 <= grp_fu_739_p00(11 - 1 downto 0);
    grp_fu_739_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_dout),22));
    grp_fu_739_p1 <= grp_fu_739_p10(11 - 1 downto 0);
    grp_fu_739_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_dout),22));
    i_1_fu_223_p2 <= std_logic_vector(unsigned(i_reg_146) + unsigned(ap_const_lv22_1));
    icmp_ln1038_fu_218_p2 <= "1" when (i_reg_146 = mul_ln1038_reg_796) else "0";
    icmp_ln1049_fu_259_p2 <= "1" when (signed(rem_fu_96) < signed(zext_ln1044_fu_244_p1)) else "0";
    icmp_ln1050_fu_404_p2 <= "1" when (rem_load_reg_810 = ap_const_lv32_0) else "0";
    icmp_ln414_fu_549_p2 <= "1" when (unsigned(rem_load_reg_810) > unsigned(sext_ln1054_fu_506_p1)) else "0";
    icmp_ln674_1_fu_322_p2 <= "1" when (unsigned(grp_fu_167_p2) > unsigned(sub_ln1057_fu_317_p2)) else "0";
    icmp_ln674_fu_422_p2 <= "0" when (tmp_fu_412_p4 = ap_const_lv27_0) else "1";

    in_harris_mat_419_blk_n_assign_proc : process(in_harris_mat_419_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1038_reg_801_pp0_iter1_reg)
    begin
        if (((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_harris_mat_419_blk_n <= in_harris_mat_419_full_n;
        else 
            in_harris_mat_419_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_harris_mat_419_din <= ap_phi_mux_empty_phi_fu_160_p4;

    in_harris_mat_419_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1038_reg_801_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1038_reg_801_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_harris_mat_419_write <= ap_const_logic_1;
        else 
            in_harris_mat_419_write <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_293_p3 <= 
        ap_const_lv32_0 when (bLast_fu_232_p2(0) = '1') else 
        add_ln1061_fu_287_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last_blk_width_cast2_i_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_1_reg_765),6));

    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1038_reg_801, icmp_ln1049_reg_831)
    begin
        if (((icmp_ln1049_reg_831 = ap_const_lv1_1) and (icmp_ln1038_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op93_read_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op93_read_state6 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln414_1_fu_702_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_3_fu_678_p1(8-1 downto 0)))));
    lshr_ln414_fu_650_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_fu_646_p1(8-1 downto 0)))));
    lshr_ln674_1_fu_626_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_1_fu_623_p1(31-1 downto 0)))));
    lshr_ln674_2_fu_533_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_2_fu_529_p1(31-1 downto 0)))));
    lshr_ln674_3_fu_398_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_372_p3),to_integer(unsigned('0' & zext_ln674_3_fu_394_p1(31-1 downto 0)))));
    lshr_ln674_4_fu_607_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_4_fu_604_p1(31-1 downto 0)))));
    lshr_ln674_fu_494_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_468_p3),to_integer(unsigned('0' & zext_ln674_fu_490_p1(31-1 downto 0)))));
    p_Repl2_4_fu_545_p1 <= p_Result_6_fu_539_p2(8 - 1 downto 0);
    p_Repl2_s_fu_637_p1 <= p_Result_s_fu_632_p2(8 - 1 downto 0);
    p_Result_5_fu_656_p2 <= (p_Repl2_s_fu_637_p1 and lshr_ln414_fu_650_p2);
    p_Result_6_fu_539_p2 <= (lshr_ln674_2_fu_533_p2 and ldata1_dout);
    p_Result_7_fu_732_p2 <= (and_ln414_2_fu_726_p2 or and_ln414_1_fu_720_p2);
    p_Result_8_fu_613_p2 <= (lshr_ln674_4_fu_607_p2 and lshr_ln674_3_reg_845);
    p_Result_s_fu_632_p2 <= (lshr_ln674_reg_865 and lshr_ln674_1_fu_626_p2);
    p_Val2_6_fu_662_p3 <= 
        ap_const_lv8_0 when (icmp_ln1050_reg_850(0) = '1') else 
        p_Result_5_fu_656_p2;
    ptr_width_minus_fu_248_p3 <= 
        sub2_i_reg_786 when (bLast_fu_232_p2(0) = '1') else 
        ap_const_lv6_18;
    rem_1_fu_276_p2 <= std_logic_vector(unsigned(rem_fu_96) + unsigned(zext_ln1045_fu_255_p1));
    rem_2_fu_265_p2 <= std_logic_vector(unsigned(rem_fu_96) - unsigned(zext_ln1044_fu_244_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1057_fu_307_p3 <= 
        add_ln1057_reg_791 when (bLast_reg_821(0) = '1') else 
        ap_const_lv6_27;
    select_ln414_1_fu_669_p3 <= 
        trunc_ln414_1_reg_881 when (icmp_ln414_reg_870(0) = '1') else 
        trunc_ln414_reg_876;
    select_ln414_2_fu_575_p3 <= 
        sub_ln414_1_fu_561_p2 when (icmp_ln414_fu_549_p2(0) = '1') else 
        trunc_ln414_fu_554_p1;
    select_ln414_3_fu_690_p3 <= 
        tmp_2_fu_681_p4 when (icmp_ln414_reg_870(0) = '1') else 
        shl_ln414_reg_891;
    select_ln414_fu_567_p3 <= 
        trunc_ln414_fu_554_p1 when (icmp_ln414_fu_549_p2(0) = '1') else 
        trunc_ln414_1_fu_557_p1;
    select_ln674_1_fu_468_p3 <= 
        tmp_1_fu_432_p4 when (icmp_ln674_fu_422_p2(0) = '1') else 
        p_Val2_s_fu_100;
    select_ln674_2_fu_476_p3 <= 
        sub_ln674_fu_448_p2 when (icmp_ln674_fu_422_p2(0) = '1') else 
        trunc_ln674_fu_428_p1;
    select_ln674_3_fu_364_p3 <= 
        sub_ln674_4_fu_346_p2 when (icmp_ln674_1_fu_322_p2(0) = '1') else 
        sub_ln674_6_fu_358_p2;
    select_ln674_4_fu_372_p3 <= 
        tmp_3_fu_336_p4 when (icmp_ln674_1_fu_322_p2(0) = '1') else 
        p_Val2_s_fu_100;
    select_ln674_5_fu_380_p3 <= 
        sub_ln674_5_fu_352_p2 when (icmp_ln674_1_fu_322_p2(0) = '1') else 
        trunc_ln674_1_fu_328_p1;
    select_ln674_fu_460_p3 <= 
        add_ln674_fu_442_p2 when (icmp_ln674_fu_422_p2(0) = '1') else 
        sub_ln674_1_fu_454_p2;
        sext_ln1054_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_500_p2),6));

        sext_ln1054_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_500_p2),32));

    shl_ln414_1_fu_696_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_2_fu_674_p1(8-1 downto 0)))));
    shl_ln414_fu_593_p2 <= std_logic_vector(shift_left(unsigned(p_Repl2_4_fu_545_p1),to_integer(unsigned('0' & zext_ln414_1_fu_589_p1(8-1 downto 0)))));
    sub2_i_fu_206_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(last_blk_width_cast2_i_fu_190_p1));
        sub_cast_i_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_i_fu_196_p2),32));

    sub_i_fu_196_p2 <= std_logic_vector(unsigned(cols_bound_per_npc_cast4_i_fu_193_p1) + unsigned(ap_const_lv12_FFF));
    sub_ln1057_fu_317_p2 <= std_logic_vector(unsigned(zext_ln1057_fu_313_p1) - unsigned(rem_load_reg_810));
    sub_ln414_1_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln414_fu_554_p1));
    sub_ln414_2_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln414_fu_567_p3));
    sub_ln414_fu_641_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln1051_reg_855));
    sub_ln674_1_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_428_p1));
    sub_ln674_2_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_fu_460_p3));
    sub_ln674_3_fu_517_p2 <= std_logic_vector(unsigned(trunc_ln1054_fu_514_p1) - unsigned(sext_ln1054_1_fu_510_p1));
    sub_ln674_4_fu_346_p2 <= std_logic_vector(unsigned(trunc_ln674_1_fu_328_p1) - unsigned(trunc_ln674_2_fu_332_p1));
    sub_ln674_5_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_1_fu_328_p1));
    sub_ln674_6_fu_358_p2 <= std_logic_vector(unsigned(trunc_ln674_2_fu_332_p1) - unsigned(trunc_ln674_1_fu_328_p1));
    sub_ln674_7_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln674_3_fu_364_p3));
    sub_ln674_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(trunc_ln674_fu_428_p1));
    
    tmp_1_fu_432_p4_proc : process(p_Val2_s_fu_100)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_1_fu_432_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_100;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_1_fu_432_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_1_fu_432_p4_i) := p_Val2_s_fu_100(32-1-tmp_1_fu_432_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_432_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_2_fu_681_p4_proc : process(shl_ln414_reg_891)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_2_fu_681_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln414_reg_891;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_2_fu_681_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_2_fu_681_p4_i) := shl_ln414_reg_891(8-1-tmp_2_fu_681_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_681_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_3_fu_336_p4_proc : process(p_Val2_s_fu_100)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_3_fu_336_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_100;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_3_fu_336_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_3_fu_336_p4_i) := p_Val2_s_fu_100(32-1-tmp_3_fu_336_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_336_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_412_p4 <= grp_fu_167_p2(31 downto 5);
    trunc_ln1051_fu_409_p1 <= rem_load_reg_810(4 - 1 downto 0);
    trunc_ln1054_fu_514_p1 <= rem_load_reg_810(6 - 1 downto 0);
    trunc_ln358_fu_618_p1 <= p_Result_8_fu_613_p2(8 - 1 downto 0);
    trunc_ln414_1_fu_557_p1 <= add_ln1054_fu_500_p2(4 - 1 downto 0);
    trunc_ln414_fu_554_p1 <= rem_load_reg_810(4 - 1 downto 0);
    trunc_ln674_1_fu_328_p1 <= grp_fu_167_p2(6 - 1 downto 0);
    trunc_ln674_2_fu_332_p1 <= sub_ln1057_fu_317_p2(6 - 1 downto 0);
    trunc_ln674_fu_428_p1 <= grp_fu_167_p2(6 - 1 downto 0);
    xf_bits_per_clock_fu_237_p3 <= 
        last_blk_width_1_reg_765 when (bLast_fu_232_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln414_fu_714_p2 <= (ap_const_lv8_FF xor and_ln414_fu_708_p2);
    zext_ln1044_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_826),5));
    zext_ln1044_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_237_p3),32));
    zext_ln1045_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_248_p3),32));
    zext_ln1057_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_fu_307_p3),32));
    zext_ln414_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_575_p3),8));
    zext_ln414_2_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_669_p3),8));
    zext_ln414_3_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_2_reg_886),8));
    zext_ln414_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_641_p2),8));
    zext_ln674_1_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_reg_860),32));
    zext_ln674_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_1_fu_523_p2),32));
    zext_ln674_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_380_p3),32));
    zext_ln674_4_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_reg_840),32));
    zext_ln674_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_476_p3),32));
end behav;
