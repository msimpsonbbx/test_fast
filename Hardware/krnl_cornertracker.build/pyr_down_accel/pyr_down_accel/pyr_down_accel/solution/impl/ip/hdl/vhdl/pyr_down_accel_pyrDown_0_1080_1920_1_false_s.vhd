-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyr_down_accel_pyrDown_0_1080_1920_1_false_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pyr1_in_mat_431_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    pyr1_in_mat_431_empty_n : IN STD_LOGIC;
    pyr1_in_mat_431_read : OUT STD_LOGIC;
    pyr1_out_mat_432_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    pyr1_out_mat_432_full_n : IN STD_LOGIC;
    pyr1_out_mat_432_write : OUT STD_LOGIC;
    p_src_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_1_empty_n : IN STD_LOGIC;
    p_src_1_read : OUT STD_LOGIC;
    p_src_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_2_empty_n : IN STD_LOGIC;
    p_src_2_read : OUT STD_LOGIC );
end;


architecture behav of pyr_down_accel_pyrDown_0_1080_1920_1_false_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_1_blk_n : STD_LOGIC;
    signal p_src_2_blk_n : STD_LOGIC;
    signal input_height_fu_52_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_height_reg_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal input_width_fu_57_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_width_reg_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_in_mat_431_read : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_write : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_idle : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_continue : STD_LOGIC;
    signal grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call10 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready : STD_LOGIC;
    signal ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component pyr_down_accel_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s IS
    port (
        pyr1_in_mat_431_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        pyr1_in_mat_431_empty_n : IN STD_LOGIC;
        pyr1_in_mat_431_read : OUT STD_LOGIC;
        pyr1_out_mat_432_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        pyr1_out_mat_432_full_n : IN STD_LOGIC;
        pyr1_out_mat_432_write : OUT STD_LOGIC;
        in_rows : IN STD_LOGIC_VECTOR (15 downto 0);
        in_cols : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_rows_ap_vld : IN STD_LOGIC;
        in_cols_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42 : component pyr_down_accel_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s
    port map (
        pyr1_in_mat_431_dout => pyr1_in_mat_431_dout,
        pyr1_in_mat_431_empty_n => pyr1_in_mat_431_empty_n,
        pyr1_in_mat_431_read => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_in_mat_431_read,
        pyr1_out_mat_432_din => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_din,
        pyr1_out_mat_432_full_n => pyr1_out_mat_432_full_n,
        pyr1_out_mat_432_write => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_write,
        in_rows => input_height_reg_62,
        in_cols => input_width_reg_67,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_rows_ap_vld => ap_const_logic_1,
        in_cols_ap_vld => ap_const_logic_1,
        ap_start => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start,
        ap_done => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done,
        ap_ready => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready,
        ap_idle => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_idle,
        ap_continue => grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done <= ap_const_logic_0;
                elsif ((grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready <= ap_const_logic_0;
                elsif ((grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                input_height_reg_62 <= input_height_fu_52_p1;
                input_width_reg_67 <= input_width_fu_57_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_1_empty_n, p_src_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call10_assign_proc : process(ap_start, ap_done_reg, p_src_1_empty_n, p_src_2_empty_n)
    begin
                ap_block_state1_ignore_call10 <= ((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready, ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready and ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done <= (grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done or ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_done);
    ap_sync_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready <= (grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready or ap_sync_reg_grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_ready);

    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_continue <= ap_const_logic_1;
        else 
            grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start <= grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_ap_start_reg;
    input_height_fu_52_p1 <= p_src_1_dout(16 - 1 downto 0);
    input_width_fu_57_p1 <= p_src_2_dout(16 - 1 downto 0);

    p_src_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_blk_n <= p_src_1_empty_n;
        else 
            p_src_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_read <= ap_const_logic_1;
        else 
            p_src_1_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_blk_n <= p_src_2_empty_n;
        else 
            p_src_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_read <= ap_const_logic_1;
        else 
            p_src_2_read <= ap_const_logic_0;
        end if; 
    end process;


    pyr1_in_mat_431_read_assign_proc : process(grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_in_mat_431_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pyr1_in_mat_431_read <= grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_in_mat_431_read;
        else 
            pyr1_in_mat_431_read <= ap_const_logic_0;
        end if; 
    end process;

    pyr1_out_mat_432_din <= grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_din;

    pyr1_out_mat_432_write_assign_proc : process(grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pyr1_out_mat_432_write <= grp_xFpyrDownKernel_1080u_1920u_0u_1u_1_false_s_fu_42_pyr1_out_mat_432_write;
        else 
            pyr1_out_mat_432_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
